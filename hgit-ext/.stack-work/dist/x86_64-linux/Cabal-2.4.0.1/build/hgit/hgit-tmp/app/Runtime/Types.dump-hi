
==================== FINAL INTERFACE ====================
2019-05-20 21:43:58.370104731 UTC

interface main:Runtime.Types [family instance module] 8063
  interface hash: fc6c173f03c28396053b8232a53f7cc5
  ABI hash: 8992a00702318e65c5fabfade03c19fa
  export-list hash: c69cf15791bec2cf3135d9b0db2121c6
  orphan hash: b75bc682842ab1cb92e49130357490d3
  flag hash: 0d573f0378d62f8692315b5e560c8adb
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Runtime.Types.initialRepoState
  Runtime.Types.RepoState{Runtime.Types.RepoState branches currentBranch}
module dependencies:
package dependencies: aeson-1.4.2.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8 base64-bytestring-1.0.0.2 bifunctors-5.5.3
                      binary-0.8.6.0 bytestring-0.10.8.2 comonad-5.0.4 containers-0.6.0.1
                      deepseq-1.4.4.0 deriving-compat-0.5.4 distributive-0.6
                      dlist-0.8.0.5 exceptions-0.10.0 free-5.1 ghc-boot-th-8.6.3
                      ghc-prim-0.5.3 hashable-1.2.7.0 hgit-0.1.0.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 merkle-schemes-0.1.0.0 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      recursion-schemes-5.1.1 scientific-0.3.6.2 semigroupoids-5.3.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.2.10.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.5.0 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unordered-containers-0.2.9.0
                      uuid-types-1.0.3 vector-0.12.0.2
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.6.0.1:Data.Graph
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.5:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         hgit-0.1.0.0:HGit.Core.Types
                         merkle-schemes-0.1.0.0:Merkle.Types.IPFS
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         recursion-schemes-5.1.1:Data.Functor.Base
                         recursion-schemes-5.1.1:Data.Functor.Foldable
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  aeson-1.4.2.0:Data.Aeson bfba563baa214951132bfa3fc3e1a304
import  -/  aeson-1.4.2.0:Data.Aeson.Types.FromJSON 7156342bffec9a90a34c7ea87a68d862
import  -/  aeson-1.4.2.0:Data.Aeson.Types.Internal b05c15da21ef7bcf20d9bb66d4b270d6
import  -/  aeson-1.4.2.0:Data.Aeson.Types.ToJSON d4b5a4d5322cef2155ea56a0b9db079b
import  -/  base-4.12.0.0:GHC.Generics 7aea30cad019e3a5fc11eb21c8019cc5
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  containers-0.6.0.1:Data.Map 4f92a276b97311a7619a6e03c8ca6ee3
import  -/  containers-0.6.0.1:Data.Map.Internal 7258cbfb7d1b897678a42b6739fc4dac
import  -/  hgit-0.1.0.0:HGit.Core.Types 79e907bf15f7ab56c84aba27eb2d3ddb
dd587e5b3aa12f6942a059e6733288f6
  $fFromJSONRepoState ::
    Data.Aeson.Types.FromJSON.FromJSON Runtime.Types.RepoState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Runtime.Types.RepoState
                  Runtime.Types.$fFromJSONRepoState_$cparseJSON
                  Runtime.Types.$fFromJSONRepoState_$cparseJSONList -}
4dabe3bebede027cc11c91e88b23f754
  $fFromJSONRepoState1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
48379a39f8adb21bcdec79502d59a447
  $fFromJSONRepoState10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("branches"#) -}
7ee4468ad6c203c757892d22c8df2014
  $fFromJSONRepoState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
90da5c15aca854f4beffc9128cd9ad91
  $fFromJSONRepoState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
49557544d07e3fbbb0e2c14503f983c8
  $fFromJSONRepoState4 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.Zero a1
    -> Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Maybe.Just "branches")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0
                  (Data.Map.Internal.Map
                     HGit.Core.Types.BranchName
                     (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Maybe.Just "currentBranch")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
            a1)
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ a1
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.Zero a1)
                   (obj :: Data.Aeson.Types.Internal.Object) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "branches")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0
                                (Data.Map.Internal.Map
                                   HGit.Core.Types.BranchName
                                   (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                             a1)
                   = Data.Aeson.Types.FromJSON.$fFromRecordarityM11_$cparseRecord
                       @ ('GHC.Generics.MetaSel
                            ('GHC.Maybe.Just "branches")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                       @ Data.Aeson.Types.Generic.Zero
                       @ (GHC.Generics.K1
                            GHC.Generics.R
                            (Data.Map.Internal.Map
                               HGit.Core.Types.BranchName
                               (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                       Runtime.Types.$fFromJSONRepoState_$s$fSelectorMetaMetaSel1
                       Runtime.Types.$fFromJSONRepoState8
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.Zero>_N
                                 <GHC.Generics.K1
                                    GHC.Generics.R
                                    (Data.Map.Internal.Map
                                       HGit.Core.Types.BranchName
                                       (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))>_N))
                       @ a1
                       opts
                       fargs
                       obj
                 } in
                 let {
                   e :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "currentBranch")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 HGit.Core.Types.BranchName)
                             a1)
                   = Data.Aeson.Types.FromJSON.$fFromRecordarityM11_$cparseRecord
                       @ ('GHC.Generics.MetaSel
                            ('GHC.Maybe.Just "currentBranch")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                       @ Data.Aeson.Types.Generic.Zero
                       @ (GHC.Generics.K1 GHC.Generics.R HGit.Core.Types.BranchName)
                       Runtime.Types.$fFromJSONRepoState_$s$fSelectorMetaMetaSel
                       Runtime.Types.$fFromJSONRepoState5
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.Zero>_N
                                 <GHC.Generics.K1 GHC.Generics.R [GHC.Types.Char]>_N))
                       @ a1
                       opts
                       fargs
                       obj
                 } in
                 (\ @ f4 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             ((GHC.Generics.:*:)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "branches")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Map.Internal.Map
                                         HGit.Core.Types.BranchName
                                         (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "currentBranch")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                                a1)
                             f4
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <GHC.Generics.M1
                          GHC.Generics.S
                          ('GHC.Generics.MetaSel
                             ('GHC.Maybe.Just "branches")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          (GHC.Generics.Rec0
                             (Data.Map.Internal.Map
                                HGit.Core.Types.BranchName
                                (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                          a1>_R)
                    @ f4
                    @ r
                    path
                    kf
                    (\ (a2 :: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Maybe.Just "branches")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Map.Internal.Map
                                      HGit.Core.Types.BranchName
                                      (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                                a1) ->
                     e `cast`
                     (Data.Aeson.Types.Internal.N:Parser[0]
                          <GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "currentBranch")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 HGit.Core.Types.BranchName)
                             a1>_R)
                       @ f4
                       @ r
                       path
                       kf
                       (\ (a3 :: GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "currentBranch")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 HGit.Core.Types.BranchName)
                                   a1) ->
                        ks
                          (GHC.Generics.:*:
                             @ Type
                             @ (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     ('GHC.Maybe.Just "branches")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0
                                     (Data.Map.Internal.Map
                                        HGit.Core.Types.BranchName
                                        (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                             @ (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     ('GHC.Maybe.Just "currentBranch")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                             @ a1
                             a2
                             a3))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <(GHC.Generics.:*:)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Maybe.Just "branches")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0
                                    (Data.Map.Internal.Map
                                       HGit.Core.Types.BranchName
                                       (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Maybe.Just "currentBranch")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                              a1>_R))) -}
fab601ee3fbcabbfd83bb9ee23526aae
  $fFromJSONRepoState5 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.Zero a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Char] a1)
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a1
                   (w1 :: Data.Aeson.Types.Internal.Options)
                   (w2 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.Zero a1)
                   (w3 :: Data.Aeson.Types.Internal.Value) ->
                 Data.Aeson.Types.FromJSON.$w$cgParseJSON2
                   @ [GHC.Types.Char]
                   @ Data.Aeson.Types.Generic.Zero
                   @ GHC.Generics.R
                   Runtime.Types.$fFromJSONRepoState_$s$fFromJSON[]
                   @ a1
                   w3) -}
59c2b834196a5e9ef82b2c720effc88e
  $fFromJSONRepoState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Runtime.Types.$fFromJSONRepoState7) -}
b3f1aa0f56519c2f55d5c750e3cdf00a
  $fFromJSONRepoState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("currentBranch"#) -}
3552dc71e19e244cf4e22235ee1702df
  $fFromJSONRepoState8 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.Zero a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.K1
            GHC.Generics.R
            (Data.Map.Internal.Map
               HGit.Core.Types.BranchName
               (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))
            a1)
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a1
                   (w1 :: Data.Aeson.Types.Internal.Options)
                   (w2 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.Zero a1)
                   (w3 :: Data.Aeson.Types.Internal.Value) ->
                 Data.Aeson.Types.FromJSON.$w$cgParseJSON2
                   @ (Data.Map.Internal.Map
                        HGit.Core.Types.BranchName
                        (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))
                   @ Data.Aeson.Types.Generic.Zero
                   @ GHC.Generics.R
                   Runtime.Types.$fFromJSONRepoState_$s$fFromJSONMap
                   @ a1
                   w3) -}
dfc135f7e354e469e3cde457865111d0
  $fFromJSONRepoState9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Runtime.Types.$fFromJSONRepoState10) -}
dd587e5b3aa12f6942a059e6733288f6
  $fFromJSONRepoState_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Runtime.Types.RepoState
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:*:)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Maybe.Just "branches")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Map.Internal.Map
                                      HGit.Core.Types.BranchName
                                      (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Maybe.Just "currentBranch")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                             GHC.Types.Any)
                   = case x of wild {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Data.Aeson.Types.FromJSON.$fConsFromJSON'TYPEarityfTrue1
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.String ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       ((GHC.Generics.:*:)
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Maybe.Just "branches")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0
                                                (Data.Map.Internal.Map
                                                   HGit.Core.Types.BranchName
                                                   (HGit.Core.Types.Hash
                                                      HGit.Core.Types.HashableCommit))))
                                          (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Maybe.Just "currentBranch")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                                          GHC.Types.Any)
                                       f4
                                       r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <(GHC.Generics.:*:)
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Maybe.Just "branches")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0
                                             (Data.Map.Internal.Map
                                                HGit.Core.Types.BranchName
                                                (HGit.Core.Types.Hash
                                                   HGit.Core.Types.HashableCommit))))
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Maybe.Just "currentBranch")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                                       GHC.Types.Any>_R))
                       Data.Aeson.Types.Internal.Object obj
                       -> Runtime.Types.$fFromJSONRepoState4
                            @ GHC.Types.Any
                            Runtime.Types.$fFromJSONRepoState_opts
                            (Data.Aeson.Types.FromJSON.$WNoFromArgs @ GHC.Types.Any)
                            obj }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             Runtime.Types.RepoState f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <(GHC.Generics.:*:)
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "branches")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0
                                (Data.Map.Internal.Map
                                   HGit.Core.Types.BranchName
                                   (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "currentBranch")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                          GHC.Types.Any>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: (GHC.Generics.:*:)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "branches")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Map.Internal.Map
                                         HGit.Core.Types.BranchName
                                         (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "currentBranch")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 HGit.Core.Types.BranchName))
                                GHC.Types.Any) ->
                     ks
                       (case a2 of wild { GHC.Generics.:*: ds ds1 ->
                        Runtime.Types.RepoState
                          ds
                            `cast`
                          (GHC.Generics.N:M1[0]
                               <Type>_N
                               <GHC.Generics.S>_P
                               <'GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "branches")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy>_P
                               <GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     HGit.Core.Types.BranchName
                                     (HGit.Core.Types.Hash
                                        HGit.Core.Types.HashableCommit))>_R <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                                    <Type>_N
                                                                                                    <GHC.Generics.R>_P
                                                                                                    <Data.Map.Internal.Map
                                                                                                       HGit.Core.Types.BranchName
                                                                                                       (HGit.Core.Types.Hash
                                                                                                          HGit.Core.Types.HashableCommit)>_R
                                                                                                    <GHC.Types.Any>_P)
                          ds1
                            `cast`
                          (GHC.Generics.N:M1[0]
                               <Type>_N
                               <GHC.Generics.S>_P
                               <'GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "currentBranch")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy>_P
                               <GHC.Generics.K1
                                  GHC.Generics.R
                                  HGit.Core.Types.BranchName>_R <GHC.Types.Any>_N ; GHC.Generics.N:K1[0]
                                                                                        <Type>_N
                                                                                        <GHC.Generics.R>_P
                                                                                        <HGit.Core.Types.BranchName>_R
                                                                                        <GHC.Types.Any>_P) })))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Runtime.Types.RepoState>_R))) -}
dd587e5b3aa12f6942a059e6733288f6
  $fFromJSONRepoState_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Runtime.Types.RepoState]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg20 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Runtime.Types.$fFromJSONRepoState3
                            (GHC.CString.unpackAppendCString#
                               Runtime.Types.$fFromJSONRepoState2
                               (GHC.CString.unpackAppendCString#
                                  Runtime.Types.$fFromJSONRepoState1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: Type -> Type
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Runtime.Types.RepoState] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg20)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Runtime.Types.RepoState]>_R))
                   Data.Aeson.Types.Internal.Array a1
                   -> case a1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds2 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Runtime.Types.$fFromJSONRepoState_go 0# ($wgo 0#) } }) -}
e8594c9ad583d0a122d8882efaac85ce
  $fFromJSONRepoState_$s$fFromJSONConst ::
    forall k (b :: k).
    Data.Aeson.Types.FromJSON.FromJSON
      (Data.Functor.Const.Const Merkle.Types.IPFS.RawIPFSHash b)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ k @ b :: k.
                  @ (Data.Functor.Const.Const Merkle.Types.IPFS.RawIPFSHash b)
                  (\ (x :: Data.Aeson.Types.Internal.Value) ->
                   let {
                     m :: Data.Aeson.Types.Internal.Parser Merkle.Types.IPFS.RawIPFSHash
                     = case x of wild {
                         DEFAULT
                         -> let {
                              msg20 :: GHC.Base.String
                              = GHC.CString.unpackAppendCString#
                                  Data.Aeson.Types.FromJSON.typeMismatch4
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b1
                                        (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                        (n :: b1)[OneShot] ->
                                      GHC.Base.foldr
                                        @ GHC.Types.Char
                                        @ b1
                                        c
                                        n
                                        Merkle.Types.IPFS.$fFromJSONRawIPFSHash2)
                                     (GHC.CString.unpackAppendCString#
                                        Data.Aeson.Types.FromJSON.typeMismatch3
                                        (case wild of wild1 {
                                           Data.Aeson.Types.Internal.Object ds
                                           -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                           Data.Aeson.Types.Internal.Array ds
                                           -> Data.Aeson.Types.FromJSON.typeMismatch1
                                           Data.Aeson.Types.Internal.Number ds
                                           -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                           Data.Aeson.Types.Internal.Bool ds
                                           -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                           Data.Aeson.Types.Internal.Null
                                           -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                            } in
                            (\ @ f4 :: Type -> Type
                               @ r
                               (path :: Data.Aeson.Types.Internal.JSONPath)
                               (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                               (_ks :: Data.Aeson.Types.Internal.Success
                                         Merkle.Types.IPFS.RawIPFSHash f4 r) ->
                             kf
                               (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                               msg20)
                              `cast`
                            (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                      <Merkle.Types.IPFS.RawIPFSHash>_R))
                         Data.Aeson.Types.Internal.String txt
                         -> (\ @ f4 :: Type -> Type
                               @ r
                               (_path :: Data.Aeson.Types.Internal.JSONPath)
                               (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                               (ks :: Data.Aeson.Types.Internal.Success
                                        Merkle.Types.IPFS.RawIPFSHash f4 r) ->
                             ks txt `cast` (Sym (Merkle.Types.IPFS.N:RawIPFSHash[0])))
                              `cast`
                            (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                      <Merkle.Types.IPFS.RawIPFSHash>_R)) }
                   } in
                   (\ @ f5 :: Type -> Type
                      @ r
                      (path :: Data.Aeson.Types.Internal.JSONPath)
                      (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                      (ks :: Data.Aeson.Types.Internal.Success
                               (Data.Functor.Const.Const Merkle.Types.IPFS.RawIPFSHash b) f5 r) ->
                    m `cast`
                    (Data.Aeson.Types.Internal.N:Parser[0]
                         <Merkle.Types.IPFS.RawIPFSHash>_R)
                      @ f5
                      @ r
                      path
                      kf
                      (\ (a1 :: Merkle.Types.IPFS.RawIPFSHash) ->
                       ks
                         a1
                           `cast`
                         (Sym (Data.Functor.Const.N:Const[0]
                                   <k>_N <Merkle.Types.IPFS.RawIPFSHash>_R <b>_P))))
                     `cast`
                   (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                             <Data.Functor.Const.Const Merkle.Types.IPFS.RawIPFSHash b>_R)))
                  (Data.Aeson.Types.FromJSON.$fFromJSONConst_$cparseJSONList
                     @ k
                     @ Merkle.Types.IPFS.RawIPFSHash
                     @ b
                     Merkle.Types.IPFS.$fFromJSONRawIPFSHash) -}
002ff78dbb19ccd01638c714859cd387
  $fFromJSONRepoState_$s$fFromJSONKey[] ::
    Data.Aeson.Types.FromJSON.FromJSONKey [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  Data.Aeson.Types.FromJSON.$fFromJSONKeyChar_$cfromJSONKeyList
                  (Data.Aeson.Types.FromJSON.FromJSONKeyValue
                     @ [[GHC.Types.Char]]
                     (Data.Aeson.Types.FromJSON.$fFromJSONKey[]_$cparseJSONList
                        @ GHC.Types.Char
                        Data.Aeson.Types.FromJSON.$fFromJSONChar)) -}
e4fabc2d4bbc4468e5a77ca05ee0906c
  $fFromJSONRepoState_$s$fFromJSONMap ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Data.Map.Internal.Map
         [GHC.Types.Char]
         (Data.Functor.Const.Const
            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       [GHC.Types.Char]
                       (Data.Functor.Const.Const
                          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit))
                  (let {
                     p4 :: Data.Aeson.Types.Internal.Value
                           -> Data.Aeson.Types.Internal.Parser
                                (Data.Functor.Const.Const
                                   Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                       {- Arity: 1 -}
                     = \ (x :: Data.Aeson.Types.Internal.Value) ->
                       let {
                         m :: Data.Aeson.Types.Internal.Parser Merkle.Types.IPFS.RawIPFSHash
                         = case x of wild {
                             DEFAULT
                             -> let {
                                  msg20 :: GHC.Base.String
                                  = GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch4
                                      (GHC.Base.augment
                                         @ GHC.Types.Char
                                         (\ @ b
                                            (c :: GHC.Types.Char -> b -> b)[OneShot]
                                            (n :: b)[OneShot] ->
                                          GHC.Base.foldr
                                            @ GHC.Types.Char
                                            @ b
                                            c
                                            n
                                            Merkle.Types.IPFS.$fFromJSONRawIPFSHash2)
                                         (GHC.CString.unpackAppendCString#
                                            Data.Aeson.Types.FromJSON.typeMismatch3
                                            (case wild of wild1 {
                                               Data.Aeson.Types.Internal.Object ds
                                               -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                               Data.Aeson.Types.Internal.Array ds
                                               -> Data.Aeson.Types.FromJSON.typeMismatch1
                                               Data.Aeson.Types.Internal.Number ds
                                               -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                               Data.Aeson.Types.Internal.Bool ds
                                               -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                               Data.Aeson.Types.Internal.Null
                                               -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                                } in
                                (\ @ f4 :: Type -> Type
                                   @ r
                                   (path :: Data.Aeson.Types.Internal.JSONPath)
                                   (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                                   (_ks :: Data.Aeson.Types.Internal.Success
                                             Merkle.Types.IPFS.RawIPFSHash f4 r) ->
                                 kf
                                   (GHC.List.reverse
                                      @ Data.Aeson.Types.Internal.JSONPathElement
                                      path)
                                   msg20)
                                  `cast`
                                (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                          <Merkle.Types.IPFS.RawIPFSHash>_R))
                             Data.Aeson.Types.Internal.String txt
                             -> (\ @ f4 :: Type -> Type
                                   @ r
                                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                                   (ks :: Data.Aeson.Types.Internal.Success
                                            Merkle.Types.IPFS.RawIPFSHash f4 r) ->
                                 ks txt `cast` (Sym (Merkle.Types.IPFS.N:RawIPFSHash[0])))
                                  `cast`
                                (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                          <Merkle.Types.IPFS.RawIPFSHash>_R)) }
                       } in
                       (\ @ f5 :: Type -> Type
                          @ r
                          (path :: Data.Aeson.Types.Internal.JSONPath)
                          (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                          (ks :: Data.Aeson.Types.Internal.Success
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash
                                      (HGit.Core.Types.Commit
                                         (HGit.Core.Types.Hash HGit.Core.Types.HashableDir)))
                                   f5
                                   r) ->
                        m `cast`
                        (Data.Aeson.Types.Internal.N:Parser[0]
                             <Merkle.Types.IPFS.RawIPFSHash>_R)
                          @ f5
                          @ r
                          path
                          kf
                          (\ (a1 :: Merkle.Types.IPFS.RawIPFSHash) ->
                           ks
                             a1
                               `cast`
                             (Sym (Data.Functor.Const.N:Const[0]
                                       <Type -> Type>_N
                                       <Merkle.Types.IPFS.RawIPFSHash>_R
                                       <HGit.Core.Types.Commit
                                          (HGit.Core.Types.Hash HGit.Core.Types.HashableDir)>_P))))
                         `cast`
                       (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                 <Data.Functor.Const.Const
                                    Merkle.Types.IPFS.RawIPFSHash
                                    (HGit.Core.Types.Commit
                                       (HGit.Core.Types.Hash HGit.Core.Types.HashableDir))>_R))
                   } in
                   Data.Aeson.Types.FromJSON.withObject
                     @ (Data.Map.Internal.Map
                          [GHC.Types.Char]
                          (Data.Functor.Const.Const
                             Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit))
                     (GHC.Base.build
                        @ GHC.Types.Char
                        (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Map k v"#))
                     (letrec {
                        go24 :: Data.Map.Internal.Map
                                  [GHC.Types.Char]
                                  (Data.Functor.Const.Const
                                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                                -> Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit)
                                -> Data.Map.Internal.Map
                                     [GHC.Types.Char]
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit)
                          {- Arity: 2 -}
                        = \ (z2 :: Data.Map.Internal.Map
                                     [GHC.Types.Char]
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit))
                            (ds :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit)) ->
                          case ds of wild1 {
                            Data.HashMap.Base.Empty -> z2
                            Data.HashMap.Base.BitmapIndexed dt dt1
                            -> letrec {
                                 go25 :: Data.HashMap.Array.Array
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                         -> GHC.Types.Int
                                         -> GHC.Types.Int
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                   {- Arity: 4 -}
                                 = \ (ary :: Data.HashMap.Array.Array
                                               (Data.HashMap.Base.HashMap
                                                  Data.Text.Internal.Text
                                                  (Data.Functor.Const.Const
                                                     Merkle.Types.IPFS.RawIPFSHash
                                                     HGit.Core.Types.HashableCommit)))
                                     (n :: GHC.Types.Int)
                                     (i :: GHC.Types.Int)
                                     (z33 :: Data.Map.Internal.Map
                                               [GHC.Types.Char]
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)) ->
                                   case GHC.Classes.geInt i n of wild2 {
                                     GHC.Types.False
                                     -> go24
                                          (go25
                                             ary
                                             n
                                             (case i of wild3 { GHC.Types.I# x ->
                                              GHC.Types.I# (GHC.Prim.+# x 1#) })
                                             z33)
                                          (Data.HashMap.Array.index
                                             @ (Data.HashMap.Base.HashMap
                                                  Data.Text.Internal.Text
                                                  (Data.Functor.Const.Const
                                                     Merkle.Types.IPFS.RawIPFSHash
                                                     HGit.Core.Types.HashableCommit))
                                             ary
                                             i)
                                     GHC.Types.True -> z33 }
                               } in
                               go25
                                 (Data.HashMap.Array.Array
                                    @ (Data.HashMap.Base.HashMap
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit))
                                    dt1)
                                 (GHC.Types.I#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit))
                                       dt1))
                                 (GHC.Types.I# 0#)
                                 z2
                            Data.HashMap.Base.Leaf dt dt1 dt2
                            -> let {
                                 kx0 :: [GHC.Types.Char] = Data.Text.Show.unpack dt1
                               } in
                               Runtime.Types.$fFromJSONRepoState_$sgo13
                                 @ (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                                 kx0
                                 kx0
                                 dt2
                                 z2
                            Data.HashMap.Base.Full dt
                            -> letrec {
                                 go25 :: Data.HashMap.Array.Array
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                         -> GHC.Types.Int
                                         -> GHC.Types.Int
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                   {- Arity: 4 -}
                                 = \ (ary :: Data.HashMap.Array.Array
                                               (Data.HashMap.Base.HashMap
                                                  Data.Text.Internal.Text
                                                  (Data.Functor.Const.Const
                                                     Merkle.Types.IPFS.RawIPFSHash
                                                     HGit.Core.Types.HashableCommit)))
                                     (n :: GHC.Types.Int)
                                     (i :: GHC.Types.Int)
                                     (z33 :: Data.Map.Internal.Map
                                               [GHC.Types.Char]
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)) ->
                                   case GHC.Classes.geInt i n of wild2 {
                                     GHC.Types.False
                                     -> go24
                                          (go25
                                             ary
                                             n
                                             (case i of wild3 { GHC.Types.I# x ->
                                              GHC.Types.I# (GHC.Prim.+# x 1#) })
                                             z33)
                                          (Data.HashMap.Array.index
                                             @ (Data.HashMap.Base.HashMap
                                                  Data.Text.Internal.Text
                                                  (Data.Functor.Const.Const
                                                     Merkle.Types.IPFS.RawIPFSHash
                                                     HGit.Core.Types.HashableCommit))
                                             ary
                                             i)
                                     GHC.Types.True -> z33 }
                               } in
                               go25
                                 (Data.HashMap.Array.Array
                                    @ (Data.HashMap.Base.HashMap
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit))
                                    dt)
                                 (GHC.Types.I#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit))
                                       dt))
                                 (GHC.Types.I# 0#)
                                 z2
                            Data.HashMap.Base.Collision dt dt1
                            -> letrec {
                                 go25 :: Data.HashMap.Array.Array
                                           (Data.HashMap.Base.Leaf
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                         -> GHC.Types.Int
                                         -> GHC.Types.Int
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                         -> Data.Map.Internal.Map
                                              [GHC.Types.Char]
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit)
                                   {- Arity: 4 -}
                                 = \ (ary :: Data.HashMap.Array.Array
                                               (Data.HashMap.Base.Leaf
                                                  Data.Text.Internal.Text
                                                  (Data.Functor.Const.Const
                                                     Merkle.Types.IPFS.RawIPFSHash
                                                     HGit.Core.Types.HashableCommit)))
                                     (n :: GHC.Types.Int)
                                     (i :: GHC.Types.Int)
                                     (z33 :: Data.Map.Internal.Map
                                               [GHC.Types.Char]
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)) ->
                                   case GHC.Classes.geInt i n of wild2 {
                                     GHC.Types.False
                                     -> case i of wild3 { GHC.Types.I# i# ->
                                        case ary of wild4 { Data.HashMap.Array.Array ds1 ->
                                        case GHC.Prim.indexSmallArray#
                                               @ (Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit))
                                               ds1
                                               i# of ds2 { Unit# ipv ->
                                        case ipv of wild5 { Data.HashMap.Base.L k1 v1 ->
                                        let {
                                          kx0 :: [GHC.Types.Char] = Data.Text.Show.unpack k1
                                        } in
                                        Runtime.Types.$fFromJSONRepoState_$sgo13
                                          @ (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)
                                          kx0
                                          kx0
                                          v1
                                          (go25
                                             wild4
                                             n
                                             (GHC.Types.I# (GHC.Prim.+# i# 1#))
                                             z33) } } } }
                                     GHC.Types.True -> z33 }
                               } in
                               go25
                                 (Data.HashMap.Array.Array
                                    @ (Data.HashMap.Base.Leaf
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit))
                                    dt1)
                                 (GHC.Types.I#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit))
                                       dt1))
                                 (GHC.Types.I# 0#)
                                 z2 }
                      } in
                      letrec {
                        go25 :: Data.HashMap.Base.HashMap
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
                                -> Data.Aeson.Types.Internal.Parser
                                     (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text
                                        (Data.Functor.Const.Const
                                           Merkle.Types.IPFS.RawIPFSHash
                                           HGit.Core.Types.HashableCommit))
                          {- Arity: 1 -}
                        = \ (ds :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text Data.Aeson.Types.Internal.Value) ->
                          case ds of wild1 {
                            Data.HashMap.Base.Empty
                            -> (\ @ f4 :: Type -> Type
                                  @ r
                                  (_path :: Data.Aeson.Types.Internal.JSONPath)
                                  (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                           f4
                                           r) ->
                                ks
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableCommit)))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)>_R))
                            Data.HashMap.Base.BitmapIndexed dt dt1
                            -> let {
                                 f4 :: GHC.Types.Word = GHC.Types.W# dt
                               } in
                               let {
                                 f2 :: GHC.Prim.Int#
                                 = GHC.Prim.sizeofSmallArray#
                                     @ (Data.HashMap.Base.HashMap
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     dt1
                               } in
                               let {
                                 f3 :: GHC.Types.Int = GHC.Types.I# f2
                               } in
                               let {
                                 m :: Data.Aeson.Types.Internal.Parser
                                        [Data.HashMap.Base.HashMap
                                           Data.Text.Internal.Text
                                           (Data.Functor.Const.Const
                                              Merkle.Types.IPFS.RawIPFSHash
                                              HGit.Core.Types.HashableCommit)]
                                 = GHC.Base.foldr
                                     @ (Data.HashMap.Base.HashMap
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     @ (Data.Aeson.Types.Internal.Parser
                                          [Data.HashMap.Base.HashMap
                                             Data.Text.Internal.Text
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableCommit)])
                                     (\ (x :: Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                        (ys :: Data.Aeson.Types.Internal.Parser
                                                 [Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)])[OneShot] ->
                                      let {
                                        x10 :: Data.Aeson.Types.Internal.Parser
                                                 (Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit))
                                        = go25 x
                                      } in
                                      (\ @ f5 :: Type -> Type
                                         @ r
                                         (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                         (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                         (eta3 :: Data.Aeson.Types.Internal.Success
                                                    [Data.HashMap.Base.HashMap
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit)]
                                                    f5
                                                    r) ->
                                       x10
                                         `cast`
                                       (Data.Aeson.Types.Internal.N:Parser[0]
                                            <Data.HashMap.Base.HashMap
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)>_R)
                                         @ f5
                                         @ r
                                         eta1
                                         eta2
                                         (\ (a1 :: Data.HashMap.Base.HashMap
                                                     Data.Text.Internal.Text
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableCommit)) ->
                                          ys
                                            `cast`
                                          (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R)
                                            @ f5
                                            @ r
                                            eta1
                                            eta2
                                            (\ (a3 :: [Data.HashMap.Base.HashMap
                                                         Data.Text.Internal.Text
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableCommit)]) ->
                                             eta3
                                               (GHC.Types.:
                                                  @ (Data.HashMap.Base.HashMap
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit))
                                                  a1
                                                  a3))))
                                        `cast`
                                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                <[Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]>_R)))
                                     (\ @ f5 :: Type -> Type
                                        @ r
                                        (_path :: Data.Aeson.Types.Internal.JSONPath)
                                        (_kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                        (ks :: Data.Aeson.Types.Internal.Success
                                                 [Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]
                                                 f5
                                                 r) ->
                                      ks
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))))
                                       `cast`
                                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R))
                                     (Data.HashMap.Array.toList_go
                                        @ (Data.HashMap.Base.HashMap
                                             Data.Text.Internal.Text
                                             Data.Aeson.Types.Internal.Value)
                                        (Data.HashMap.Array.Array
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                           dt1)
                                        (GHC.Types.I#
                                           (GHC.Prim.sizeofSmallArray#
                                              @ (Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   Data.Aeson.Types.Internal.Value)
                                              dt1))
                                        (GHC.Types.I# 0#)
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)))
                               } in
                               (\ @ f5 :: Type -> Type
                                  @ r
                                  (path :: Data.Aeson.Types.Internal.JSONPath)
                                  (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                           f5
                                           r) ->
                                m `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <[Data.HashMap.Base.HashMap
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit)]>_R)
                                  @ f5
                                  @ r
                                  path
                                  kf
                                  (\ (a1 :: [Data.HashMap.Base.HashMap
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)]) ->
                                   ks
                                     (Data.HashMap.Base.$WBitmapIndexed
                                        @ Data.Text.Internal.Text
                                        @ (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableCommit)
                                        f4
                                        (Data.HashMap.Array.fromList
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))
                                           f3
                                           a1))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)>_R))
                            Data.HashMap.Base.Leaf dt dt1 dt2
                            -> let {
                                 p5 :: Data.Aeson.Types.Internal.Parser
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit)
                                 = p4 dt2
                               } in
                               let {
                                 pathElem16 :: Data.Aeson.Types.Internal.JSONPathElement
                                 = Data.Aeson.Types.Internal.Key dt1
                               } in
                               (\ @ f5 :: Type -> Type
                                  @ r
                                  (path :: Data.Aeson.Types.Internal.JSONPath)
                                  (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                           f5
                                           r) ->
                                p5
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit>_R)
                                  @ f5
                                  @ r
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.JSONPathElement
                                     pathElem16
                                     path)
                                  kf
                                  (\ (a1 :: Data.Functor.Const.Const
                                              Merkle.Types.IPFS.RawIPFSHash
                                              HGit.Core.Types.HashableCommit) ->
                                   ks
                                     (Data.HashMap.Base.$WLeaf
                                        @ Data.Text.Internal.Text
                                        @ (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableCommit)
                                        (GHC.Types.W# dt)
                                        (Data.HashMap.Base.$WL
                                           @ Data.Text.Internal.Text
                                           @ (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableCommit)
                                           dt1
                                           a1))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)>_R))
                            Data.HashMap.Base.Full dt
                            -> let {
                                 f4 :: GHC.Prim.Int#
                                 = GHC.Prim.sizeofSmallArray#
                                     @ (Data.HashMap.Base.HashMap
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     dt
                               } in
                               let {
                                 f2 :: GHC.Types.Int = GHC.Types.I# f4
                               } in
                               let {
                                 m :: Data.Aeson.Types.Internal.Parser
                                        [Data.HashMap.Base.HashMap
                                           Data.Text.Internal.Text
                                           (Data.Functor.Const.Const
                                              Merkle.Types.IPFS.RawIPFSHash
                                              HGit.Core.Types.HashableCommit)]
                                 = GHC.Base.foldr
                                     @ (Data.HashMap.Base.HashMap
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     @ (Data.Aeson.Types.Internal.Parser
                                          [Data.HashMap.Base.HashMap
                                             Data.Text.Internal.Text
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableCommit)])
                                     (\ (x :: Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                        (ys :: Data.Aeson.Types.Internal.Parser
                                                 [Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)])[OneShot] ->
                                      let {
                                        x10 :: Data.Aeson.Types.Internal.Parser
                                                 (Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit))
                                        = go25 x
                                      } in
                                      (\ @ f5 :: Type -> Type
                                         @ r
                                         (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                         (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                         (eta3 :: Data.Aeson.Types.Internal.Success
                                                    [Data.HashMap.Base.HashMap
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit)]
                                                    f5
                                                    r) ->
                                       x10
                                         `cast`
                                       (Data.Aeson.Types.Internal.N:Parser[0]
                                            <Data.HashMap.Base.HashMap
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)>_R)
                                         @ f5
                                         @ r
                                         eta1
                                         eta2
                                         (\ (a1 :: Data.HashMap.Base.HashMap
                                                     Data.Text.Internal.Text
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableCommit)) ->
                                          ys
                                            `cast`
                                          (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R)
                                            @ f5
                                            @ r
                                            eta1
                                            eta2
                                            (\ (a3 :: [Data.HashMap.Base.HashMap
                                                         Data.Text.Internal.Text
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableCommit)]) ->
                                             eta3
                                               (GHC.Types.:
                                                  @ (Data.HashMap.Base.HashMap
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit))
                                                  a1
                                                  a3))))
                                        `cast`
                                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                <[Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]>_R)))
                                     (\ @ f3 :: Type -> Type
                                        @ r
                                        (_path :: Data.Aeson.Types.Internal.JSONPath)
                                        (_kf :: Data.Aeson.Types.Internal.Failure f3 r)
                                        (ks :: Data.Aeson.Types.Internal.Success
                                                 [Data.HashMap.Base.HashMap
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]
                                                 f3
                                                 r) ->
                                      ks
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))))
                                       `cast`
                                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R))
                                     (Data.HashMap.Array.toList_go
                                        @ (Data.HashMap.Base.HashMap
                                             Data.Text.Internal.Text
                                             Data.Aeson.Types.Internal.Value)
                                        (Data.HashMap.Array.Array
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                           dt)
                                        (GHC.Types.I#
                                           (GHC.Prim.sizeofSmallArray#
                                              @ (Data.HashMap.Base.HashMap
                                                   Data.Text.Internal.Text
                                                   Data.Aeson.Types.Internal.Value)
                                              dt))
                                        (GHC.Types.I# 0#)
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)))
                               } in
                               (\ @ f5 :: Type -> Type
                                  @ r
                                  (path :: Data.Aeson.Types.Internal.JSONPath)
                                  (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                           f5
                                           r) ->
                                m `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <[Data.HashMap.Base.HashMap
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit)]>_R)
                                  @ f5
                                  @ r
                                  path
                                  kf
                                  (\ (a1 :: [Data.HashMap.Base.HashMap
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)]) ->
                                   ks
                                     (Data.HashMap.Base.$WFull
                                        @ Data.Text.Internal.Text
                                        @ (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableCommit)
                                        (Data.HashMap.Array.fromList
                                           @ (Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))
                                           f2
                                           a1))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)>_R))
                            Data.HashMap.Base.Collision dt dt1
                            -> let {
                                 f4 :: GHC.Types.Word = GHC.Types.W# dt
                               } in
                               let {
                                 f2 :: GHC.Prim.Int#
                                 = GHC.Prim.sizeofSmallArray#
                                     @ (Data.HashMap.Base.Leaf
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     dt1
                               } in
                               let {
                                 f3 :: GHC.Types.Int = GHC.Types.I# f2
                               } in
                               let {
                                 m :: Data.Aeson.Types.Internal.Parser
                                        [Data.HashMap.Base.Leaf
                                           Data.Text.Internal.Text
                                           (Data.Functor.Const.Const
                                              Merkle.Types.IPFS.RawIPFSHash
                                              HGit.Core.Types.HashableCommit)]
                                 = GHC.Base.foldr
                                     @ (Data.HashMap.Base.Leaf
                                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                     @ (Data.Aeson.Types.Internal.Parser
                                          [Data.HashMap.Base.Leaf
                                             Data.Text.Internal.Text
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableCommit)])
                                     (\ (x :: Data.HashMap.Base.Leaf
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                        (ys :: Data.Aeson.Types.Internal.Parser
                                                 [Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)])[OneShot] ->
                                      let {
                                        x10 :: Data.Aeson.Types.Internal.Parser
                                                 (Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit))
                                        = case x of wild2 { Data.HashMap.Base.L k1 v1 ->
                                          let {
                                            p5 :: Data.Aeson.Types.Internal.Parser
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)
                                            = p4 v1
                                          } in
                                          let {
                                            pathElem16 :: Data.Aeson.Types.Internal.JSONPathElement
                                            = Data.Aeson.Types.Internal.Key k1
                                          } in
                                          (\ @ f5 :: Type -> Type
                                             @ r
                                             (path :: Data.Aeson.Types.Internal.JSONPath)
                                             (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                             (ks :: Data.Aeson.Types.Internal.Success
                                                      (Data.HashMap.Base.Leaf
                                                         Data.Text.Internal.Text
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableCommit))
                                                      f5
                                                      r) ->
                                           p5
                                             `cast`
                                           (Data.Aeson.Types.Internal.N:Parser[0]
                                                <Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit>_R)
                                             @ f5
                                             @ r
                                             (GHC.Types.:
                                                @ Data.Aeson.Types.Internal.JSONPathElement
                                                pathElem16
                                                path)
                                             kf
                                             (\ (a1 :: Data.Functor.Const.Const
                                                         Merkle.Types.IPFS.RawIPFSHash
                                                         HGit.Core.Types.HashableCommit) ->
                                              ks
                                                (Data.HashMap.Base.$WL
                                                   @ Data.Text.Internal.Text
                                                   @ (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableCommit)
                                                   k1
                                                   a1)))
                                            `cast`
                                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                    <Data.HashMap.Base.Leaf
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit)>_R)) }
                                      } in
                                      (\ @ f5 :: Type -> Type
                                         @ r
                                         (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                         (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                         (eta3 :: Data.Aeson.Types.Internal.Success
                                                    [Data.HashMap.Base.Leaf
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit)]
                                                    f5
                                                    r) ->
                                       x10
                                         `cast`
                                       (Data.Aeson.Types.Internal.N:Parser[0]
                                            <Data.HashMap.Base.Leaf
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)>_R)
                                         @ f5
                                         @ r
                                         eta1
                                         eta2
                                         (\ (a1 :: Data.HashMap.Base.Leaf
                                                     Data.Text.Internal.Text
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableCommit)) ->
                                          ys
                                            `cast`
                                          (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.Leaf
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R)
                                            @ f5
                                            @ r
                                            eta1
                                            eta2
                                            (\ (a3 :: [Data.HashMap.Base.Leaf
                                                         Data.Text.Internal.Text
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableCommit)]) ->
                                             eta3
                                               (GHC.Types.:
                                                  @ (Data.HashMap.Base.Leaf
                                                       Data.Text.Internal.Text
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableCommit))
                                                  a1
                                                  a3))))
                                        `cast`
                                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                <[Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]>_R)))
                                     (\ @ f5 :: Type -> Type
                                        @ r
                                        (_path :: Data.Aeson.Types.Internal.JSONPath)
                                        (_kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                        (ks :: Data.Aeson.Types.Internal.Success
                                                 [Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text
                                                    (Data.Functor.Const.Const
                                                       Merkle.Types.IPFS.RawIPFSHash
                                                       HGit.Core.Types.HashableCommit)]
                                                 f5
                                                 r) ->
                                      ks
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.Leaf
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))))
                                       `cast`
                                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                               <[Data.HashMap.Base.Leaf
                                                   Data.Text.Internal.Text
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableCommit)]>_R))
                                     (Data.HashMap.Array.toList_go
                                        @ (Data.HashMap.Base.Leaf
                                             Data.Text.Internal.Text
                                             Data.Aeson.Types.Internal.Value)
                                        (Data.HashMap.Array.Array
                                           @ (Data.HashMap.Base.Leaf
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)
                                           dt1)
                                        (GHC.Types.I#
                                           (GHC.Prim.sizeofSmallArray#
                                              @ (Data.HashMap.Base.Leaf
                                                   Data.Text.Internal.Text
                                                   Data.Aeson.Types.Internal.Value)
                                              dt1))
                                        (GHC.Types.I# 0#)
                                        (GHC.Types.[]
                                           @ (Data.HashMap.Base.Leaf
                                                Data.Text.Internal.Text
                                                Data.Aeson.Types.Internal.Value)))
                               } in
                               (\ @ f5 :: Type -> Type
                                  @ r
                                  (path :: Data.Aeson.Types.Internal.JSONPath)
                                  (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (Data.HashMap.Base.HashMap
                                              Data.Text.Internal.Text
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash
                                                 HGit.Core.Types.HashableCommit))
                                           f5
                                           r) ->
                                m `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <[Data.HashMap.Base.Leaf
                                         Data.Text.Internal.Text
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableCommit)]>_R)
                                  @ f5
                                  @ r
                                  path
                                  kf
                                  (\ (a1 :: [Data.HashMap.Base.Leaf
                                               Data.Text.Internal.Text
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableCommit)]) ->
                                   ks
                                     (Data.HashMap.Base.$WCollision
                                        @ Data.Text.Internal.Text
                                        @ (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableCommit)
                                        f4
                                        (Data.HashMap.Array.fromList
                                           @ (Data.HashMap.Base.Leaf
                                                Data.Text.Internal.Text
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableCommit))
                                           f3
                                           a1))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)>_R)) }
                      } in
                      \ (x :: Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value) ->
                      let {
                        m :: Data.Aeson.Types.Internal.Parser
                               (Data.HashMap.Base.HashMap
                                  Data.Text.Internal.Text
                                  (Data.Functor.Const.Const
                                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit))
                        = go25 x
                      } in
                      (\ @ f5 :: Type -> Type
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  (Data.Map.Internal.Map
                                     [GHC.Types.Char]
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit))
                                  f5
                                  r) ->
                       m `cast`
                       (Data.Aeson.Types.Internal.N:Parser[0]
                            <Data.HashMap.Base.HashMap
                               Data.Text.Internal.Text
                               (Data.Functor.Const.Const
                                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)>_R)
                         @ f5
                         @ r
                         path
                         kf
                         (\ (a1 :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash
                                        HGit.Core.Types.HashableCommit)) ->
                          ks
                            (go24
                               (Data.Map.Internal.Tip
                                  @ [GHC.Types.Char]
                                  @ (Data.Functor.Const.Const
                                       Merkle.Types.IPFS.RawIPFSHash
                                       HGit.Core.Types.HashableCommit))
                               a1)))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Data.Map.Internal.Map
                                   [GHC.Types.Char]
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash
                                      HGit.Core.Types.HashableCommit)>_R))))
                  (Data.Aeson.Types.FromJSON.$fFromJSONMap_$cparseJSONList
                     @ [GHC.Types.Char]
                     @ (Data.Functor.Const.Const
                          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                     Runtime.Types.$fFromJSONRepoState_$s$fFromJSONKey[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     (Runtime.Types.$fFromJSONRepoState_$s$fFromJSONConst
                        @ (Type -> Type)
                        @ (HGit.Core.Types.Commit
                             (HGit.Core.Types.Hash HGit.Core.Types.HashableDir)))) -}
80760d18077dce47a61996647e85756f
  $fFromJSONRepoState_$s$fFromJSON[] ::
    Data.Aeson.Types.FromJSON.FromJSON [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  Data.Aeson.Types.FromJSON.$fFromJSONChar_$cparseJSONList
                  (Data.Aeson.Types.FromJSON.$fFromJSONKey[]_$cparseJSONList
                     @ GHC.Types.Char
                     Data.Aeson.Types.FromJSON.$fFromJSONChar) -}
45c9762adbfb50c393487095eb2b1634
  $fFromJSONRepoState_$s$fSelectorMetaMetaSel ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Maybe.Just "currentBranch")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Maybe.Just "currentBranch")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "currentBranch")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Runtime.Types.$fFromJSONRepoState6)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "currentBranch")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceUnpackedness
                          `cast`
                        (GHC.Generics.D:R:SingSourceUnpackednessa0[0] <'GHC.Generics.NoSourceUnpackedness>_N) of wild { GHC.Generics.SNoSourceUnpackedness co ->
                   GHC.Generics.NoSourceUnpackedness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "currentBranch")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "currentBranch")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceStrictness
                          `cast`
                        (GHC.Generics.D:R:SingSourceStrictnessa0[0] <'GHC.Generics.NoSourceStrictness>_N) of wild { GHC.Generics.SNoSourceStrictness co ->
                   GHC.Generics.NoSourceStrictness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "currentBranch")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "currentBranch")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSDecidedLazy
                          `cast`
                        (GHC.Generics.D:R:SingDecidedStrictnessa0[0] <'GHC.Generics.DecidedLazy>_N) of wild { GHC.Generics.SDecidedLazy co ->
                   GHC.Generics.DecidedLazy
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepDecidedStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "currentBranch")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepDecidedStrictness[0])) -}
72a832e486d9622f470cf15500237ad0
  $fFromJSONRepoState_$s$fSelectorMetaMetaSel1 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Maybe.Just "branches")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Maybe.Just "branches")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "branches")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Runtime.Types.$fFromJSONRepoState9)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "branches")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceUnpackedness
                          `cast`
                        (GHC.Generics.D:R:SingSourceUnpackednessa0[0] <'GHC.Generics.NoSourceUnpackedness>_N) of wild { GHC.Generics.SNoSourceUnpackedness co ->
                   GHC.Generics.NoSourceUnpackedness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "branches")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "branches")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceStrictness
                          `cast`
                        (GHC.Generics.D:R:SingSourceStrictnessa0[0] <'GHC.Generics.NoSourceStrictness>_N) of wild { GHC.Generics.SNoSourceStrictness co ->
                   GHC.Generics.NoSourceStrictness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "branches")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "branches")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSDecidedLazy
                          `cast`
                        (GHC.Generics.D:R:SingDecidedStrictnessa0[0] <'GHC.Generics.DecidedLazy>_N) of wild { GHC.Generics.SDecidedLazy co ->
                   GHC.Generics.DecidedLazy
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepDecidedStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "branches")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepDecidedStrictness[0])) -}
e8dc57003b751df1a7accbcfe18f62da
  $fFromJSONRepoState_$sgo13 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
dd587e5b3aa12f6942a059e6733288f6
  $fFromJSONRepoState_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser [Runtime.Types.RepoState]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
9432f6357709bc09ba32a4b3c9f894a9
  $fFromJSONRepoState_opts :: Data.Aeson.Types.Internal.Options
  {- Strictness: m,
     Unfolding: (Data.Aeson.Types.Internal.Options
                   (GHC.Base.id @ GHC.Base.String)
                   (GHC.Base.id @ GHC.Base.String)
                   GHC.Types.True
                   GHC.Types.False
                   Data.Aeson.Types.Internal.defaultTaggedObject
                   GHC.Types.False
                   GHC.Types.False) -}
dd587e5b3aa12f6942a059e6733288f6
  $fGenericRepoState :: GHC.Generics.Generic Runtime.Types.RepoState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Runtime.Types.RepoState
                  Runtime.Types.$fGenericRepoState1
                    `cast`
                  (forall (x :: <Type>_N).
                   <Runtime.Types.RepoState>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "RepoState" "Runtime.Types" "main" 'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Maybe.Just "branches")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Data.Map.Internal.Map
                                              HGit.Core.Types.BranchName
                                              (HGit.Core.Types.Hash
                                                 HGit.Core.Types.HashableCommit)))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Maybe.Just "currentBranch")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            HGit.Core.Types.BranchName))>_R) ; Sub (Sym (Runtime.Types.Rep_RepoState[0]))) <x>_N)
                  Runtime.Types.$fGenericRepoState_$cto -}
dd587e5b3aa12f6942a059e6733288f6
  $fGenericRepoState1 ::
    Runtime.Types.RepoState
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Maybe.Just "branches")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Data.Map.Internal.Map
                  HGit.Core.Types.BranchName
                  (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "currentBranch")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R HGit.Core.Types.BranchName))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Runtime.Types.RepoState) ->
                 case x1 of wild { Runtime.Types.RepoState g1 g2 ->
                 (GHC.Generics.:*:
                    @ Type
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Maybe.Just "branches")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Data.Map.Internal.Map
                               HGit.Core.Types.BranchName
                               (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Maybe.Just "currentBranch")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R HGit.Core.Types.BranchName))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <Type>_N
                              <GHC.Generics.R>_P
                              <Data.Map.Internal.Map
                                 HGit.Core.Types.BranchName
                                 (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <Type>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Maybe.Just "branches")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Map.Internal.Map
                                                      HGit.Core.Types.BranchName
                                                      (HGit.Core.Types.Hash
                                                         HGit.Core.Types.HashableCommit))>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <Type>_N
                              <GHC.Generics.R>_P
                              <HGit.Core.Types.BranchName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <Type>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Maybe.Just "currentBranch")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   HGit.Core.Types.BranchName>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <Type>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Maybe.Just "branches")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Data.Map.Internal.Map
                                    HGit.Core.Types.BranchName
                                    (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Maybe.Just "currentBranch")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  HGit.Core.Types.BranchName)>_R) <x>_N) }) -}
dd587e5b3aa12f6942a059e6733288f6
  $fGenericRepoState_$cto ::
    GHC.Generics.Rep Runtime.Types.RepoState x
    -> Runtime.Types.RepoState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Runtime.Types.RepoState x) ->
                 case ds
                        `cast`
                      ((Sub (Runtime.Types.Rep_RepoState[0]) ; (GHC.Generics.N:M1[0]
                                                                    <Type>_N
                                                                    <GHC.Generics.D>_P
                                                                    <'GHC.Generics.MetaData
                                                                       "RepoState"
                                                                       "Runtime.Types"
                                                                       "main"
                                                                       'GHC.Types.False>_P
                                                                    <GHC.Generics.M1
                                                                       GHC.Generics.C
                                                                       ('GHC.Generics.MetaCons
                                                                          "RepoState"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.True)
                                                                       (GHC.Generics.M1
                                                                          GHC.Generics.S
                                                                          ('GHC.Generics.MetaSel
                                                                             ('GHC.Maybe.Just
                                                                                "branches")
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             (Data.Map.Internal.Map
                                                                                HGit.Core.Types.BranchName
                                                                                (HGit.Core.Types.Hash
                                                                                   HGit.Core.Types.HashableCommit)))
                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                           GHC.Generics.S
                                                                                           ('GHC.Generics.MetaSel
                                                                                              ('GHC.Maybe.Just
                                                                                                 "currentBranch")
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.K1
                                                                                              GHC.Generics.R
                                                                                              HGit.Core.Types.BranchName))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                    <Type>_N
                                                                                                                                    <GHC.Generics.C>_P
                                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                                       "RepoState"
                                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                                       'GHC.Types.True>_P
                                                                                                                                    <GHC.Generics.M1
                                                                                                                                       GHC.Generics.S
                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                          ('GHC.Maybe.Just
                                                                                                                                             "branches")
                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                       (GHC.Generics.K1
                                                                                                                                          GHC.Generics.R
                                                                                                                                          (Data.Map.Internal.Map
                                                                                                                                             HGit.Core.Types.BranchName
                                                                                                                                             (HGit.Core.Types.Hash
                                                                                                                                                HGit.Core.Types.HashableCommit)))
                                                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                        GHC.Generics.S
                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                           ('GHC.Maybe.Just
                                                                                                                                                              "currentBranch")
                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                        (GHC.Generics.K1
                                                                                                                                                           GHC.Generics.R
                                                                                                                                                           HGit.Core.Types.BranchName)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Runtime.Types.RepoState
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <Type>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Maybe.Just "branches")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              HGit.Core.Types.BranchName
                              (HGit.Core.Types.Hash
                                 HGit.Core.Types.HashableCommit))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                 <Type>_N
                                                                                 <GHC.Generics.R>_P
                                                                                 <Data.Map.Internal.Map
                                                                                    HGit.Core.Types.BranchName
                                                                                    (HGit.Core.Types.Hash
                                                                                       HGit.Core.Types.HashableCommit)>_R
                                                                                 <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <Type>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Maybe.Just "currentBranch")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           HGit.Core.Types.BranchName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                     <Type>_N
                                                                     <GHC.Generics.R>_P
                                                                     <HGit.Core.Types.BranchName>_R
                                                                     <x>_P) }) -}
dd587e5b3aa12f6942a059e6733288f6
  $fToJSONRepoState ::
    Data.Aeson.Types.ToJSON.ToJSON Runtime.Types.RepoState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Runtime.Types.RepoState
                  Runtime.Types.$fToJSONRepoState_$ctoJSON
                  Runtime.Types.$fToJSONRepoState1
                    `cast`
                  (<Runtime.Types.RepoState>_R
                   ->_R Nth:3
                            (((Sym (GHC.Generics.N:M1[0]
                                        <Type>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                        <GHC.Generics.S1
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Maybe.Just "branches")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.Rec0
                                              (Data.Map.Internal.Map
                                                 HGit.Core.Types.BranchName
                                                 (HGit.Core.Types.Hash
                                                    HGit.Core.Types.HashableCommit)))
                                         GHC.Generics.:*: GHC.Generics.S1
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Maybe.Just "currentBranch")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.Rec0
                                                               HGit.Core.Types.BranchName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                          <Type>_N
                                                                                                          <GHC.Generics.D>_P
                                                                                                          <'GHC.Generics.MetaData
                                                                                                             "RepoState"
                                                                                                             "Runtime.Types"
                                                                                                             "main"
                                                                                                             'GHC.Types.False>_P
                                                                                                          <GHC.Generics.M1
                                                                                                             GHC.Generics.C
                                                                                                             ('GHC.Generics.MetaCons
                                                                                                                "RepoState"
                                                                                                                'GHC.Generics.PrefixI
                                                                                                                'GHC.Types.True)
                                                                                                             (GHC.Generics.S1
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   ('GHC.Maybe.Just
                                                                                                                      "branches")
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (GHC.Generics.Rec0
                                                                                                                   (Data.Map.Internal.Map
                                                                                                                      HGit.Core.Types.BranchName
                                                                                                                      (HGit.Core.Types.Hash
                                                                                                                         HGit.Core.Types.HashableCommit)))
                                                                                                              GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                    ('GHC.Maybe.Just
                                                                                                                                       "currentBranch")
                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                 (GHC.Generics.Rec0
                                                                                                                                    HGit.Core.Types.BranchName))>_R)) <GHC.Types.Any>_N
                              ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                  <Data.Aeson.Types.Internal.Value>_P)) ; Nth:3
                                                                                                                                              (Nth:3
                                                                                                                                                   (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                    ->_R <Data.Aeson.Types.ToJSON.ToArgs
                                                                                                                                                            Data.Aeson.Encoding.Internal.Encoding
                                                                                                                                                            Data.Aeson.Types.Generic.Zero
                                                                                                                                                            GHC.Types.Any>_R
                                                                                                                                                    ->_R Sub (Sym (Runtime.Types.Rep_RepoState[0])) <GHC.Types.Any>_N
                                                                                                                                                    ->_R <Data.Aeson.Encoding.Internal.Encoding>_R))))
                  Runtime.Types.$fToJSONRepoState_$ctoJSONList
                  Runtime.Types.$fToJSONRepoState_$ctoEncodingList -}
dd587e5b3aa12f6942a059e6733288f6
  $fToJSONRepoState1 ::
    Runtime.Types.RepoState
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 1, Strictness: <L,1*U(1*U,U)> -}
390bcc381e3f859317a3b6d7ba102f98
  $fToJSONRepoState2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Runtime.Types.$fToJSONRepoState3 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
fd71fe843e0b7290d13e760d3ebd029a
  $fToJSONRepoState3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Runtime.Types.$fFromJSONRepoState6
                   0#
                   ipv1 }) -}
5736eb043f099d16170b45c2fb80c85f
  $fToJSONRepoState4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Runtime.Types.$fToJSONRepoState5 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
bc4f2d43a1a74dd61bff0f63488ff635
  $fToJSONRepoState5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Runtime.Types.$fFromJSONRepoState9
                   0#
                   ipv1 }) -}
dd587e5b3aa12f6942a059e6733288f6
  $fToJSONRepoState_$ctoEncodingList ::
    [Runtime.Types.RepoState] -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Runtime.Types.RepoState
                   Runtime.Types.$fToJSONRepoState1
                     `cast`
                   (<Runtime.Types.RepoState>_R
                    ->_R Nth:3
                             (((Sym (GHC.Generics.N:M1[0]
                                         <Type>_N
                                         <GHC.Generics.C>_P
                                         <'GHC.Generics.MetaCons
                                            "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                         <GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Maybe.Just "branches")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec0
                                               (Data.Map.Internal.Map
                                                  HGit.Core.Types.BranchName
                                                  (HGit.Core.Types.Hash
                                                     HGit.Core.Types.HashableCommit)))
                                          GHC.Generics.:*: GHC.Generics.S1
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Maybe.Just "currentBranch")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.Rec0
                                                                HGit.Core.Types.BranchName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                           <Type>_N
                                                                                                           <GHC.Generics.D>_P
                                                                                                           <'GHC.Generics.MetaData
                                                                                                              "RepoState"
                                                                                                              "Runtime.Types"
                                                                                                              "main"
                                                                                                              'GHC.Types.False>_P
                                                                                                           <GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "RepoState"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.True)
                                                                                                              (GHC.Generics.S1
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    ('GHC.Maybe.Just
                                                                                                                       "branches")
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.Rec0
                                                                                                                    (Data.Map.Internal.Map
                                                                                                                       HGit.Core.Types.BranchName
                                                                                                                       (HGit.Core.Types.Hash
                                                                                                                          HGit.Core.Types.HashableCommit)))
                                                                                                               GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Maybe.Just
                                                                                                                                        "currentBranch")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.Rec0
                                                                                                                                     HGit.Core.Types.BranchName))>_R)) <GHC.Types.Any>_N
                               ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                   <Data.Aeson.Types.Internal.Value>_P)) ; Nth:3
                                                                                                                                               (Nth:3
                                                                                                                                                    (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                     ->_R <Data.Aeson.Types.ToJSON.ToArgs
                                                                                                                                                             Data.Aeson.Encoding.Internal.Encoding
                                                                                                                                                             Data.Aeson.Types.Generic.Zero
                                                                                                                                                             GHC.Types.Any>_R
                                                                                                                                                     ->_R Sub (Sym (Runtime.Types.Rep_RepoState[0])) <GHC.Types.Any>_N
                                                                                                                                                     ->_R <Data.Aeson.Encoding.Internal.Encoding>_R))))) -}
dd587e5b3aa12f6942a059e6733288f6
  $fToJSONRepoState_$ctoJSON ::
    Runtime.Types.RepoState -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Runtime.Types.RepoState) ->
                 case w of ww { Runtime.Types.RepoState ww1 ww2 ->
                 case Runtime.Types.$w$ctoJSON ww1 ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
dd587e5b3aa12f6942a059e6733288f6
  $fToJSONRepoState_$ctoJSONList ::
    [Runtime.Types.RepoState] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Runtime.Types.RepoState]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Runtime.Types.RepoState
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Runtime.Types.RepoState
                                     c
                                     Runtime.Types.$fToJSONRepoState_$ctoJSON)
                                  n1
                                  x)))))) -}
ae1451388afe85971ae6f511d4305c5a
  $fToJSONRepoState_go13 ::
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Map.Internal.Map
         [GHC.Types.Char]
         (Data.Functor.Const.Const
            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
5320f39c6efa14f3db25fe22d7ed76b3
  $s$fConstructorMetaMetaCons2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RepoState"#) -}
f229a4b1c4a30ecff2ac59c0c4bef1ac
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Runtime.Types.$sfromList1
                                  @ a
                                  wild2
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)) }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Runtime.Types.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
810f0e607bcc587aa6eb209a40a5e92f
  $sfromList1 ::
    [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e8cccb9cfc45e86cb703e3d16a37a25e
  $tc'RepoState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8294639507838777285##
                   18239050719199585389##
                   Runtime.Types.$trModule
                   Runtime.Types.$tc'RepoState2
                   0#
                   Runtime.Types.$tc'RepoState1) -}
024f55289d0992df0bf3bae1f8d126cd
  $tc'RepoState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eb020cf2523431fc0e760215ecb99345
  $tc'RepoState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Runtime.Types.$tc'RepoState3) -}
46fc4d00583351176db5205257f7498a
  $tc'RepoState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RepoState"#) -}
f9241706733d43a56d8ed6bc1fde7b47
  $tcRepoState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4982355602112605376##
                   15965442818881025520##
                   Runtime.Types.$trModule
                   Runtime.Types.$tcRepoState1
                   0#
                   GHC.Types.krep$*) -}
daa9c654de1e3231f0d4ff2db5ea9a65
  $tcRepoState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Runtime.Types.$s$fConstructorMetaMetaCons2) -}
479663e0543a66434eb48e466a9b9ca6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Runtime.Types.$trModule3
                   Runtime.Types.$trModule1) -}
0991e3e4f8e86c8d7cecf54c5942bb1f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Runtime.Types.$trModule2) -}
4376f1514704bb4d585c404b0d84084a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Runtime.Types"#) -}
35c356f788d35e282efc3857ae700102
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Runtime.Types.$trModule4) -}
d5a3cb65bf2fffcc777488a497999121
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
39d1c8a27106b20a86dab6b686861552
  $w$ctoJSON ::
    Data.Map.Internal.Map
      HGit.Core.Types.BranchName
      (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)
    -> HGit.Core.Types.BranchName
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: Data.Map.Internal.Map
                            HGit.Core.Types.BranchName
                            (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))
                   (ww1 :: HGit.Core.Types.BranchName) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Runtime.Types.$fToJSONRepoState4,
                            case Runtime.Types.$fToJSONRepoState_go13
                                   (Data.HashMap.Base.Empty
                                      @ Data.Text.Internal.Text
                                      @ Data.Aeson.Types.Internal.Value)
                                   ww of dt { DEFAULT ->
                            Data.Aeson.Types.Internal.Object dt })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Runtime.Types.$fToJSONRepoState2,
                               case GHC.Magic.runRW#
                                      @ ('GHC.Types.TupleRep
                                           '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                      @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Text.Internal.Text #)
                                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ GHC.Prim.RealWorld
                                              10#
                                              s1 of ds1 { (#,#) ipv ipv1 ->
                                       Runtime.Types.$wouter
                                         ipv1
                                         4#
                                         ww1
                                         0#
                                         ipv }) of ds1 { (#,#) ipv ipv1 ->
                               case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                               Data.Aeson.Types.Internal.String dt } })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww2 { Data.Aeson.Types.Internal.Object ww3 ->
                 (# ww3 #) }) -}
bdc8a0227b41baee384ae4206fd7f3cb
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [2] -}
d3e10b8b078f390b9e2da455cea0330c
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
dd587e5b3aa12f6942a059e6733288f6
  axiom Runtime.Types.Rep_RepoState::
      GHC.Generics.Rep Runtime.Types.RepoState
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "RepoState" "Runtime.Types" "main" 'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "RepoState" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Maybe.Just "branches")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Data.Map.Internal.Map
                        HGit.Core.Types.BranchName
                        (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)))
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "currentBranch")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 HGit.Core.Types.BranchName)))
dd587e5b3aa12f6942a059e6733288f6
  data RepoState
    = RepoState {branches :: Data.Map.Internal.Map
                               HGit.Core.Types.BranchName
                               (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit),
                 currentBranch :: HGit.Core.Types.BranchName}
dd587e5b3aa12f6942a059e6733288f6
  branches ::
    Runtime.Types.RepoState
    -> Data.Map.Internal.Map
         HGit.Core.Types.BranchName
         (HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)
  RecSel Left Runtime.Types.RepoState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Runtime.Types.RepoState) ->
                 case ds of wild { Runtime.Types.RepoState ds1 ds2 -> ds1 }) -}
dd587e5b3aa12f6942a059e6733288f6
  currentBranch ::
    Runtime.Types.RepoState -> HGit.Core.Types.BranchName
  RecSel Left Runtime.Types.RepoState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Runtime.Types.RepoState) ->
                 case ds of wild { Runtime.Types.RepoState ds1 ds2 -> ds2 }) -}
52e67e91d57a6dd4a9753ccfb02db0ef
  initialRepoState ::
    HGit.Core.Types.Hash HGit.Core.Types.HashableCommit
    -> Runtime.Types.RepoState
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (initialHash :: HGit.Core.Types.Hash
                                     HGit.Core.Types.HashableCommit) ->
                 Runtime.Types.RepoState
                   (Runtime.Types.$sfromList
                      @ (Data.Functor.Const.Const
                           Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                      (GHC.Types.:
                         @ (HGit.Core.Types.BranchName,
                            HGit.Core.Types.Hash HGit.Core.Types.HashableCommit)
                         (Runtime.Types.initialRepoState_initial, initialHash)
                         (GHC.Types.[]
                            @ (HGit.Core.Types.BranchName,
                               HGit.Core.Types.Hash HGit.Core.Types.HashableCommit))))
                   Runtime.Types.initialRepoState_initial) -}
8af77ff82a4f7a4ccb722e999885caf3
  initialRepoState1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("default"#) -}
1cf0312678b92da68f5307518bec1856
  initialRepoState_initial :: HGit.Core.Types.BranchName
  {- Unfolding: (GHC.CString.unpackCString#
                   Runtime.Types.initialRepoState1) -}
instance Data.Aeson.Types.FromJSON.FromJSON [Runtime.Types.RepoState]
  = Runtime.Types.$fFromJSONRepoState
instance GHC.Generics.Generic [Runtime.Types.RepoState]
  = Runtime.Types.$fGenericRepoState
instance Data.Aeson.Types.ToJSON.ToJSON [Runtime.Types.RepoState]
  = Runtime.Types.$fToJSONRepoState
family instance GHC.Generics.Rep [Runtime.Types.RepoState]
  = Runtime.Types.Rep_RepoState
"SPEC/Runtime.Types $fFromJSONConst _ @ RawIPFSHash _" [orphan] forall @ k
                                                                       @ b :: k
                                                                       (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                               Merkle.Types.IPFS.RawIPFSHash)
  Data.Aeson.Types.FromJSON.$fFromJSONConst @ k
                                            @ Merkle.Types.IPFS.RawIPFSHash
                                            @ b
                                            v
  = Runtime.Types.$fFromJSONRepoState_$s$fFromJSONConst @ k @ b
"SPEC/Runtime.Types $fFromJSONKey[] @ Char" [orphan] forall (v1 :: Data.Aeson.Types.FromJSON.FromJSON
                                                                     GHC.Types.Char)
                                                            (v :: Data.Aeson.Types.FromJSON.FromJSONKey
                                                                    GHC.Types.Char)
  Data.Aeson.Types.FromJSON.$fFromJSONKey[] @ GHC.Types.Char v v1
  = Runtime.Types.$fFromJSONRepoState_$s$fFromJSONKey[]
"SPEC/Runtime.Types $fFromJSONMap @ [Char] @ (Const
                                               RawIPFSHash HashableCommit)" [orphan] forall (v3 :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                                                                                         (Data.Functor.Const.Const
                                                                                                                                                            Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                            HGit.Core.Types.HashableCommit))
                                                                                                                                                (v2 :: GHC.Classes.Ord
                                                                                                                                                         [GHC.Types.Char])
                                                                                                                                                (v1 :: Data.Aeson.Types.FromJSON.FromJSONKey
                                                                                                                                                         [GHC.Types.Char])
  Data.Aeson.Types.FromJSON.$fFromJSONMap @ [GHC.Types.Char]
                                          @ (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableCommit)
                                          v1
                                          v2
                                          v3
  = Runtime.Types.$fFromJSONRepoState_$s$fFromJSONMap
"SPEC/Runtime.Types $fFromJSON[] @ Char" [orphan] forall (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                 GHC.Types.Char)
  Data.Aeson.Types.FromJSON.$fFromJSON[] @ GHC.Types.Char v
  = Runtime.Types.$fFromJSONRepoState_$s$fFromJSON[]
"SPEC/Runtime.Types $fSelectorMetaMetaSel @ ('Just
                                              "branches") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                           (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                           (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                           (v :: GHC.Generics.SingI
                                                                                                                                                                                                   ('GHC.Maybe.Just
                                                                                                                                                                                                      "branches"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Maybe.Just "branches")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Runtime.Types.$fFromJSONRepoState_$s$fSelectorMetaMetaSel1
"SPEC/Runtime.Types $fSelectorMetaMetaSel @ ('Just
                                              "currentBranch") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                (v :: GHC.Generics.SingI
                                                                                                                                                                                                        ('GHC.Maybe.Just
                                                                                                                                                                                                           "currentBranch"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Maybe.Just
                                          "currentBranch")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Runtime.Types.$fFromJSONRepoState_$s$fSelectorMetaMetaSel
"SPEC/Runtime.Types fromList @ [Char] _" [orphan] forall @ a
                                                         ($dOrd :: GHC.Classes.Ord [GHC.Types.Char])
  Data.Map.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Runtime.Types.$sfromList @ a
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

