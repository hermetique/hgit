
==================== FINAL INTERFACE ====================
2019-05-20 21:39:03.990900323 UTC

interface hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl:HGit.Core.Types [family instance module] 8063
  interface hash: 6e2b5ae9f422d7108395572c84fa4368
  ABI hash: 79e907bf15f7ab56c84aba27eb2d3ddb
  export-list hash: 94322bdc5d9ddb9502c2eba522a4c99c
  orphan hash: 2346f5178fea8a2bb3d483d434af9a53
  flag hash: ad961a7be4b4e33f9c27f1b2edc1f7a5
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: True
  where
exports:
  HGit.Core.Types.canonicalOrdering
  HGit.Core.Types.unGetCapability
  HGit.Core.Types.unPutCapability
  HGit.Core.Types.Blob{HGit.Core.Types.Chunk HGit.Core.Types.Empty}
  HGit.Core.Types.BranchName
  HGit.Core.Types.Commit{HGit.Core.Types.Commit HGit.Core.Types.NullCommit}
  HGit.Core.Types.CommitMessage
  HGit.Core.Types.Dir{HGit.Core.Types.Dir dirEntries}
  HGit.Core.Types.FileTreeEntity{HGit.Core.Types.DirEntity HGit.Core.Types.FileEntity}
  HGit.Core.Types.GetCapability
  HGit.Core.Types.Hash
  HGit.Core.Types.HashAnnotated
  HGit.Core.Types.HashableCommit
  HGit.Core.Types.HashableDir
  HGit.Core.Types.LazyMerkle
  HGit.Core.Types.LazyMerkleDir
  HGit.Core.Types.NamedFileTreeEntity
  HGit.Core.Types.PartialFilePath
  HGit.Core.Types.PutCapability
  HGit.Core.Types.ShallowStore
  HGit.Core.Types.Store
module dependencies:
package dependencies: aeson-1.4.2.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8 base64-bytestring-1.0.0.2 bifunctors-5.5.3
                      binary-0.8.6.0 bytestring-0.10.8.2 comonad-5.0.4 containers-0.6.0.1
                      deepseq-1.4.4.0 deriving-compat-0.5.4 distributive-0.6
                      dlist-0.8.0.5 exceptions-0.10.0 free-5.1 ghc-boot-th-8.6.3
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 merkle-schemes-0.1.0.0 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      recursion-schemes-5.1.1 scientific-0.3.6.2 semigroupoids-5.3.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.2.10.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.5.0 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unordered-containers-0.2.9.0
                      uuid-types-1.0.3 vector-0.12.0.2
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.6.0.1:Data.Graph
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.5:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         merkle-schemes-0.1.0.0:Merkle.Types.IPFS
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         recursion-schemes-5.1.1:Data.Functor.Base
                         recursion-schemes-5.1.1:Data.Functor.Foldable
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  aeson-1.4.2.0:Data.Aeson bfba563baa214951132bfa3fc3e1a304
import  -/  aeson-1.4.2.0:Data.Aeson.Types.FromJSON 7156342bffec9a90a34c7ea87a68d862
import  -/  aeson-1.4.2.0:Data.Aeson.Types.ToJSON d4b5a4d5322cef2155ea56a0b9db079b
import  -/  base-4.12.0.0:Control.Applicative f4c86ba32601955aaee0c0abccbaeade
import  -/  base-4.12.0.0:Data.Bifoldable 834269a564e5becafe90f91f4c4e23ae
import  -/  base-4.12.0.0:Data.Bifunctor 5b0364c19dacbd8c7945623465593ba3
import  -/  base-4.12.0.0:Data.Bitraversable 9ace4156c202207a0e5cc27f920e78e7
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor.Classes 30489a64eb94b8a5149eb66bf49a7f0e
import  -/  base-4.12.0.0:Data.Functor.Compose 4bf09f5e4b84ca3ec0f8df4c7c6b7c3e
import  -/  base-4.12.0.0:Data.Functor.Const 6f39f0697665c8d639f91008d372e7ec
import  -/  base-4.12.0.0:Data.List.NonEmpty d9b99a249213afa9344e96f715fca047
import  -/  base-4.12.0.0:Data.Traversable 257e9f3b6739f5bfbaaf0ac0abb0ddc5
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Generics 7aea30cad019e3a5fc11eb21c8019cc5
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  bifunctors-5.5.3:Data.Bifunctor.TH 9f141561e3177acb768cbb32743683ea
import  -/  bifunctors-5.5.3:Data.Bifunctor.TH.Internal f2421fc365676d5513bd1ed5c876e781
import  -/  containers-0.6.0.1:Data.Map.Internal 7258cbfb7d1b897678a42b6739fc4dac
import  -/  containers-0.6.0.1:Data.Map.Strict c9c15d36149113668379264c6ca4bcc8
import  -/  containers-0.6.0.1:Data.Map.Strict.Internal eb77e50df3bac5c0b0daef45a98deea7
import  -/  deriving-compat-0.5.4:Data.Deriving.Internal 8099610af2eaf72e52af4a6aa87acad8
import  -/  deriving-compat-0.5.4:Data.Eq.Deriving f0b3f1ab0ce6de6904df0f620129270a
import  -/  deriving-compat-0.5.4:Data.Eq.Deriving.Internal 259094dade54898b898453d3341e21f2
import  -/  deriving-compat-0.5.4:Text.Show.Deriving 3e825092188a5a459be1fe145c1d24ac
import  -/  deriving-compat-0.5.4:Text.Show.Deriving.Internal d2e01f00925211c093e20a26a44f84a0
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  merkle-schemes-0.1.0.0:Merkle.Functors eb8956b10d3f8e04ccb8a7a2b5cc8ff0
import  -/  merkle-schemes-0.1.0.0:Merkle.Store e36594001decc0fe1d4e174b93d02572
import  -/  merkle-schemes-0.1.0.0:Merkle.Types d32649228d3f818fecb50bda928fa4a7
import  -/  merkle-schemes-0.1.0.0:Merkle.Types.IPFS cfd925702d20c6a394c69c53f0bb6875
import  -/  merkle-schemes-0.1.0.0:Util.RecursionSchemes b224bcde365e2dc1dc7460c2c5e1f79a
import  -/  recursion-schemes-5.1.1:Data.Functor.Foldable cfc5c666b47791f27e29eb7563647e3b
34aca104485ce79d597049c5ea286be1
  $fBifoldableCommit ::
    Data.Bifoldable.Bifoldable HGit.Core.Types.Commit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Commit
                  HGit.Core.Types.$fBifoldableCommit_$cbifold
                  HGit.Core.Types.$fBifoldableCommit_$cbifoldMap
                  HGit.Core.Types.$fBifoldableCommit_$cbifoldr
                  HGit.Core.Types.$fBifoldableCommit_$cbifoldl -}
34aca104485ce79d597049c5ea286be1
  $fBifoldableCommit_$cbifold ::
    GHC.Base.Monoid m => HGit.Core.Types.Commit m m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,U,C(C1(U)),A)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   (w :: GHC.Base.Monoid m)
                   (w1 :: HGit.Core.Types.Commit m m) ->
                 case w of ww { GHC.Base.C:Monoid ww1 ww2 ww3 ww4 ->
                 HGit.Core.Types.$w$cbifold @ m ww2 ww3 w1 }) -}
34aca104485ce79d597049c5ea286be1
  $fBifoldableCommit_$cbifoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> (b -> m) -> HGit.Core.Types.Commit a b -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U(A,U,C(C1(U)),A)><L,1*C1(U)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ m
                   @ a
                   @ b
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a -> m)
                   (w2 :: b -> m)
                   (w3 :: HGit.Core.Types.Commit a b) ->
                 case w of ww { GHC.Base.C:Monoid ww1 ww2 ww3 ww4 ->
                 HGit.Core.Types.$w$cbifoldMap @ m @ a @ b ww2 ww3 w1 w2 w3 }) -}
34aca104485ce79d597049c5ea286be1
  $fBifoldableCommit_$cbifoldl ::
    (c -> a -> c)
    -> (c -> b -> c) -> c -> HGit.Core.Types.Commit a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ c
                   @ a
                   @ b
                   (f :: c -> a -> c)
                   (g :: c -> b -> c)
                   (z :: c)
                   (t :: HGit.Core.Types.Commit a b) ->
                 case t of wild {
                   HGit.Core.Types.NullCommit -> z
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> case _arg3 of wild1 { GHC.Base.:| a1 as ->
                      letrec {
                        go :: [b] -> c -> c
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ (ds :: [b]) (eta :: c) ->
                          case ds of wild2 { [] -> eta : y ys -> go ys (g eta y) }
                      } in
                      go as (g (f z _arg2) a1) } }) -}
34aca104485ce79d597049c5ea286be1
  $fBifoldableCommit_$cbifoldr ::
    (a -> c -> c)
    -> (b -> c -> c) -> c -> HGit.Core.Types.Commit a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ c
                   @ b
                   (f :: a -> c -> c)
                   (g :: b -> c -> c)
                   (z :: c)
                   (value :: HGit.Core.Types.Commit a b) ->
                 case value of wild {
                   HGit.Core.Types.NullCommit -> z
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> f _arg2
                        (Data.Foldable.$fFoldableNonEmpty_$cfoldr @ b @ c g z _arg3) }) -}
be80b6a731843e8b4df725ad76728847
  $fBifoldableDir :: Data.Bifoldable.Bifoldable HGit.Core.Types.Dir
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Dir
                  HGit.Core.Types.$fBifoldableDir_$cbifold
                  HGit.Core.Types.$fBifoldableDir_$cbifoldMap
                  HGit.Core.Types.$fBifoldableDir_$cbifoldr
                  HGit.Core.Types.$fBifoldableDir_$cbifoldl -}
be80b6a731843e8b4df725ad76728847
  $fBifoldableDir_$cbifold ::
    GHC.Base.Monoid m => HGit.Core.Types.Dir m m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ m (w :: GHC.Base.Monoid m) (w1 :: HGit.Core.Types.Dir m m) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cbifold1 @ m w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fBifoldableDir_$cbifoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> (b -> m) -> HGit.Core.Types.Dir a b -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><L,C(U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ m
                   @ a
                   @ b
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a -> m)
                   (w2 :: b -> m)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w3 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cbifoldMap1 @ m @ a @ b w w1 w2 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fBifoldableDir_$cbifoldl ::
    (c -> a -> c) -> (c -> b -> c) -> c -> HGit.Core.Types.Dir a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,U><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ a
                   @ b
                   (w :: c -> a -> c)
                   (w1 :: c -> b -> c)
                   (w2 :: c)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w3 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cbifoldl @ c @ a @ b w w1 w2 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fBifoldableDir_$cbifoldr ::
    (a -> c -> c) -> (b -> c -> c) -> c -> HGit.Core.Types.Dir a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,U><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ c
                   @ b
                   (w :: a -> c -> c)
                   (w1 :: b -> c -> c)
                   (w2 :: c)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w3 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cbifoldr @ a @ c @ b w w1 w2 ww1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifoldableFileTreeEntity ::
    Data.Bifoldable.Bifoldable HGit.Core.Types.FileTreeEntity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.FileTreeEntity
                  HGit.Core.Types.$fBifoldableFileTreeEntity_$cbifold
                  HGit.Core.Types.$fBifoldableFileTreeEntity_$cbifoldMap
                  HGit.Core.Types.$fBifoldableFileTreeEntity_$cbifoldr
                  HGit.Core.Types.$fBifoldableFileTreeEntity_$cbifoldl -}
ae33a7ec835849f6fc910a468589c69e
  $fBifoldableFileTreeEntity_$cbifold ::
    GHC.Base.Monoid m => HGit.Core.Types.FileTreeEntity m m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (value :: HGit.Core.Types.FileTreeEntity m m) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1 -> _arg1
                   HGit.Core.Types.DirEntity _arg1 -> _arg1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifoldableFileTreeEntity_$cbifoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> (b -> m) -> HGit.Core.Types.FileTreeEntity a b -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m
                   @ a
                   @ b
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (g :: b -> m)
                   (value :: HGit.Core.Types.FileTreeEntity a b) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1 -> f _arg1
                   HGit.Core.Types.DirEntity _arg1 -> g _arg1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifoldableFileTreeEntity_$cbifoldl ::
    (c -> a -> c)
    -> (c -> b -> c) -> c -> HGit.Core.Types.FileTreeEntity a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ a
                   @ b
                   (f :: c -> a -> c)
                   (g :: c -> b -> c)
                   (z :: c)
                   (t :: HGit.Core.Types.FileTreeEntity a b) ->
                 case t of wild {
                   HGit.Core.Types.FileEntity _arg1 -> f z _arg1
                   HGit.Core.Types.DirEntity _arg1 -> g z _arg1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifoldableFileTreeEntity_$cbifoldr ::
    (a -> c -> c)
    -> (b -> c -> c) -> c -> HGit.Core.Types.FileTreeEntity a b -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ c
                   @ b
                   (f :: a -> c -> c)
                   (g :: b -> c -> c)
                   (z :: c)
                   (value :: HGit.Core.Types.FileTreeEntity a b) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1 -> f _arg1 z
                   HGit.Core.Types.DirEntity _arg1 -> g _arg1 z }) -}
34aca104485ce79d597049c5ea286be1
  $fBifunctorCommit ::
    Data.Bifunctor.Bifunctor HGit.Core.Types.Commit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Commit
                  HGit.Core.Types.$fBifunctorCommit_$cbimap
                  HGit.Core.Types.$fBifunctorCommit_$cfirst
                  HGit.Core.Types.$fBifunctorCommit_$csecond -}
34aca104485ce79d597049c5ea286be1
  $fBifunctorCommit_$cbimap ::
    (a -> b)
    -> (c -> d)
    -> HGit.Core.Types.Commit a c
    -> HGit.Core.Types.Commit b d
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (f :: a -> b)
                   (g :: c -> d)
                   (value :: HGit.Core.Types.Commit a c) ->
                 case value of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.NullCommit @ b @ d
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> HGit.Core.Types.Commit
                        @ b
                        @ d
                        _arg1
                        (f _arg2)
                        (GHC.Base.$fFunctorNonEmpty_$cfmap @ c @ d g _arg3) }) -}
34aca104485ce79d597049c5ea286be1
  $fBifunctorCommit_$cfirst ::
    (a -> b)
    -> HGit.Core.Types.Commit a c -> HGit.Core.Types.Commit b c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   (f :: a -> b)
                   (value :: HGit.Core.Types.Commit a c) ->
                 case value of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.NullCommit @ b @ c
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> HGit.Core.Types.Commit
                        @ b
                        @ c
                        _arg1
                        (f _arg2)
                        (GHC.Base.:|
                           @ c
                           (case _arg3 of wild1 { GHC.Base.:| a1 as -> a1 })
                           (case _arg3 of wild1 { GHC.Base.:| a1 as -> as })) }) -}
34aca104485ce79d597049c5ea286be1
  $fBifunctorCommit_$csecond ::
    (b -> c)
    -> HGit.Core.Types.Commit a b -> HGit.Core.Types.Commit a c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ c
                   @ a
                   (g :: b -> c)
                   (value :: HGit.Core.Types.Commit a b) ->
                 case value of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.NullCommit @ a @ c
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> HGit.Core.Types.Commit
                        @ a
                        @ c
                        _arg1
                        _arg2
                        (GHC.Base.$fFunctorNonEmpty_$cfmap @ b @ c g _arg3) }) -}
be80b6a731843e8b4df725ad76728847
  $fBifunctorDir :: Data.Bifunctor.Bifunctor HGit.Core.Types.Dir
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Dir
                  HGit.Core.Types.$fBifunctorDir_$cbimap
                  HGit.Core.Types.$fBifunctorDir_$cfirst
                  HGit.Core.Types.$fBifunctorDir_$csecond -}
be80b6a731843e8b4df725ad76728847
  $fBifunctorDir_$cbimap ::
    (a -> b)
    -> (c -> d) -> HGit.Core.Types.Dir a c -> HGit.Core.Types.Dir b d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,C(U)><S,1*U(1*U)>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: a -> b)
                   (w1 :: c -> d)
                   (w2 :: HGit.Core.Types.Dir a c) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.Dir
                   @ b
                   @ d
                   (GHC.Base.build
                      @ (HGit.Core.Types.PartialFilePath,
                         HGit.Core.Types.FileTreeEntity b d)
                      (\ @ b1
                         (c1 :: (HGit.Core.Types.PartialFilePath,
                                 HGit.Core.Types.FileTreeEntity b d)
                                -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (HGit.Core.Types.PartialFilePath,
                            HGit.Core.Types.FileTreeEntity a c)
                         @ b1
                         (GHC.Base.mapFB
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity b d)
                            @ b1
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a c)
                            c1
                            (\ (x :: (HGit.Core.Types.PartialFilePath,
                                      HGit.Core.Types.FileTreeEntity a c)) ->
                             case x of wild { (,) _tup1 _tup2 ->
                             (_tup1,
                              HGit.Core.Types.$fBifunctorDir_$cbimap1
                                @ a
                                @ b
                                @ c
                                @ d
                                w
                                w1
                                _tup2) }))
                         n
                         ww1)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifunctorDir_$cbimap1 ::
    (a -> b)
    -> (c -> d)
    -> HGit.Core.Types.FileTreeEntity a c
    -> HGit.Core.Types.FileTreeEntity b d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (f :: a -> b)
                   (g :: c -> d)
                   (value :: HGit.Core.Types.FileTreeEntity a c) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1
                   -> HGit.Core.Types.FileEntity @ b @ d (f _arg1)
                   HGit.Core.Types.DirEntity _arg1
                   -> HGit.Core.Types.DirEntity @ b @ d (g _arg1) }) -}
be80b6a731843e8b4df725ad76728847
  $fBifunctorDir_$cfirst ::
    (a -> b) -> HGit.Core.Types.Dir a c -> HGit.Core.Types.Dir b c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b @ c (f :: a -> b) ->
                 HGit.Core.Types.$fBifunctorDir_$cbimap
                   @ a
                   @ b
                   @ c
                   @ c
                   f
                   (GHC.Base.id @ c)) -}
be80b6a731843e8b4df725ad76728847
  $fBifunctorDir_$csecond ::
    (b -> c) -> HGit.Core.Types.Dir a b -> HGit.Core.Types.Dir a c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Unfolding: (\ @ b
                   @ c
                   @ a
                   (w :: b -> c)
                   (w1 :: HGit.Core.Types.Dir a b) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.Dir
                   @ a
                   @ c
                   (letrec {
                      go :: [(HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity a b)]
                            -> [(HGit.Core.Types.PartialFilePath,
                                 HGit.Core.Types.FileTreeEntity a c)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a b)]) ->
                        case ds of wild {
                          []
                          -> GHC.Types.[]
                               @ (HGit.Core.Types.PartialFilePath,
                                  HGit.Core.Types.FileTreeEntity a c)
                          : y ys
                          -> GHC.Types.:
                               @ (HGit.Core.Types.PartialFilePath,
                                  HGit.Core.Types.FileTreeEntity a c)
                               (case y of wild1 { (,) _tup1 _tup2 ->
                                (_tup1,
                                 case _tup2 of wild2 {
                                   HGit.Core.Types.FileEntity _arg1
                                   -> HGit.Core.Types.FileEntity @ a @ c _arg1
                                   HGit.Core.Types.DirEntity _arg1
                                   -> HGit.Core.Types.DirEntity @ a @ c (w _arg1) }) })
                               (go ys) }
                    } in
                    go ww1) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifunctorFileTreeEntity ::
    Data.Bifunctor.Bifunctor HGit.Core.Types.FileTreeEntity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.FileTreeEntity
                  HGit.Core.Types.$fBifunctorDir_$cbimap1
                  HGit.Core.Types.$fBifunctorFileTreeEntity_$cfirst
                  HGit.Core.Types.$fBifunctorFileTreeEntity_$csecond -}
ae33a7ec835849f6fc910a468589c69e
  $fBifunctorFileTreeEntity_$cfirst ::
    (a -> b)
    -> HGit.Core.Types.FileTreeEntity a c
    -> HGit.Core.Types.FileTreeEntity b c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ c
                   (f :: a -> b)
                   (value :: HGit.Core.Types.FileTreeEntity a c) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1
                   -> HGit.Core.Types.FileEntity @ b @ c (f _arg1)
                   HGit.Core.Types.DirEntity _arg1
                   -> HGit.Core.Types.DirEntity @ b @ c _arg1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBifunctorFileTreeEntity_$csecond ::
    (b -> c)
    -> HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   @ c
                   @ a
                   (g :: b -> c)
                   (value :: HGit.Core.Types.FileTreeEntity a b) ->
                 case value of wild {
                   HGit.Core.Types.FileEntity _arg1
                   -> HGit.Core.Types.FileEntity @ a @ c _arg1
                   HGit.Core.Types.DirEntity _arg1
                   -> HGit.Core.Types.DirEntity @ a @ c (g _arg1) }) -}
34aca104485ce79d597049c5ea286be1
  $fBitraversableCommit ::
    Data.Bitraversable.Bitraversable HGit.Core.Types.Commit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Commit
                  HGit.Core.Types.$fBifunctorCommit
                  HGit.Core.Types.$fBifoldableCommit
                  HGit.Core.Types.$fBitraversableCommit_$cbitraverse -}
34aca104485ce79d597049c5ea286be1
  $fBitraversableCommit_$cbitraverse ::
    GHC.Base.Applicative f =>
    (a -> f c)
    -> (b -> f d)
    -> HGit.Core.Types.Commit a b
    -> f (HGit.Core.Types.Commit c d)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U(A,1*C1(U),A,C(C1(C1(U))),A,A)><L,1*C1(U)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f c)
                   (w2 :: b -> f d)
                   (w3 :: HGit.Core.Types.Commit a b) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 HGit.Core.Types.$w$cbitraverse
                   @ f
                   @ a
                   @ c
                   @ b
                   @ d
                   ww2
                   ww4
                   w1
                   w2
                   w3 }) -}
be80b6a731843e8b4df725ad76728847
  $fBitraversableDir ::
    Data.Bitraversable.Bitraversable HGit.Core.Types.Dir
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Dir
                  HGit.Core.Types.$fBifunctorDir
                  HGit.Core.Types.$fBifoldableDir
                  HGit.Core.Types.$fBitraversableDir_$cbitraverse -}
be80b6a731843e8b4df725ad76728847
  $fBitraversableDir_$cbitraverse ::
    GHC.Base.Applicative f =>
    (a -> f c)
    -> (b -> f d)
    -> HGit.Core.Types.Dir a b
    -> f (HGit.Core.Types.Dir c d)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A)><L,C(U)><L,C(U)><S,1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f c)
                   (w2 :: b -> f d)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Base.C:Functor ww8 ww9 ->
                 case w3 of ww10 { HGit.Core.Types.Dir ww11 ->
                 HGit.Core.Types.$w$cbitraverse1
                   @ f
                   @ a
                   @ c
                   @ b
                   @ d
                   ww8
                   ww2
                   ww4
                   w1
                   w2
                   ww11 } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fBitraversableFileTreeEntity ::
    Data.Bitraversable.Bitraversable HGit.Core.Types.FileTreeEntity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.FileTreeEntity
                  HGit.Core.Types.$fBifunctorFileTreeEntity
                  HGit.Core.Types.$fBifoldableFileTreeEntity
                  HGit.Core.Types.$fBitraversableFileTreeEntity_$cbitraverse -}
ae33a7ec835849f6fc910a468589c69e
  $fBitraversableFileTreeEntity_$cbitraverse ::
    GHC.Base.Applicative f =>
    (a -> f c)
    -> (b -> f d)
    -> HGit.Core.Types.FileTreeEntity a b
    -> f (HGit.Core.Types.FileTreeEntity c d)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f c)
                   (w2 :: b -> f d)
                   (w3 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Base.C:Functor ww8 ww9 ->
                 HGit.Core.Types.$w$cbitraverse2
                   @ f
                   @ a
                   @ c
                   @ b
                   @ d
                   ww8
                   w1
                   w2
                   w3 } }) -}
34aca104485ce79d597049c5ea286be1
  $fEq1Commit ::
    GHC.Classes.Eq a =>
    Data.Functor.Classes.Eq1 (HGit.Core.Types.Commit a)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,C(C1(U))><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                HGit.Core.Types.$fEq1Commit_$cliftEq
                  `cast`
                (forall (a :: <Type>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Data.Functor.Classes.N:Eq1[0]
                               <HGit.Core.Types.Commit a>_N)) -}
34aca104485ce79d597049c5ea286be1
  $fEq1Commit_$cliftEq ::
    GHC.Classes.Eq a =>
    (a1 -> b -> GHC.Types.Bool)
    -> HGit.Core.Types.Commit a a1
    -> HGit.Core.Types.Commit a b
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,C(C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   @ a1
                   @ b
                   (eq1 :: a1 -> b -> GHC.Types.Bool)
                   (value1 :: HGit.Core.Types.Commit a a1)
                   (value2 :: HGit.Core.Types.Commit a b) ->
                 case value1 of wild {
                   HGit.Core.Types.NullCommit
                   -> case value2 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.True
                        HGit.Core.Types.Commit ipv ipv1 ipv2 -> GHC.Types.False }
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case value2 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.False
                        HGit.Core.Types.Commit b1 b2 b3
                        -> case GHC.Base.eqString a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Classes.== @ a $dEq a3 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> Data.Functor.Classes.$fEq1NonEmpty_$cliftEq
                                       @ a1
                                       @ b
                                       eq1
                                       a4
                                       b3 } } } }) -}
be80b6a731843e8b4df725ad76728847
  $fEq1Dir ::
    GHC.Classes.Eq a =>
    Data.Functor.Classes.Eq1 (HGit.Core.Types.Dir a)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(C1(U))><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                HGit.Core.Types.$fEq1Dir_$cliftEq
                  `cast`
                (forall (a :: <Type>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Data.Functor.Classes.N:Eq1[0]
                               <HGit.Core.Types.Dir a>_N)) -}
be80b6a731843e8b4df725ad76728847
  $fEq1Dir_$cliftEq ::
    GHC.Classes.Eq a =>
    (a1 -> b -> GHC.Types.Bool)
    -> HGit.Core.Types.Dir a a1
    -> HGit.Core.Types.Dir a b
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(C1(U))><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   @ a1
                   @ b
                   (w1 :: a1 -> b -> GHC.Types.Bool)
                   (w2 :: HGit.Core.Types.Dir a a1)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$cliftEq @ a w @ a1 @ b w1 ww1 ww3 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fEq1Dir_$cliftEq1 ::
    GHC.Classes.Eq a =>
    (a1 -> b -> GHC.Types.Bool)
    -> HGit.Core.Types.FileTreeEntity a a1
    -> HGit.Core.Types.FileTreeEntity a b
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*C1(C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   @ a1
                   @ b
                   (eq1 :: a1 -> b -> GHC.Types.Bool)
                   (value1 :: HGit.Core.Types.FileTreeEntity a a1)
                   (value2 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case value1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> case value2 of wild1 {
                        HGit.Core.Types.FileEntity b1 -> GHC.Classes.== @ a $dEq a2 b1
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.False }
                   HGit.Core.Types.DirEntity a2
                   -> case value2 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.False
                        HGit.Core.Types.DirEntity b1 -> eq1 a2 b1 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fEq1FileTreeEntity ::
    GHC.Classes.Eq a =>
    Data.Functor.Classes.Eq1 (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*C1(C1(U))><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                HGit.Core.Types.$fEq1Dir_$cliftEq1
                  `cast`
                (forall (a :: <Type>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Data.Functor.Classes.N:Eq1[0]
                               <HGit.Core.Types.FileTreeEntity a>_N)) -}
34aca104485ce79d597049c5ea286be1
  $fEq2Commit :: Data.Functor.Classes.Eq2 HGit.Core.Types.Commit
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fEq2Commit_$cliftEq2
                  `cast`
                (Sym (Data.Functor.Classes.N:Eq2[0] <HGit.Core.Types.Commit>_N)) -}
34aca104485ce79d597049c5ea286be1
  $fEq2Commit_$cliftEq2 ::
    (a -> b -> GHC.Types.Bool)
    -> (c -> d -> GHC.Types.Bool)
    -> HGit.Core.Types.Commit a c
    -> HGit.Core.Types.Commit b d
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (eq1 :: a -> b -> GHC.Types.Bool)
                   (eq2 :: c -> d -> GHC.Types.Bool)
                   (value1 :: HGit.Core.Types.Commit a c)
                   (value2 :: HGit.Core.Types.Commit b d) ->
                 case value1 of wild {
                   HGit.Core.Types.NullCommit
                   -> case value2 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.True
                        HGit.Core.Types.Commit ipv ipv1 ipv2 -> GHC.Types.False }
                   HGit.Core.Types.Commit a1 a2 a3
                   -> case value2 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.False
                        HGit.Core.Types.Commit b1 b2 b3
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case eq1 a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> Data.Functor.Classes.$fEq1NonEmpty_$cliftEq
                                       @ c
                                       @ d
                                       eq2
                                       a3
                                       b3 } } } }) -}
be80b6a731843e8b4df725ad76728847
  $fEq2Dir :: Data.Functor.Classes.Eq2 HGit.Core.Types.Dir
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fEq2Dir_$cliftEq2
                  `cast`
                (Sym (Data.Functor.Classes.N:Eq2[0] <HGit.Core.Types.Dir>_N)) -}
ae33a7ec835849f6fc910a468589c69e
  $fEq2Dir_$cliftEq1 ::
    (a -> b -> GHC.Types.Bool)
    -> (c -> d -> GHC.Types.Bool)
    -> HGit.Core.Types.FileTreeEntity a c
    -> HGit.Core.Types.FileTreeEntity b d
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (eq1 :: a -> b -> GHC.Types.Bool)
                   (eq2 :: c -> d -> GHC.Types.Bool)
                   (value1 :: HGit.Core.Types.FileTreeEntity a c)
                   (value2 :: HGit.Core.Types.FileTreeEntity b d) ->
                 case value1 of wild {
                   HGit.Core.Types.FileEntity a1
                   -> case value2 of wild1 {
                        HGit.Core.Types.FileEntity b1 -> eq1 a1 b1
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.False }
                   HGit.Core.Types.DirEntity a1
                   -> case value2 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.False
                        HGit.Core.Types.DirEntity b1 -> eq2 a1 b1 } }) -}
be80b6a731843e8b4df725ad76728847
  $fEq2Dir_$cliftEq2 ::
    (a -> b -> GHC.Types.Bool)
    -> (c -> d -> GHC.Types.Bool)
    -> HGit.Core.Types.Dir a c
    -> HGit.Core.Types.Dir b d
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: a -> b -> GHC.Types.Bool)
                   (w1 :: c -> d -> GHC.Types.Bool)
                   (w2 :: HGit.Core.Types.Dir a c)
                   (w3 :: HGit.Core.Types.Dir b d) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$cliftEq2 @ a @ b @ c @ d w w1 ww1 ww3 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fEq2FileTreeEntity ::
    Data.Functor.Classes.Eq2 HGit.Core.Types.FileTreeEntity
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><S,1*U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fEq2Dir_$cliftEq1
                  `cast`
                (Sym (Data.Functor.Classes.N:Eq2[0]
                          <HGit.Core.Types.FileTreeEntity>_N)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fEqBlob ::
    GHC.Classes.Eq a => GHC.Classes.Eq (HGit.Core.Types.Blob a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (HGit.Core.Types.Blob a)
                  (HGit.Core.Types.$fEqBlob_$c== @ a v)
                  (HGit.Core.Types.$fEqBlob_$c/= @ a v) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fEqBlob_$c/= ::
    GHC.Classes.Eq a =>
    HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: HGit.Core.Types.Blob a)
                   (y :: HGit.Core.Types.Blob a) ->
                 case x of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> case y of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Classes.== @ a $dEq a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } }
                        HGit.Core.Types.Empty -> GHC.Types.True }
                   HGit.Core.Types.Empty
                   -> case y of wild1 {
                        HGit.Core.Types.Chunk ipv ipv1 -> GHC.Types.True
                        HGit.Core.Types.Empty -> GHC.Types.False } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fEqBlob_$c== ::
    GHC.Classes.Eq a =>
    HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: HGit.Core.Types.Blob a)
                   (ds1 :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> case ds1 of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a $dEq a2 b2 }
                        HGit.Core.Types.Empty -> GHC.Types.False }
                   HGit.Core.Types.Empty
                   -> case ds1 of wild1 {
                        HGit.Core.Types.Chunk ipv ipv1 -> GHC.Types.False
                        HGit.Core.Types.Empty -> GHC.Types.True } }) -}
34aca104485ce79d597049c5ea286be1
  $fEqCommit ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (HGit.Core.Types.Commit a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq a)
                      (v1 :: GHC.Classes.Eq b).
                  @ (HGit.Core.Types.Commit a b)
                  (HGit.Core.Types.$fEqCommit_$c== @ a @ b v v1)
                  (HGit.Core.Types.$fEqCommit_$c/= @ a @ b v v1) -}
34aca104485ce79d597049c5ea286be1
  $fEqCommit_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(C(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (x :: HGit.Core.Types.Commit a b)
                   (y :: HGit.Core.Types.Commit a b) ->
                 case HGit.Core.Types.$fEqCommit_$c==
                        @ a
                        @ b
                        $dEq
                        $dEq1
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34aca104485ce79d597049c5ea286be1
  $fEqCommit_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (ds :: HGit.Core.Types.Commit a b)
                   (ds1 :: HGit.Core.Types.Commit a b) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit
                   -> case ds1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.True
                        HGit.Core.Types.Commit ipv ipv1 ipv2 -> GHC.Types.False }
                   HGit.Core.Types.Commit a1 a2 a3
                   -> case ds1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.False
                        HGit.Core.Types.Commit b1 b2 b3
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Classes.== @ a $dEq a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Base.$fEqNonEmpty_$c== @ b $dEq1 a3 b3 } } } }) -}
be80b6a731843e8b4df725ad76728847
  $fEqDir ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (HGit.Core.Types.Dir a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq a)
                      (v1 :: GHC.Classes.Eq b).
                  @ (HGit.Core.Types.Dir a b)
                  (HGit.Core.Types.$fEqDir_$c== @ a @ b v v1)
                  (HGit.Core.Types.$fEqDir_$c/= @ a @ b v v1) -}
be80b6a731843e8b4df725ad76728847
  $fEqDir_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (x :: HGit.Core.Types.Dir a b)
                   (y :: HGit.Core.Types.Dir a b) ->
                 case x of wild { HGit.Core.Types.Dir a1 ->
                 case y of wild1 { HGit.Core.Types.Dir b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fEq(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fEq[]_$s$fEq[]1
                           (HGit.Core.Types.$fEqFileTreeEntity @ a @ b $dEq $dEq1))
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
be80b6a731843e8b4df725ad76728847
  $fEqDir_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b) ->
                 let {
                   $dEq2 :: GHC.Classes.Eq (HGit.Core.Types.FileTreeEntity a b)
                   = HGit.Core.Types.$fEqFileTreeEntity @ a @ b $dEq $dEq1
                 } in
                 let {
                   $dEq3 :: GHC.Classes.Eq
                              (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a b)
                   = GHC.Classes.$fEq(,)
                       @ [GHC.Types.Char]
                       @ (HGit.Core.Types.FileTreeEntity a b)
                       GHC.Classes.$fEq[]_$s$fEq[]1
                       $dEq2
                 } in
                 \ (ds :: HGit.Core.Types.Dir a b)
                   (ds1 :: HGit.Core.Types.Dir a b) ->
                 case ds of wild { HGit.Core.Types.Dir a1 ->
                 case ds1 of wild1 { HGit.Core.Types.Dir b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity a b)
                   $dEq3
                   a1
                   b1 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fEqFileTreeEntity ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (HGit.Core.Types.FileTreeEntity a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq a)
                      (v1 :: GHC.Classes.Eq b).
                  @ (HGit.Core.Types.FileTreeEntity a b)
                  (HGit.Core.Types.$fEqFileTreeEntity_$c== @ a @ b v v1)
                  (HGit.Core.Types.$fEqFileTreeEntity_$c/= @ a @ b v v1) -}
ae33a7ec835849f6fc910a468589c69e
  $fEqFileTreeEntity_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (x :: HGit.Core.Types.FileTreeEntity a b)
                   (y :: HGit.Core.Types.FileTreeEntity a b) ->
                 case x of wild {
                   HGit.Core.Types.FileEntity a1
                   -> case y of wild1 {
                        HGit.Core.Types.FileEntity b1
                        -> case GHC.Classes.== @ a $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.True }
                   HGit.Core.Types.DirEntity a1
                   -> case y of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.True
                        HGit.Core.Types.DirEntity b1
                        -> case GHC.Classes.== @ b $dEq1 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fEqFileTreeEntity_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (ds :: HGit.Core.Types.FileTreeEntity a b)
                   (ds1 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a1
                   -> case ds1 of wild1 {
                        HGit.Core.Types.FileEntity b1 -> GHC.Classes.== @ a $dEq a1 b1
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.False }
                   HGit.Core.Types.DirEntity a1
                   -> case ds1 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.False
                        HGit.Core.Types.DirEntity b1
                        -> GHC.Classes.== @ b $dEq1 a1 b1 } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysBlob ::
    Merkle.Types.IPFS.ExtractKeys HGit.Core.Types.Blob
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fExtractKeysBlob_$cextractRawKeys
                  `cast`
                (Sym (Merkle.Types.IPFS.N:ExtractKeys[0]
                          <HGit.Core.Types.Blob>_N)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysBlob_$cextractRawKeys ::
    HGit.Core.Types.Blob
      (Merkle.Types.Hash
         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
    -> [Merkle.Types.IPFS.RawIPFSHash]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: HGit.Core.Types.Blob
                            (Merkle.Types.Hash
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk _x ds1
                   -> GHC.Types.:
                        @ Merkle.Types.IPFS.RawIPFSHash
                        ds1
                          `cast`
                        (Data.Functor.Const.N:Const[0]
                             <Type -> Type>_N
                             <Merkle.Types.IPFS.RawIPFSHash>_R
                             <HGit.Core.Types.Blob>_P)
                        (GHC.Types.[] @ Merkle.Types.IPFS.RawIPFSHash)
                   HGit.Core.Types.Empty
                   -> GHC.Types.[] @ Merkle.Types.IPFS.RawIPFSHash }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysCommit ::
    Merkle.Types.IPFS.ExtractKeys HGit.Core.Types.HashableCommit
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fExtractKeysCommit_$cextractRawKeys
                  `cast`
                (Sym (Merkle.Types.IPFS.N:ExtractKeys[0]
                          <HGit.Core.Types.HashableCommit>_N)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysCommit_$cextractRawKeys ::
    HGit.Core.Types.HashableCommit
      (Merkle.Types.Hash
         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
    -> [Merkle.Types.IPFS.RawIPFSHash]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: HGit.Core.Types.Commit
                            (HGit.Core.Types.Hash HGit.Core.Types.HashableDir)
                            (Merkle.Types.Hash
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit
                   -> GHC.Types.[] @ Merkle.Types.IPFS.RawIPFSHash
                   HGit.Core.Types.Commit _msg ds1 rhs
                   -> GHC.Types.:
                        @ Merkle.Types.IPFS.RawIPFSHash
                        ds1
                          `cast`
                        (Data.Functor.Const.N:Const[0]
                             <Type -> Type>_N
                             <Merkle.Types.IPFS.RawIPFSHash>_R
                             <HGit.Core.Types.HashableDir>_P)
                        (GHC.Types.:
                           @ (Merkle.Types.Hash
                                Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableCommit)
                           (case rhs of wild1 { GHC.Base.:| a1 as -> a1 })
                           (case rhs of wild1 { GHC.Base.:| a1 as -> as }))
                          `cast`
                        ([Data.Functor.Const.N:Const[0]
                              <Type -> Type>_N
                              <Merkle.Types.IPFS.RawIPFSHash>_R
                              <HGit.Core.Types.HashableCommit>_P])_R }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysDir ::
    Merkle.Types.IPFS.ExtractKeys HGit.Core.Types.HashableDir
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                HGit.Core.Types.$fExtractKeysDir_$cextractRawKeys
                  `cast`
                (Sym (Merkle.Types.IPFS.N:ExtractKeys[0]
                          <HGit.Core.Types.HashableDir>_N)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysDir1 ::
    (HGit.Core.Types.PartialFilePath,
     HGit.Core.Types.FileTreeEntity
       (Data.Functor.Const.Const
          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
       (Data.Functor.Const.Const
          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
    -> Merkle.Types.IPFS.RawIPFSHash
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity
                             (Data.Functor.Const.Const
                                Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                             (Data.Functor.Const.Const
                                Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))) ->
                 case ds of wild { (,) _n ds1 ->
                 case ds1 of wild1 {
                   HGit.Core.Types.FileEntity ds2
                   -> ds2
                        `cast`
                      (Data.Functor.Const.N:Const[0]
                           <Type -> Type>_N
                           <Merkle.Types.IPFS.RawIPFSHash>_R
                           <HGit.Core.Types.Blob>_P)
                   HGit.Core.Types.DirEntity ds2
                   -> ds2
                        `cast`
                      (Data.Functor.Const.N:Const[0]
                           <Type -> Type>_N
                           <Merkle.Types.IPFS.RawIPFSHash>_R
                           <HGit.Core.Types.HashableDir>_P) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fExtractKeysDir_$cextractRawKeys ::
    HGit.Core.Types.HashableDir
      (Merkle.Types.Hash
         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir)
    -> [Merkle.Types.IPFS.RawIPFSHash]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: HGit.Core.Types.Dir
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob)
                            (Merkle.Types.Hash
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir)) ->
                 case ds of wild { HGit.Core.Types.Dir xs ->
                 GHC.Base.build
                   @ Merkle.Types.IPFS.RawIPFSHash
                   (\ @ b1
                      (c :: Merkle.Types.IPFS.RawIPFSHash -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (HGit.Core.Types.PartialFilePath,
                         HGit.Core.Types.FileTreeEntity
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                      @ b1
                      (GHC.Base.mapFB
                         @ Merkle.Types.IPFS.RawIPFSHash
                         @ b1
                         @ (HGit.Core.Types.PartialFilePath,
                            HGit.Core.Types.FileTreeEntity
                              (Data.Functor.Const.Const
                                 Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                              (Data.Functor.Const.Const
                                 Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                         c
                         HGit.Core.Types.$fExtractKeysDir1)
                      n
                      xs) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob :: Data.Foldable.Foldable HGit.Core.Types.Blob
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fFoldableBlob_$cfold
                  HGit.Core.Types.$fFoldableBlob_$cfoldMap
                  HGit.Core.Types.$fFoldableBlob_$cfoldr'
                  HGit.Core.Types.$fFoldableBlob_$cfoldr'
                  HGit.Core.Types.$fFoldableBlob_$cfoldl
                  HGit.Core.Types.$fFoldableBlob_$cfoldl
                  HGit.Core.Types.$fFoldableBlob_$cfoldr1
                  HGit.Core.Types.$fFoldableBlob_$cfoldl1
                  HGit.Core.Types.$fFoldableBlob_$ctoList
                  HGit.Core.Types.$fFoldableBlob_$cnull
                  HGit.Core.Types.$fFoldableBlob_$clength
                  HGit.Core.Types.$fFoldableBlob_$celem
                  HGit.Core.Types.$fFoldableBlob_$cmaximum
                  HGit.Core.Types.$fFoldableBlob_$cminimum
                  HGit.Core.Types.$fFoldableBlob2
                    `cast`
                  (forall (a :: <Type>_N).
                   <GHC.Num.Num a>_R
                   ->_R <HGit.Core.Types.Blob a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  HGit.Core.Types.$fFoldableBlob1
                    `cast`
                  (forall (a :: <Type>_N).
                   <GHC.Num.Num a>_R
                   ->_R <HGit.Core.Types.Blob a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob1 ::
    GHC.Num.Num a =>
    HGit.Core.Types.Blob a -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> a2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                   HGit.Core.Types.Empty
                   -> (Data.Semigroup.Internal.$fMonoidProduct2 @ a $dNum)
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob2 ::
    GHC.Num.Num a =>
    HGit.Core.Types.Blob a -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> a2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                   HGit.Core.Types.Empty
                   -> (Data.Semigroup.Internal.$fMonoidSum1 @ a $dNum)
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob3 :: HGit.Core.Types.Blob a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: HGit.Core.Types.Blob a) ->
                 case x of wild {
                   HGit.Core.Types.Chunk a1 a2 -> a2
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFoldableBlob4 @ a }) -}
c93147ea213458ecb89b216bd7d306fb
  $fFoldableBlob4 :: a
  {- Strictness: x -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob5 :: HGit.Core.Types.Blob a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: HGit.Core.Types.Blob a) ->
                 case x of wild {
                   HGit.Core.Types.Chunk a1 a2 -> a2
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFoldableBlob6 @ a }) -}
244b948fb96e11da7bff8a86f0bdb6c1
  $fFoldableBlob6 :: a
  {- Strictness: x -}
b7b24a39eb88e4df747fdd4c5cf7a21c
  $fFoldableBlob7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
457670221ba53da451257cfa4d2bba19
  $fFoldableBlob8 :: a
  {- Strictness: x -}
4b72b06ab71bdc6b66b59913b376ec7c
  $fFoldableBlob9 :: a
  {- Strictness: x -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$celem ::
    GHC.Classes.Eq a => a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: HGit.Core.Types.Blob a) ->
                  case ds of wild {
                    HGit.Core.Types.Chunk a1 a2
                    -> (f a2) `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                    HGit.Core.Types.Empty
                    -> GHC.Types.False
                         `cast`
                       (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<HGit.Core.Types.Blob a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfold ::
    GHC.Base.Monoid m => HGit.Core.Types.Blob m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(A,1*U,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: HGit.Core.Types.Blob m) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2 -> a2
                   HGit.Core.Types.Empty -> GHC.Base.mempty @ m $dMonoid }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfoldMap ::
    GHC.Base.Monoid m => (a -> m) -> HGit.Core.Types.Blob a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2 -> f a2
                   HGit.Core.Types.Empty -> GHC.Base.mempty @ m $dMonoid }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfoldl ::
    (b -> a -> b) -> b -> HGit.Core.Types.Blob a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f :: b -> a -> b)
                   (z :: b)
                   (t1 :: HGit.Core.Types.Blob a) ->
                 case t1 of wild {
                   HGit.Core.Types.Chunk a1 a2 -> f z a2
                   HGit.Core.Types.Empty -> z }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfoldl1 ::
    (a -> a -> a) -> HGit.Core.Types.Blob a -> a
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f :: a -> a -> a) (xs :: HGit.Core.Types.Blob a) ->
                 case xs of wild {
                   HGit.Core.Types.Chunk a1 a2 -> a2
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFoldableBlob8 @ a }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfoldr' ::
    (a -> b -> b) -> b -> HGit.Core.Types.Blob a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b -> b)
                   (z0 :: b)
                   (xs :: HGit.Core.Types.Blob a) ->
                 case xs of wild {
                   HGit.Core.Types.Chunk a1 a2 -> f a2 z0
                   HGit.Core.Types.Empty -> z0 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cfoldr1 ::
    (a -> a -> a) -> HGit.Core.Types.Blob a -> a
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f :: a -> a -> a) (xs :: HGit.Core.Types.Blob a) ->
                 case xs of wild {
                   HGit.Core.Types.Chunk a1 a2 -> a2
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFoldableBlob9 @ a }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$clength :: HGit.Core.Types.Blob a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: HGit.Core.Types.Blob a) ->
                 case xs of wild {
                   HGit.Core.Types.Chunk a1 a2 -> GHC.Types.I# 1#
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFoldableBlob7 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cmaximum ::
    GHC.Classes.Ord a => HGit.Core.Types.Blob a -> a
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 HGit.Core.Types.$fFoldableBlob5 @ a) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cminimum ::
    GHC.Classes.Ord a => HGit.Core.Types.Blob a -> a
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 HGit.Core.Types.$fFoldableBlob3 @ a) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$cnull :: HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk ds1 ds2 -> GHC.Types.False
                   HGit.Core.Types.Empty -> GHC.Types.True }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFoldableBlob_$ctoList :: HGit.Core.Types.Blob a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: HGit.Core.Types.Blob a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    HGit.Core.Types.$fFoldableBlob_$cfoldr' @ a @ b c n t1)) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit ::
    Data.Foldable.Foldable (HGit.Core.Types.Commit a)
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Commit a)
                  (HGit.Core.Types.$fFoldableCommit_$cfold @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldMap @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldr @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldr' @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldl @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldl' @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldr1 @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cfoldl1 @ a)
                  (HGit.Core.Types.$fFoldableCommit_$ctoList @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cnull @ a)
                  (HGit.Core.Types.$fFoldableCommit_$clength @ a)
                  (HGit.Core.Types.$fFoldableCommit_$celem @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cmaximum @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cminimum @ a)
                  (HGit.Core.Types.$fFoldableCommit_$csum @ a)
                  (HGit.Core.Types.$fFoldableCommit_$cproduct @ a) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$celem ::
    GHC.Classes.Eq a2 =>
    a2 -> HGit.Core.Types.Commit a1 a2 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a @ a1 ($dEq :: GHC.Classes.Eq a1) (eta :: a1) ->
                 let {
                   f :: a1 -> GHC.Types.Bool = GHC.Classes.== @ a1 $dEq eta
                 } in
                 (\ (ds :: HGit.Core.Types.Commit a a1) ->
                  case ds of wild {
                    HGit.Core.Types.NullCommit
                    -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                    HGit.Core.Types.Commit a2 a3 a4
                    -> case f (case a4 of wild1 { GHC.Base.:| a5 as -> a5 }) of wild1 {
                         GHC.Types.False
                         -> case a4 of wild2 { GHC.Base.:| a5 as ->
                            letrec {
                              go :: [a1] -> Data.Semigroup.Internal.Any
                                <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                              = \ (ds1 :: [a1]) ->
                                case ds1 of wild3 {
                                  []
                                  -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                                  : y ys
                                  -> case f y of wild4 {
                                       GHC.Types.False -> go ys
                                       GHC.Types.True
                                       -> GHC.Types.True
                                            `cast`
                                          (Sym (Data.Semigroup.Internal.N:Any[0])) } }
                            } in
                            go as }
                         GHC.Types.True
                         -> GHC.Types.True
                              `cast`
                            (Sym (Data.Semigroup.Internal.N:Any[0])) } })
                   `cast`
                 (<HGit.Core.Types.Commit a a1>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfold ::
    GHC.Base.Monoid m => HGit.Core.Types.Commit a m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,U,C(C1(U)),A)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ m
                   (w :: GHC.Base.Monoid m)
                   (w1 :: HGit.Core.Types.Commit a m) ->
                 case w of ww { GHC.Base.C:Monoid ww1 ww2 ww3 ww4 ->
                 HGit.Core.Types.$w$cfold @ a @ m ww2 ww3 w1 }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldMap ::
    GHC.Base.Monoid m => (a2 -> m) -> HGit.Core.Types.Commit a1 a2 -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(A,U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ m
                   @ a1
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a1 -> m)
                   (ds :: HGit.Core.Types.Commit a a1) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit -> GHC.Base.mempty @ m $dMonoid
                   HGit.Core.Types.Commit a2 a3 a4
                   -> Data.Foldable.$fFoldableNonEmpty_$cfoldMap
                        @ m
                        @ a1
                        $dMonoid
                        f
                        a4 }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldl ::
    (b -> a2 -> b) -> b -> HGit.Core.Types.Commit a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ a1
                   (f :: b -> a1 -> b)
                   (z :: b)
                   (t1 :: HGit.Core.Types.Commit a a1) ->
                 case t1 of wild {
                   HGit.Core.Types.NullCommit -> z
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> b -> b
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ (ds :: [a1]) (eta :: b) ->
                          case ds of wild2 { [] -> eta : y ys -> go ys (f eta y) }
                      } in
                      go as (f z a5) } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldl' ::
    (b -> a2 -> b) -> b -> HGit.Core.Types.Commit a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ a1
                   (f :: b -> a1 -> b)
                   (z0 :: b)
                   (xs :: HGit.Core.Types.Commit a a1) ->
                 case xs of wild {
                   HGit.Core.Types.NullCommit -> z0
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case f z0
                             (case a4 of wild1 { GHC.Base.:| a5 as -> a5 }) of vx { DEFAULT ->
                      case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> b -> b
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ (ds1 :: [a1]) (eta :: b) ->
                          case ds1 of wild2 {
                            [] -> eta : y ys -> case f eta y of vx1 { DEFAULT -> go ys vx1 } }
                      } in
                      go as vx } } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldl1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   (f :: a1 -> a1 -> a1)
                   (xs :: HGit.Core.Types.Commit a a1) ->
                 case xs of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fFoldableBlob8 @ a1
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> GHC.Maybe.Maybe a1 -> a1
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                        = \ (ds :: [a1]) (eta :: GHC.Maybe.Maybe a1) ->
                          case ds of wild2 {
                            []
                            -> case eta of wild3 {
                                 GHC.Maybe.Nothing -> HGit.Core.Types.$fFoldableBlob8 @ a1
                                 GHC.Maybe.Just v -> v }
                            : y ys
                            -> go
                                 ys
                                 (GHC.Maybe.Just
                                    @ a1
                                    (case eta of wild3 {
                                       GHC.Maybe.Nothing -> y GHC.Maybe.Just x -> f x y })) }
                      } in
                      go as (GHC.Maybe.Just @ a1 a5) } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldr ::
    (a2 -> b -> b) -> b -> HGit.Core.Types.Commit a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (f :: a1 -> b -> b)
                   (z :: b)
                   (ds :: HGit.Core.Types.Commit a a1) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit -> z
                   HGit.Core.Types.Commit a2 a3 a4
                   -> Data.Foldable.$fFoldableNonEmpty_$cfoldr @ a1 @ b f z a4 }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldr' ::
    (a2 -> b -> b) -> b -> HGit.Core.Types.Commit a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   @ b
                   (f :: a1 -> b -> b)
                   (z0 :: b)
                   (xs :: HGit.Core.Types.Commit a a1) ->
                 case xs of wild {
                   HGit.Core.Types.NullCommit -> z0
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> (b -> b) -> b -> b
                          <join 3> {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U)><L,U> -}
                        = \ (ds :: [a1]) (eta :: b -> b) (eta1 :: b) ->
                          case ds of wild2 {
                            [] -> eta eta1
                            : y ys
                            -> go
                                 ys
                                 (\ (z :: b)[OneShot] -> case f y z of vx { DEFAULT -> eta vx })
                                 eta1 }
                      } in
                      go as (\ (z :: b)[OneShot] -> f a5 z) z0 } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cfoldr1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   (f :: a1 -> a1 -> a1)
                   (xs :: HGit.Core.Types.Commit a a1) ->
                 case xs of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fFoldableBlob9 @ a1
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> GHC.Maybe.Maybe a1
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [a1]) ->
                          case ds1 of wild2 {
                            [] -> GHC.Maybe.Nothing @ a1
                            : y ys
                            -> GHC.Maybe.Just
                                 @ a1
                                 (case go ys of wild3 {
                                    GHC.Maybe.Nothing -> y GHC.Maybe.Just y1 -> f y y1 }) }
                      } in
                      case go as of wild2 {
                        GHC.Maybe.Nothing -> a5 GHC.Maybe.Just y -> f a5 y } } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$clength ::
    HGit.Core.Types.Commit a1 a2 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (w :: HGit.Core.Types.Commit a a1) ->
                 case w of wild {
                   HGit.Core.Types.NullCommit -> GHC.Types.I# 0#
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        $wgo :: [a1] -> GHC.Prim.Int# -> GHC.Types.Int
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: [2] -}
                        = \ (w1 :: [a1]) (ww :: GHC.Prim.Int#) ->
                          case w1 of wild2 {
                            [] -> GHC.Types.I# ww : y ys -> $wgo ys (GHC.Prim.+# ww 1#) }
                      } in
                      $wgo as 1# } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cmaximum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   ($dOrd :: GHC.Classes.Ord a1)
                   (x :: HGit.Core.Types.Commit a a1) ->
                 case x of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fFoldableBlob6 @ a1
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> Data.Functor.Utils.Max a1
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [a1]) ->
                          case ds of wild2 {
                            []
                            -> (GHC.Maybe.Nothing @ a1)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                            : y ys
                            -> case (go ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Max[0] <a1>_N) of wild3 {
                                 GHC.Maybe.Nothing
                                 -> (GHC.Maybe.Just @ a1 y)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                                 GHC.Maybe.Just ipv
                                 -> case GHC.Classes.>= @ a1 $dOrd y ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                                      GHC.Types.True
                                      -> (GHC.Maybe.Just @ a1 y)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N) } } }
                      } in
                      case (go as) `cast` (Data.Functor.Utils.N:Max[0] <a1>_N) of wild2 {
                        GHC.Maybe.Nothing -> a5
                        GHC.Maybe.Just ipv
                        -> case GHC.Classes.>= @ a1 $dOrd a5 ipv of wild3 {
                             GHC.Types.False -> ipv GHC.Types.True -> a5 } } } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cminimum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 2, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   ($dOrd :: GHC.Classes.Ord a1)
                   (x :: HGit.Core.Types.Commit a a1) ->
                 case x of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fFoldableBlob4 @ a1
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case a4 of wild1 { GHC.Base.:| a5 as ->
                      letrec {
                        go :: [a1] -> Data.Functor.Utils.Min a1
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [a1]) ->
                          case ds of wild2 {
                            []
                            -> (GHC.Maybe.Nothing @ a1)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                            : y ys
                            -> case (go ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Min[0] <a1>_N) of wild3 {
                                 GHC.Maybe.Nothing
                                 -> (GHC.Maybe.Just @ a1 y)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                                 GHC.Maybe.Just ipv
                                 -> case GHC.Classes.<= @ a1 $dOrd y ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                                      GHC.Types.True
                                      -> (GHC.Maybe.Just @ a1 y)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N) } } }
                      } in
                      case (go as) `cast` (Data.Functor.Utils.N:Min[0] <a1>_N) of wild2 {
                        GHC.Maybe.Nothing -> a5
                        GHC.Maybe.Just ipv
                        -> case GHC.Classes.<= @ a1 $dOrd a5 ipv of wild3 {
                             GHC.Types.False -> ipv GHC.Types.True -> a5 } } } }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cnull ::
    HGit.Core.Types.Commit a1 a2 -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (ds :: HGit.Core.Types.Commit a a1) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit -> GHC.Types.True
                   HGit.Core.Types.Commit a2 a3 a4 -> GHC.Types.False }) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$cproduct ::
    GHC.Num.Num a2 => HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,1*C1(U))>,
     Unfolding: (\ @ a @ a1 ($dNum :: GHC.Num.Num a1) ->
                 let {
                   ww2 :: a1
                   = GHC.Num.fromInteger
                       @ a1
                       $dNum
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 letrec {
                   go :: [a1] -> Data.Semigroup.Internal.Product a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a1]) ->
                     case ds of wild1 {
                       []
                       -> ww2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a1
                             $dNum
                             y
                             (go ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R)) }
                 } in
                 (\ (ds :: HGit.Core.Types.Commit a a1) ->
                  case ds of wild {
                    HGit.Core.Types.NullCommit
                    -> ww2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                    HGit.Core.Types.Commit a2 a3 a4
                    -> (GHC.Num.*
                          @ a1
                          $dNum
                          (case a4 of wild1 { GHC.Base.:| a5 as -> a5 })
                          (case a4 of wild1 { GHC.Base.:| a5 as ->
                           (go as) `cast` (Data.Semigroup.Internal.N:Product[0] <a1>_R) }))
                         `cast`
                       (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R)) })
                   `cast`
                 (<HGit.Core.Types.Commit a a1>_R
                  ->_R Data.Semigroup.Internal.N:Product[0] <a1>_R)) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$csum ::
    GHC.Num.Num a2 => HGit.Core.Types.Commit a1 a2 -> a2
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a @ a1 ($dNum :: GHC.Num.Num a1) ->
                 let {
                   ww2 :: a1
                   = GHC.Num.fromInteger
                       @ a1
                       $dNum
                       Data.Semigroup.Internal.$fSemigroupAll2
                 } in
                 letrec {
                   go :: [a1] -> Data.Semigroup.Internal.Sum a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a1]) ->
                     case ds of wild1 {
                       [] -> ww2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a1
                             $dNum
                             y
                             (go ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R)) }
                 } in
                 (\ (ds :: HGit.Core.Types.Commit a a1) ->
                  case ds of wild {
                    HGit.Core.Types.NullCommit
                    -> ww2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                    HGit.Core.Types.Commit a2 a3 a4
                    -> (GHC.Num.+
                          @ a1
                          $dNum
                          (case a4 of wild1 { GHC.Base.:| a5 as -> a5 })
                          (case a4 of wild1 { GHC.Base.:| a5 as ->
                           (go as) `cast` (Data.Semigroup.Internal.N:Sum[0] <a1>_R) }))
                         `cast`
                       (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R)) })
                   `cast`
                 (<HGit.Core.Types.Commit a a1>_R
                  ->_R Data.Semigroup.Internal.N:Sum[0] <a1>_R)) -}
34aca104485ce79d597049c5ea286be1
  $fFoldableCommit_$ctoList :: HGit.Core.Types.Commit a1 a2 -> [a2]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a @ a1 (t1 :: HGit.Core.Types.Commit a a1) ->
                 GHC.Base.build
                   @ a1
                   (\ @ b (c :: a1 -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    HGit.Core.Types.$fFoldableCommit_$cfoldr @ a @ a1 @ b c n t1)) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir :: Data.Foldable.Foldable (HGit.Core.Types.Dir a)
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Dir a)
                  (HGit.Core.Types.$fFoldableDir_$cfold @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldMap @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldr @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldr' @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldl @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldl' @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldr1 @ a)
                  (HGit.Core.Types.$fFoldableDir_$cfoldl1 @ a)
                  (HGit.Core.Types.$fFoldableDir_$ctoList @ a)
                  (HGit.Core.Types.$fFoldableDir_$cnull @ a)
                  (HGit.Core.Types.$fFoldableDir_$clength @ a)
                  (HGit.Core.Types.$fFoldableDir_$celem @ a)
                  (HGit.Core.Types.$fFoldableDir_$cmaximum @ a)
                  (HGit.Core.Types.$fFoldableDir_$cminimum @ a)
                  (HGit.Core.Types.$fFoldableDir2 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <GHC.Num.Num a1>_R
                   ->_R <HGit.Core.Types.Dir a a1>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a1>_R)
                  (HGit.Core.Types.$fFoldableDir1 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <GHC.Num.Num a1>_R
                   ->_R <HGit.Core.Types.Dir a a1>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a1>_R) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir1 ::
    GHC.Num.Num a2 =>
    HGit.Core.Types.Dir a1 a2 -> Data.Semigroup.Internal.Product a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: GHC.Num.Num a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cproduct @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir2 ::
    GHC.Num.Num a2 =>
    HGit.Core.Types.Dir a1 a2 -> Data.Semigroup.Internal.Sum a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: GHC.Num.Num a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$csum @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$celem ::
    GHC.Classes.Eq a2 =>
    a2 -> HGit.Core.Types.Dir a1 a2 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a @ a1 ($dEq :: GHC.Classes.Eq a1) (eta :: a1) ->
                 let {
                   f :: a1 -> GHC.Types.Bool = GHC.Classes.== @ a1 $dEq eta
                 } in
                 (\ (ds :: HGit.Core.Types.Dir a a1) ->
                  case ds of wild { HGit.Core.Types.Dir a2 ->
                  letrec {
                    go :: [(HGit.Core.Types.PartialFilePath,
                            HGit.Core.Types.FileTreeEntity a a1)]
                          -> Data.Semigroup.Internal.Any
                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                    = \ (ds1 :: [(HGit.Core.Types.PartialFilePath,
                                  HGit.Core.Types.FileTreeEntity a a1)]) ->
                      case ds1 of wild1 {
                        []
                        -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                        : y ys
                        -> case y of wild2 { (,) a3 a4 ->
                           case a4 of wild3 {
                             HGit.Core.Types.FileEntity a5 -> go ys
                             HGit.Core.Types.DirEntity a5
                             -> case f a5 of wild4 {
                                  GHC.Types.False -> go ys
                                  GHC.Types.True
                                  -> GHC.Types.True
                                       `cast`
                                     (Sym (Data.Semigroup.Internal.N:Any[0])) } } } }
                  } in
                  go a2 })
                   `cast`
                 (<HGit.Core.Types.Dir a a1>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfold ::
    GHC.Base.Monoid m => HGit.Core.Types.Dir a m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 HGit.Core.Types.$fFoldableDir_$cfoldMap
                   @ a
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldMap ::
    GHC.Base.Monoid m => (a2 -> m) -> HGit.Core.Types.Dir a1 a2 -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ m
                   @ a1
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a1 -> m)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldMap @ a @ m @ a1 w w1 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldl ::
    (b -> a2 -> b) -> b -> HGit.Core.Types.Dir a1 a2 -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ a1
                   (w :: b -> a1 -> b)
                   (w1 :: b)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldl @ a @ b @ a1 w w1 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldl' ::
    (b -> a2 -> b) -> b -> HGit.Core.Types.Dir a1 a2 -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ a1
                   (w :: b -> a1 -> b)
                   (w1 :: b)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldl' @ a @ b @ a1 w w1 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldl1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.Dir a1 a2 -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: a1 -> a1 -> a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldl1 @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldr ::
    (a2 -> b -> b) -> b -> HGit.Core.Types.Dir a1 a2 -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (w :: a1 -> b -> b)
                   (w1 :: b)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldr @ a @ a1 @ b w w1 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldr' ::
    (a2 -> b -> b) -> b -> HGit.Core.Types.Dir a1 a2 -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (w :: a1 -> b -> b)
                   (w1 :: b)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldr' @ a @ a1 @ b w w1 ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cfoldr1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.Dir a1 a2 -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: a1 -> a1 -> a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cfoldr1 @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$clength ::
    HGit.Core.Types.Dir a1 a2 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (w :: HGit.Core.Types.Dir a a1) ->
                 case w of ww { HGit.Core.Types.Dir ww1 ->
                 letrec {
                   $wgo :: [(HGit.Core.Types.PartialFilePath,
                             HGit.Core.Types.FileTreeEntity a a1)]
                           -> GHC.Prim.Int# -> GHC.Types.Int
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: [2] -}
                   = \ (w1 :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)])
                       (ww2 :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> GHC.Types.I# ww2
                       : y ys
                       -> case y of wild1 { (,) a2 a3 ->
                          case a3 of wild2 {
                            HGit.Core.Types.FileEntity a4 -> $wgo ys ww2
                            HGit.Core.Types.DirEntity a4 -> $wgo ys (GHC.Prim.+# ww2 1#) } } }
                 } in
                 $wgo ww1 0# }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cmaximum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.Dir a1 a2 -> a2
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: GHC.Classes.Ord a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cmaximum @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cminimum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.Dir a1 a2 -> a2
  {- Arity: 2,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (w :: GHC.Classes.Ord a1)
                   (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.$w$cminimum @ a @ a1 w ww1 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$cnull :: HGit.Core.Types.Dir a1 a2 -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (ds :: HGit.Core.Types.Dir a a1) ->
                 case ds of wild { HGit.Core.Types.Dir a2 ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> GHC.Types.Bool
                     <join 1> {- Arity: 1 -}
                   = \ (ds1 :: [(HGit.Core.Types.PartialFilePath,
                                 HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds1 of wild1 {
                       [] -> GHC.Types.True
                       : y ys
                       -> case y of wild2 { (,) a3 a4 ->
                          case a4 of wild3 {
                            HGit.Core.Types.FileEntity a5 -> go ys
                            HGit.Core.Types.DirEntity ds2 -> GHC.Types.False } } }
                 } in
                 go a2 }) -}
be80b6a731843e8b4df725ad76728847
  $fFoldableDir_$ctoList :: HGit.Core.Types.Dir a1 a2 -> [a2]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a @ a1 (t1 :: HGit.Core.Types.Dir a a1) ->
                 GHC.Base.build
                   @ a1
                   (\ @ b (c :: a1 -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    HGit.Core.Types.$fFoldableDir_$cfoldr @ a @ a1 @ b c n t1)) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity ::
    Data.Foldable.Foldable (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.FileTreeEntity a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfold @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldMap @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldr' @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldr' @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldl @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldl @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldr1 @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldl1 @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$ctoList @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cnull @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$clength @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$celem @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cmaximum @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity_$cminimum @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity2 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <GHC.Num.Num a1>_R
                   ->_R <HGit.Core.Types.FileTreeEntity a a1>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a1>_R)
                  (HGit.Core.Types.$fFoldableFileTreeEntity1 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <GHC.Num.Num a1>_R
                   ->_R <HGit.Core.Types.FileTreeEntity a a1>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a1>_R) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity1 ::
    GHC.Num.Num a2 =>
    HGit.Core.Types.FileTreeEntity a1 a2
    -> Data.Semigroup.Internal.Product a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   ($dNum :: GHC.Num.Num a1)
                   (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2
                   -> (Data.Semigroup.Internal.$fMonoidProduct2 @ a1 $dNum)
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                   HGit.Core.Types.DirEntity a2
                   -> a2
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity2 ::
    GHC.Num.Num a2 =>
    HGit.Core.Types.FileTreeEntity a1 a2
    -> Data.Semigroup.Internal.Sum a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   ($dNum :: GHC.Num.Num a1)
                   (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2
                   -> (Data.Semigroup.Internal.$fMonoidSum1 @ a1 $dNum)
                        `cast`
                      (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                   HGit.Core.Types.DirEntity a2
                   -> a2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity3 ::
    HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case x of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.$fFoldableBlob4 @ a1
                   HGit.Core.Types.DirEntity a2 -> a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity4 ::
    HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case x of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.$fFoldableBlob6 @ a1
                   HGit.Core.Types.DirEntity a2 -> a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$celem ::
    GHC.Classes.Eq a2 =>
    a2 -> HGit.Core.Types.FileTreeEntity a1 a2 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ a1 ($dEq :: GHC.Classes.Eq a1) (eta :: a1) ->
                 let {
                   f :: a1 -> GHC.Types.Bool = GHC.Classes.== @ a1 $dEq eta
                 } in
                 (\ (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                  case ds of wild {
                    HGit.Core.Types.FileEntity a2
                    -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                    HGit.Core.Types.DirEntity a2
                    -> (f a2) `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<HGit.Core.Types.FileTreeEntity a a1>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfold ::
    GHC.Base.Monoid m => HGit.Core.Types.FileTreeEntity a m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(A,1*U,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: HGit.Core.Types.FileTreeEntity a m) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a1 -> GHC.Base.mempty @ m $dMonoid
                   HGit.Core.Types.DirEntity a1 -> a1 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a2 -> m) -> HGit.Core.Types.FileTreeEntity a1 a2 -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ m
                   @ a1
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a1 -> m)
                   (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2 -> GHC.Base.mempty @ m $dMonoid
                   HGit.Core.Types.DirEntity a2 -> f a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfoldl ::
    (b -> a2 -> b) -> b -> HGit.Core.Types.FileTreeEntity a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ a1
                   (f :: b -> a1 -> b)
                   (z :: b)
                   (t1 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case t1 of wild {
                   HGit.Core.Types.FileEntity a2 -> z
                   HGit.Core.Types.DirEntity a2 -> f z a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfoldl1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (f :: a1 -> a1 -> a1)
                   (xs :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case xs of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.$fFoldableBlob8 @ a1
                   HGit.Core.Types.DirEntity a2 -> a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfoldr' ::
    (a2 -> b -> b) -> b -> HGit.Core.Types.FileTreeEntity a1 a2 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (f :: a1 -> b -> b)
                   (z0 :: b)
                   (xs :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case xs of wild {
                   HGit.Core.Types.FileEntity a2 -> z0
                   HGit.Core.Types.DirEntity a2 -> f a2 z0 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cfoldr1 ::
    (a2 -> a2 -> a2) -> HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   (f :: a1 -> a1 -> a1)
                   (xs :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case xs of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.$fFoldableBlob9 @ a1
                   HGit.Core.Types.DirEntity a2 -> a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$clength ::
    HGit.Core.Types.FileTreeEntity a1 a2 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (xs :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case xs of wild {
                   HGit.Core.Types.FileEntity a2 -> HGit.Core.Types.$fFoldableBlob7
                   HGit.Core.Types.DirEntity a2 -> GHC.Types.I# 1# }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cmaximum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ a1 ($dOrd :: GHC.Classes.Ord a1) ->
                 HGit.Core.Types.$fFoldableFileTreeEntity4 @ a @ a1) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cminimum ::
    GHC.Classes.Ord a2 => HGit.Core.Types.FileTreeEntity a1 a2 -> a2
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ a1 ($dOrd :: GHC.Classes.Ord a1) ->
                 HGit.Core.Types.$fFoldableFileTreeEntity3 @ a @ a1) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$cnull ::
    HGit.Core.Types.FileTreeEntity a1 a2 -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2 -> GHC.Types.True
                   HGit.Core.Types.DirEntity ds1 -> GHC.Types.False }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFoldableFileTreeEntity_$ctoList ::
    HGit.Core.Types.FileTreeEntity a1 a2 -> [a2]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a @ a1 (t1 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 GHC.Base.build
                   @ a1
                   (\ @ b (c :: a1 -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    HGit.Core.Types.$fFoldableFileTreeEntity_$cfoldr'
                      @ a
                      @ a1
                      @ b
                      c
                      n
                      t1)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Blob ::
    Data.Aeson.Types.FromJSON.FromJSON1 HGit.Core.Types.Blob
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fFromJSON1Blob_$cliftParseJSON
                  HGit.Core.Types.$fFromJSON1Blob_$cliftParseJSONList -}
d77f580d6e791f0a4ffe19a47a55de38
  $fFromJSON1Blob1 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:+:)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1))
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1)
            a1)
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ a1
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a1)
                   (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:*:)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String))
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1)
                             a1)
                   = Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            GHC.Generics.Par1)
                       HGit.Core.Types.$fFromJSON1Blob5
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Blob4
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Base.String)>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  GHC.Generics.Par1>_N))
                       @ a1
                       opts
                       fargs
                       value
                 } in
                 let {
                   m1 :: Data.Aeson.Types.Internal.Parser
                           (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                              a1)
                   = Data.Aeson.Types.FromJSON.$w$cparseUntaggedValue
                       @ ('GHC.Generics.MetaCons
                            "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                       @ Data.Aeson.Types.Generic.One
                       HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons
                       @ a1
                       opts
                       value
                 } in
                 (\ @ f4 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       GHC.Generics.Par1))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                a1)
                             f4
                             r) ->
                  let {
                    lvl207 :: f4 r
                    = m1
                        `cast`
                      (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                              a1>_R)
                        @ f4
                        @ r
                        path
                        kf
                        (\ (a2 :: GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                    a1) ->
                         ks
                           (GHC.Generics.R1
                              @ Type
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       GHC.Generics.Par1))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                              @ a1
                              a2))
                  } in
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <(GHC.Generics.:*:)
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Base.String))
                          (GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             GHC.Generics.Par1)
                          a1>_R)
                    @ f4
                    @ r
                    path
                    (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                       (ds1 :: GHC.Base.String) ->
                     lvl207)
                    (\ (a2 :: (GHC.Generics.:*:)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String))
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)
                                a1) ->
                     ks
                       (GHC.Generics.L1
                          @ Type
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 GHC.Base.String)
                                GHC.Generics.:*: GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   GHC.Generics.Par1))
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1)
                          @ a1
                          a2
                            `cast`
                          (Sym (GHC.Generics.N:M1[0]
                                    <Type>_N
                                    <GHC.Generics.C>_P
                                    <'GHC.Generics.MetaCons
                                       "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                    <GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Base.String)
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1>_R) <a1>_N))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <(GHC.Generics.:+:)
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     GHC.Generics.Par1))
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
                              a1>_R))) -}
21537397584285f28b80b7528f0f53ad
  $fFromJSON1Blob10 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.S1
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String)
                      GHC.Generics.:*: GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         GHC.Generics.Par1)
                   @ ('GHC.Generics.MetaCons
                        "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1Blob13
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 GHC.Generics.Par1>_N))
                   HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons1) -}
e1b2c4c8e06126f10f0a6eb8ffb12714
  $fFromJSON1Blob11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1Blob12) -}
9e84f1922c5982cbe80be0f6af6b672c
  $fFromJSON1Blob12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Chunk"#) -}
fd402f2c77a483ada8c7a5fc825a813d
  $fFromJSON1Blob13 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               GHC.Generics.Par1)
            a)
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a)
                   (contentsFieldName :: GHC.Base.String) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Object
                        -> Data.Tagged.Tagged
                             Data.Aeson.Types.Generic.False
                             (Data.Aeson.Types.Internal.Parser
                                ((GHC.Generics.:*:)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String))
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1)
                                   a))
                   = Data.Aeson.Types.FromJSON.$fFromTaggedObject''TYPEarityfFalse_$cparseFromTaggedObject''
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String)
                          GHC.Generics.:*: GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             GHC.Generics.Par1)
                       HGit.Core.Types.$fFromJSON1Blob14
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     GHC.Generics.Par1>_N))
                       @ a
                       opts
                       fargs
                       contentsFieldName
                 } in
                 (\ (x :: Data.Aeson.Types.Internal.Object) -> g x)
                   `cast`
                 (<Data.Aeson.Types.Internal.Object>_R
                  ->_R Data.Tagged.N:Tagged[0]
                           <Type>_N
                           <Data.Aeson.Types.Generic.False>_P
                           <Data.Aeson.Types.Internal.Parser
                              ((GHC.Generics.:*:)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String))
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1)
                                 a)>_R)) -}
969f506e7390f2013dbb3838fc73e11a
  $fFromJSON1Blob14 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               GHC.Generics.Par1)
            a1)
  {- Arity: 2,
     Unfolding: (Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String))
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        GHC.Generics.Par1)
                   HGit.Core.Types.$fFromJSON1Blob5
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                   HGit.Core.Types.$fFromJSON1Blob4
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1>_N))
                   Data.Aeson.Types.Generic.$fProductSizeM2
                     `cast`
                   (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                             <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                           <GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 GHC.Base.String)>_N))
                   Data.Aeson.Types.Generic.$fProductSizeM2
                     `cast`
                   (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1>_P
                             <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                           <GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              GHC.Generics.Par1>_N))) -}
0a5abc0f56d6482fb69485ffa265d3f9
  $fFromJSON1Blob15 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0 GHC.Base.String)
                   GHC.Generics.:*: GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  GHC.Generics.U1)
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarity:+:_$cparsePair
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 GHC.Base.String)
                         GHC.Generics.:*: GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            GHC.Generics.Par1))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   HGit.Core.Types.$fFromJSON1Blob17
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    GHC.Generics.Par1)>_N))
                   HGit.Core.Types.$fFromJSON1Blob16
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1>_N))) -}
44eb4ccb439904a211e62bbf2e67f06e
  $fFromJSON1Blob16 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ GHC.Generics.U1
                   HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons
                   (Data.Aeson.Types.FromJSON.$fGFromJSONarityU1_$cgParseJSON
                      @ Data.Aeson.Types.Generic.One)
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N <GHC.Generics.U1>_N))
                   (Data.Aeson.Types.FromJSON.$fGFromJSONarityU1_$cgParseJSON
                      @ Data.Aeson.Types.Generic.One)
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N <GHC.Generics.U1>_N))) -}
0492f26ad6dde27c42ce43844b7de2d4
  $fFromJSON1Blob17 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.S1
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String)
                      GHC.Generics.:*: GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         GHC.Generics.Par1)
                   HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons1
                   HGit.Core.Types.$fFromJSON1Blob14
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 GHC.Generics.Par1>_N))
                   HGit.Core.Types.$fFromJSON1Blob18
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 GHC.Generics.Par1>_N))) -}
a19e3a26375ac8b4d3a9b2113f315264
  $fFromJSON1Blob18 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               GHC.Generics.Par1)
            a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             ((GHC.Generics.:*:)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String))
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)
                                a)
                   = Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            GHC.Generics.Par1)
                       HGit.Core.Types.$fFromJSON1Blob5
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Blob4
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Base.String)>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  GHC.Generics.Par1>_N))
                       @ a
                       opts
                       fargs
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) -> g x) -}
09da63d6eb1448f0342698f53a80404c
  $fFromJSON1Blob2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1Blob3) -}
f5007c90ac3a512ee58236da2382183a
  $fFromJSON1Blob3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty"#) -}
c58c84ba503d2fcb633191720a795768
  $fFromJSON1Blob4 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1
            a1)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,1*U><L,1*U(U,A,U)><L,1*U(U)><L,A>, Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Array)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 HGit.Core.Types.$w$dFromProduct @ a1 w1 w2 w3) -}
349827a7a780b18104b5e71d5dc63458
  $fFromJSON1Blob5 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
            a1)
  {- Arity: 5, Strictness: <L,A><L,A><L,1*U(U,A,U)><L,1*U(U)><L,A>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Array)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 HGit.Core.Types.$w$dFromProduct1 @ a1 w2 w3) -}
aa88320074a11c60699b0d91870ff9b0
  $fFromJSON1Blob6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("String"#) -}
3523ef482e572291a9890b619b636961
  $fFromJSON1Blob7 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0 GHC.Base.String)
                   GHC.Generics.:*: GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  GHC.Generics.U1)
               a1))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarity:+:_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 GHC.Base.String)
                         GHC.Generics.:*: GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            GHC.Generics.Par1))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   HGit.Core.Types.$fFromJSON1Blob10
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    GHC.Generics.Par1)>_N))
                   HGit.Core.Types.$fFromJSON1Blob8
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1>_N))) -}
8fab3b48bcbb195aff194f2f9fc77eb9
  $fFromJSON1Blob8 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ GHC.Generics.U1
                   @ ('GHC.Generics.MetaCons
                        "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1Blob9
                     `cast`
                   ((forall (a :: <Type>_N).
                     <Data.Aeson.Types.Internal.Options>_R
                     ->_R <Data.Aeson.Types.FromJSON.FromArgs
                             Data.Aeson.Types.Generic.One a>_R
                     ->_R <GHC.Base.String>_R
                     ->_R <Data.Aeson.Types.Internal.Object>_R
                     ->_R Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                   <GHC.Generics.U1
                                      a>_R)) ; Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                                                        <Data.Aeson.Types.Generic.One>_N
                                                        <GHC.Generics.U1>_N))
                   HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons) -}
78bbb7a3e9882d5352ca45b67c1a219f
  $fFromJSON1Blob9 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> forall (f :: Type -> Type) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success (GHC.Generics.U1 a) f r
       -> f r
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,A><L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (7, True, True)
                (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a)
                   (contentsFieldName :: GHC.Base.String)
                   (eta :: Data.Aeson.Types.Internal.Object)
                   @ f :: Type -> Type
                   @ r
                   (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                   (eta2 :: Data.Aeson.Types.Internal.Failure f r)
                   (eta3 :: Data.Aeson.Types.Internal.Success
                              (GHC.Generics.U1 a) f r) ->
                 eta3 (GHC.Generics.U1 @ Type @ a)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Blob_$cliftParseJSON ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser (HGit.Core.Types.Blob a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (pj :: Data.Aeson.Types.Internal.Value
                          -> Data.Aeson.Types.Internal.Parser a)
                   (pjl :: Data.Aeson.Types.Internal.Value
                           -> Data.Aeson.Types.Internal.Parser [a]) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       GHC.Generics.Par1))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                a)
                   = Data.Aeson.Types.FromJSON.parseNonAllNullarySum
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons
                               "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 GHC.Base.String)
                             GHC.Generics.:*: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                GHC.Generics.Par1)
                          GHC.Generics.:+: GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                       @ a
                       HGit.Core.Types.$fFromJSON1Blob15
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Base.String)
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Empty"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1>_N))
                       HGit.Core.Types.$fFromJSON1Blob7
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Base.String)
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Empty"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1>_N))
                       HGit.Core.Types.$fFromJSON1Blob1
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromUntaggedValue[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Base.String)
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Empty"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1>_N))
                       Data.Aeson.Types.Internal.defaultOptions
                       (Data.Aeson.Types.FromJSON.$WFrom1Args @ a pj pjl)
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:+:)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    GHC.Generics.Par1))
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                             a)
                   = g x
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (HGit.Core.Types.Blob a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <(GHC.Generics.:+:)
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 GHC.Generics.Par1))
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
                          a>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       GHC.Generics.Par1))
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                a) ->
                     ks
                       (HGit.Core.Types.$fFromJSON1Blob_$cto1
                          @ a
                          a2
                            `cast`
                          (Sym (GHC.Generics.N:M1[0]
                                    <Type>_N
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Blob"
                                       "HGit.Core.Types"
                                       "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.C1
                                       ('GHC.Generics.MetaCons
                                          "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0 GHC.Base.String)
                                        GHC.Generics.:*: GHC.Generics.S1
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           GHC.Generics.Par1)
                                     GHC.Generics.:+: GHC.Generics.C1
                                                        ('GHC.Generics.MetaCons
                                                           "Empty"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R) <a>_N ; Nth:2
                                                                                        (Nth:2
                                                                                             (Nth:3
                                                                                                  (Nth:3
                                                                                                       (Inst (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                             <GHC.Generics.M1
                                                                                                                                GHC.Generics.D
                                                                                                                                ('GHC.Generics.MetaData
                                                                                                                                   "Blob"
                                                                                                                                   "HGit.Core.Types"
                                                                                                                                   "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                   'GHC.Types.False)
                                                                                                                                (GHC.Generics.C1
                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                      "Chunk"
                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                      'GHC.Types.False)
                                                                                                                                   (GHC.Generics.S1
                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                         'GHC.Maybe.Nothing
                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                      (GHC.Generics.Rec0
                                                                                                                                         GHC.Base.String)
                                                                                                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                          'GHC.Maybe.Nothing
                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                       GHC.Generics.Par1)
                                                                                                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                    ('GHC.Generics.MetaCons
                                                                                                                                                       "Empty"
                                                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                                                       'GHC.Types.False)
                                                                                                                                                    GHC.Generics.U1)
                                                                                                                                a>_R) ; (Nth:3
                                                                                                                                             (Nth:3
                                                                                                                                                  (Nth:3
                                                                                                                                                       (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                        ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                Data.Aeson.Types.Generic.One
                                                                                                                                                                a>_R
                                                                                                                                                        ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                        ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                (Sub (Sym (HGit.Core.Types.Rep1_Blob[0])) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                             <GHC.Generics.Rep1
                                                                                                                                                                                                                                HGit.Core.Types.Blob
                                                                                                                                                                                                                                a>_R)) (Coh <f5>_N
                                                                                                                                                                                                                                            (Nth:0
                                                                                                                                                                                                                                                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                           <GHC.Generics.Rep1
                                                                                                                                                                                                                                                              HGit.Core.Types.Blob
                                                                                                                                                                                                                                                              a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                           (Nth:3
                                                                                                                                                                                                                                                                                (Nth:3
                                                                                                                                                                                                                                                                                     (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                      ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                              Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                              a>_R
                                                                                                                                                                                                                                                                                      ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                      ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                              (Sub (HGit.Core.Types.Rep1_Blob[0]) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                           "Blob"
                                                                                                                                                                                                                                                                                                                                                           "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                           "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                           'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                              "Chunk"
                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                              'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                           (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                 'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                              (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                 GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                               GHC.Generics.Par1)
                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                               "Empty"
                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                               'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                            GHC.Generics.U1)
                                                                                                                                                                                                                                                                                                                                                        a>_R))))) (Coh <r>_N
                                                                                                                                                                                                                                                                                                                                                                       (Nth:0
                                                                                                                                                                                                                                                                                                                                                                            (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                            <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                                                                                               HGit.Core.Types.Blob
                                                                                                                                                                                                                                                                                                                                                                                               a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                            (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                 (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                      (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                                                                                                                                               a>_R
                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                                                                                               (Sub (HGit.Core.Types.Rep1_Blob[0]) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "Blob"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               "Chunk"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Generics.:*: GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Par1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GHC.Generics.:+: GHC.Generics.C1
enerics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "Empty"
enerics.PrefixI
ypes.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Generics.U1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         a>_R)) (Sym (Coh <f5>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (Nth:0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
enerics.Rep1
it.Core.Types.Blob
a>_R) ; (Nth:3
th:3
th:3
ata.Aeson.Types.Internal.Options>_R
ata.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Data.Aeson.Types.Generic.One
a>_R
ata.Aeson.Types.Internal.Value>_R
ata.Aeson.Types.Internal.Parser
ub (HGit.Core.Types.Rep1_Blob[0]) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
enerics.MetaData
lob"
it.Core.Types"
hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.C1
enerics.MetaCons
hunk"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Generics.PrefixI
ypes.False)
enerics.S1
enerics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Maybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GHC.Base.String)
enerics.:*: GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Generics.Par1)
enerics.:+: GHC.Generics.C1
enerics.MetaCons
mpty"
enerics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             'GHC.Types.False)
enerics.U1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      a>_R))))))))))))))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <HGit.Core.Types.Blob a>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Blob_$cliftParseJSONList ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [HGit.Core.Types.Blob a]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Blob_$cto1 ::
    GHC.Generics.Rep1 HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: GHC.Generics.Rep1 HGit.Core.Types.Blob a) ->
                 case ds
                        `cast`
                      ((Sub (HGit.Core.Types.Rep1_Blob[0]) ; GHC.Generics.N:M1[0]
                                                                 <Type>_N
                                                                 <GHC.Generics.D>_P
                                                                 <'GHC.Generics.MetaData
                                                                    "Blob"
                                                                    "HGit.Core.Types"
                                                                    "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                    'GHC.Types.False>_P
                                                                 <GHC.Generics.M1
                                                                    GHC.Generics.C
                                                                    ('GHC.Generics.MetaCons
                                                                       "Chunk"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    (GHC.Generics.M1
                                                                       GHC.Generics.S
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          GHC.Base.String)
                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Maybe.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        GHC.Generics.Par1)
                                                                  GHC.Generics.:+: GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "Empty"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False)
                                                                                     GHC.Generics.U1>_R) <a>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <Type>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    GHC.Generics.Par1>_R <a>_N) of wild1 { GHC.Generics.:*: ds2 ds3 ->
                      HGit.Core.Types.Chunk
                        @ a
                        ds2
                          `cast`
                        (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R GHC.Base.String>_R <a>_N ; GHC.Generics.N:K1[0]
                                                                              <Type>_N
                                                                              <GHC.Generics.R>_P
                                                                              <GHC.Base.String>_R
                                                                              <a>_P)
                        ds3
                          `cast`
                        (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.Par1>_R <a>_N ; GHC.Generics.N:Par1[0] <a>_R) }
                   GHC.Generics.R1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <Type>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <a>_N) of wild1 { GHC.Generics.U1 ->
                      HGit.Core.Types.Empty @ a } }) -}
734d92647512a3f39f192fa9682b5946
  $fFromJSON1Blob_$s$fConstructorMetaMetaCons ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1Blob2)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
4ceae1f4938ff9c65664ff9e4d463314
  $fFromJSON1Blob_$s$fConstructorMetaMetaCons1 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1Blob11)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit ::
    Data.Aeson.Types.FromJSON.FromJSON1 HGit.Core.Types.HashableCommit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.HashableCommit
                  HGit.Core.Types.$fFromJSON1Commit_$cliftParseJSON
                  HGit.Core.Types.$fFromJSON1Commit_$cliftParseJSONList -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit1 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:+:)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty))))
            a1)
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ a1
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a1)
                   (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1
                             a1)
                   = Data.Aeson.Types.FromJSON.$w$cparseUntaggedValue
                       @ ('GHC.Generics.MetaCons
                            "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                       @ Data.Aeson.Types.Generic.One
                       HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons
                       @ a1
                       opts
                       value
                 } in
                 let {
                   m1 :: Data.Aeson.Types.Internal.Parser
                           ((GHC.Generics.:*:)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 GHC.Base.String))
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0
                                    (Data.Functor.Const.Const
                                       Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                              a1)
                   = Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String))
                       @ (GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0
                               (Data.Functor.Const.Const
                                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                          GHC.Generics.:*: GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                       HGit.Core.Types.$fFromJSON1Commit6
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Commit3
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Commit2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.Rec0
                                                                     (Data.Functor.Const.Const
                                                                        Merkle.Types.IPFS.RawIPFSHash
                                                                        HGit.Core.Types.HashableDir))
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.Rec1
                                                                                      GHC.Base.NonEmpty)>_N))
                       @ a1
                       opts
                       fargs
                       value
                 } in
                 (\ @ f4 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0
                                                           (Data.Functor.Const.Const
                                                              Merkle.Types.IPFS.RawIPFSHash
                                                              HGit.Core.Types.HashableDir))
                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.Rec1
                                                                            GHC.Base.NonEmpty))))
                                a1)
                             f4
                             r) ->
                  let {
                    lvl207 :: f4 r
                    = m1
                        `cast`
                      (Data.Aeson.Types.Internal.N:Parser[0]
                           <(GHC.Generics.:*:)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 GHC.Base.String))
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0
                                    (Data.Functor.Const.Const
                                       Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                              a1>_R)
                        @ f4
                        @ r
                        path
                        kf
                        (\ (a2 :: (GHC.Generics.:*:)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Base.String))
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableDir))
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                    a1) ->
                         ks
                           (GHC.Generics.R1
                              @ Type
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0
                                                           (Data.Functor.Const.Const
                                                              Merkle.Types.IPFS.RawIPFSHash
                                                              HGit.Core.Types.HashableDir))
                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.Rec1
                                                                            GHC.Base.NonEmpty))))
                              @ a1
                              a2
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <Type>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.S1
                                           ('GHC.Generics.MetaSel
                                              'GHC.Maybe.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.Rec0 GHC.Base.String)
                                         GHC.Generics.:*: (GHC.Generics.S1
                                                             ('GHC.Generics.MetaSel
                                                                'GHC.Maybe.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.Rec0
                                                                (Data.Functor.Const.Const
                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                   HGit.Core.Types.HashableDir))
                                                           GHC.Generics.:*: GHC.Generics.S1
                                                                              ('GHC.Generics.MetaSel
                                                                                 'GHC.Maybe.Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.Rec1
                                                                                 GHC.Base.NonEmpty))>_R) <a1>_N)))
                  } in
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1
                          a1>_R)
                    @ f4
                    @ r
                    path
                    (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                       (ds1 :: GHC.Base.String) ->
                     lvl207)
                    (\ (a2 :: GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                                a1) ->
                     ks
                       (GHC.Generics.L1
                          @ Type
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1)
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0 GHC.Base.String)
                                GHC.Generics.:*: (GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.Rec0
                                                       (Data.Functor.Const.Const
                                                          Merkle.Types.IPFS.RawIPFSHash
                                                          HGit.Core.Types.HashableDir))
                                                  GHC.Generics.:*: GHC.Generics.S1
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Maybe.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.Rec1
                                                                        GHC.Base.NonEmpty))))
                          @ a1
                          a2)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <(GHC.Generics.:+:)
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableDir))
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec1
                                                                          GHC.Base.NonEmpty))))
                              a1>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit10 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)))
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.S1
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String)
                      GHC.Generics.:*: (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableDir))
                                        GHC.Generics.:*: GHC.Generics.S1
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.Rec1 GHC.Base.NonEmpty)))
                   @ ('GHC.Generics.MetaCons
                        "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1Commit13
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableDir))
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec1
                                                                      GHC.Base.NonEmpty))>_N))
                   HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons1) -}
f99dbd85baabe07acf382270cce31224
  $fFromJSON1Commit11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1Commit12) -}
76a791e1cb9984e18049267267f41527
  $fFromJSON1Commit12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Commit"#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit13 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0
                  (Data.Functor.Const.Const
                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
             GHC.Generics.:*: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 GHC.Base.NonEmpty))
            a)
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a)
                   (contentsFieldName :: GHC.Base.String) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Object
                        -> Data.Tagged.Tagged
                             Data.Aeson.Types.Generic.False
                             (Data.Aeson.Types.Internal.Parser
                                ((GHC.Generics.:*:)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String))
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash
                                            HGit.Core.Types.HashableDir))
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                   a))
                   = Data.Aeson.Types.FromJSON.$fFromTaggedObject''TYPEarityfFalse_$cparseFromTaggedObject''
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String)
                          GHC.Generics.:*: (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Maybe.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.Rec0
                                                 (Data.Functor.Const.Const
                                                    Merkle.Types.IPFS.RawIPFSHash
                                                    HGit.Core.Types.HashableDir))
                                            GHC.Generics.:*: GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Maybe.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.Rec1
                                                                  GHC.Base.NonEmpty)))
                       HGit.Core.Types.$fFromJSON1Commit14
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Functor.Const.Const
                                                            Merkle.Types.IPFS.RawIPFSHash
                                                            HGit.Core.Types.HashableDir))
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec1
                                                                          GHC.Base.NonEmpty))>_N))
                       @ a
                       opts
                       fargs
                       contentsFieldName
                 } in
                 (\ (x :: Data.Aeson.Types.Internal.Object) -> g x)
                   `cast`
                 (<Data.Aeson.Types.Internal.Object>_R
                  ->_R Data.Tagged.N:Tagged[0]
                           <Type>_N
                           <Data.Aeson.Types.Generic.False>_P
                           <Data.Aeson.Types.Internal.Parser
                              ((GHC.Generics.:*:)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String))
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                 a)>_R)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit14 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0
                  (Data.Functor.Const.Const
                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
             GHC.Generics.:*: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 GHC.Base.NonEmpty))
            a1)
  {- Arity: 2,
     Unfolding: (Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String))
                   @ (GHC.Generics.S1
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                      GHC.Generics.:*: GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                   HGit.Core.Types.$fFromJSON1Commit6
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                   HGit.Core.Types.$fFromJSON1Commit3
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_N))
                   Data.Aeson.Types.Generic.$fProductSizeM2
                     `cast`
                   (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                             <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                           <GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 GHC.Base.String)>_N))
                   HGit.Core.Types.$fFromJSON1Commit2
                     `cast`
                   (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_P
                             <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                           <GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec0
                                                                 (Data.Functor.Const.Const
                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                    HGit.Core.Types.HashableDir))
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  'GHC.Maybe.Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.Rec1
                                                                                  GHC.Base.NonEmpty)>_N))) -}
623676a00454f02a643effcf804c7647
  $fFromJSON1Commit15 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ GHC.Generics.U1
                   @ ('GHC.Generics.MetaCons
                        "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1Blob9
                     `cast`
                   ((forall (a :: <Type>_N).
                     <Data.Aeson.Types.Internal.Options>_R
                     ->_R <Data.Aeson.Types.FromJSON.FromArgs
                             Data.Aeson.Types.Generic.One a>_R
                     ->_R <GHC.Base.String>_R
                     ->_R <Data.Aeson.Types.Internal.Object>_R
                     ->_R Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                   <GHC.Generics.U1
                                      a>_R)) ; Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                                                        <Data.Aeson.Types.Generic.One>_N
                                                        <GHC.Generics.U1>_N))
                   HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit16 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  GHC.Generics.U1)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0 GHC.Base.String)
                   GHC.Generics.:*: (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableDir))
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec1 GHC.Base.NonEmpty))))
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarity:+:_$cparsePair
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 GHC.Base.String)
                         GHC.Generics.:*: (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableDir))
                                           GHC.Generics.:*: GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec1
                                                                 GHC.Base.NonEmpty))))
                   HGit.Core.Types.$fFromJSON1Commit19
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1>_N))
                   HGit.Core.Types.$fFromJSON1Commit17
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (Data.Functor.Const.Const
                                                           Merkle.Types.IPFS.RawIPFSHash
                                                           HGit.Core.Types.HashableDir))
                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec1
                                                                         GHC.Base.NonEmpty)))>_N))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit17 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)))
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.S1
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0 GHC.Base.String)
                      GHC.Generics.:*: (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.HashableDir))
                                        GHC.Generics.:*: GHC.Generics.S1
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.Rec1 GHC.Base.NonEmpty)))
                   HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons1
                   HGit.Core.Types.$fFromJSON1Commit14
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableDir))
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec1
                                                                      GHC.Base.NonEmpty))>_N))
                   HGit.Core.Types.$fFromJSON1Commit18
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableDir))
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec1
                                                                      GHC.Base.NonEmpty))>_N))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit18 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0
                  (Data.Functor.Const.Const
                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
             GHC.Generics.:*: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 GHC.Base.NonEmpty))
            a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             ((GHC.Generics.:*:)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String))
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Functor.Const.Const
                                         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                                 GHC.Generics.:*: GHC.Generics.S1
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                a)
                   = Data.Aeson.Types.FromJSON.$fGFromJSONarity:*:_$cgParseJSON
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String))
                       @ (GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0
                               (Data.Functor.Const.Const
                                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                          GHC.Generics.:*: GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                       HGit.Core.Types.$fFromJSON1Commit6
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Commit3
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_N))
                       Data.Aeson.Types.Generic.$fProductSizeM2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Base.String)>_N))
                       HGit.Core.Types.$fFromJSON1Commit2
                         `cast`
                       (Sym (Data.Aeson.Types.Generic.N:Tagged2[0]
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash
                                          HGit.Core.Types.HashableDir))
                                  GHC.Generics.:*: GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_P
                                 <GHC.Types.Int>_R) ; Sym (Data.Aeson.Types.Generic.N:ProductSize[0]
                                                               <GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.Rec0
                                                                     (Data.Functor.Const.Const
                                                                        Merkle.Types.IPFS.RawIPFSHash
                                                                        HGit.Core.Types.HashableDir))
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.Rec1
                                                                                      GHC.Base.NonEmpty)>_N))
                       @ a
                       opts
                       fargs
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) -> g x) -}
439e0faf8677a62427a1507af81c1ef1
  $fFromJSON1Commit19 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ GHC.Generics.U1
                   HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons
                   (Data.Aeson.Types.FromJSON.$fGFromJSONarityU1_$cgParseJSON
                      @ Data.Aeson.Types.Generic.One)
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N <GHC.Generics.U1>_N))
                   (Data.Aeson.Types.FromJSON.$fGFromJSONarityU1_$cgParseJSON
                      @ Data.Aeson.Types.Generic.One)
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N <GHC.Generics.U1>_N))) -}
4e2f01f38458efa0952d42d4e72fa43b
  $fFromJSON1Commit2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit3 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:*:)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec0
                  (Data.Functor.Const.Const
                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir)))
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.Rec1 GHC.Base.NonEmpty))
            a1)
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromProductarity:*:_$cparseProduct
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir)))
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                   HGit.Core.Types.$fFromJSON1Commit5
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash
                                      HGit.Core.Types.HashableDir))>_N))
                   HGit.Core.Types.$fFromJSON1Commit4
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromProduct[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec1 GHC.Base.NonEmpty)>_N))) -}
9a344e5236fa80aadab3264988bcc1cd
  $fFromJSON1Commit4 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec1 GHC.Base.NonEmpty)
            a1)
  {- Arity: 5, Strictness: <L,A><L,1*U><L,1*U(U,A,U)><L,1*U(U)><L,A>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Array)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 HGit.Core.Types.$w$dFromProduct2 @ a1 w1 w2 w3) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit5 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
            a1)
  {- Arity: 5, Strictness: <L,A><L,A><L,1*U(U,A,U)><L,1*U(U)><L,A>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Array)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 HGit.Core.Types.$w$dFromProduct3 @ a1 w2 w3) -}
003395f2366c9e2b8265bea94f5eadd8
  $fFromJSON1Commit6 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
            a1)
  {- Arity: 5, Strictness: <L,A><L,A><L,1*U(U,A,U)><L,1*U(U)><L,A>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Array)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Types.Int) ->
                 HGit.Core.Types.$w$dFromProduct4 @ a1 w2 w3) -}
14c39b4cdfbdb03da72e68b62b68051f
  $fFromJSON1Commit7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1Commit8) -}
a9906472c8b534db9c94402a3a549b4d
  $fFromJSON1Commit8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NullCommit"#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit9 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  GHC.Generics.U1)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0 GHC.Base.String)
                   GHC.Generics.:*: (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash
                                             HGit.Core.Types.HashableDir))
                                     GHC.Generics.:*: GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec1 GHC.Base.NonEmpty))))
               a1))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarity:+:_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 GHC.Base.String)
                         GHC.Generics.:*: (GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0
                                                (Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.HashableDir))
                                           GHC.Generics.:*: GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec1
                                                                 GHC.Base.NonEmpty))))
                   HGit.Core.Types.$fFromJSON1Commit15
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1>_N))
                   HGit.Core.Types.$fFromJSON1Commit10
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (Data.Functor.Const.Const
                                                           Merkle.Types.IPFS.RawIPFSHash
                                                           HGit.Core.Types.HashableDir))
                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec1
                                                                         GHC.Base.NonEmpty)))>_N))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit_$cliftParseJSON ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (HGit.Core.Types.HashableCommit a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (pj :: Data.Aeson.Types.Internal.Value
                          -> Data.Aeson.Types.Internal.Parser a)
                   (pjl :: Data.Aeson.Types.Internal.Value
                           -> Data.Aeson.Types.Internal.Parser [a]) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0
                                                           (Data.Functor.Const.Const
                                                              Merkle.Types.IPFS.RawIPFSHash
                                                              HGit.Core.Types.HashableDir))
                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.Rec1
                                                                            GHC.Base.NonEmpty))))
                                a)
                   = Data.Aeson.Types.FromJSON.parseNonAllNullarySum
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons
                               "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            GHC.Generics.U1
                          GHC.Generics.:+: GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 GHC.Base.String)
                                              GHC.Generics.:*: (GHC.Generics.S1
                                                                  ('GHC.Generics.MetaSel
                                                                     'GHC.Maybe.Nothing
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.Rec0
                                                                     (Data.Functor.Const.Const
                                                                        Merkle.Types.IPFS.RawIPFSHash
                                                                        HGit.Core.Types.HashableDir))
                                                                GHC.Generics.:*: GHC.Generics.S1
                                                                                   ('GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.Rec1
                                                                                      GHC.Base.NonEmpty))))
                       @ a
                       HGit.Core.Types.$fFromJSON1Commit16
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Commit"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0 GHC.Base.String)
                                                      GHC.Generics.:*: (GHC.Generics.S1
                                                                          ('GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.Rec0
                                                                             (Data.Functor.Const.Const
                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                HGit.Core.Types.HashableDir))
                                                                        GHC.Generics.:*: GHC.Generics.S1
                                                                                           ('GHC.Generics.MetaSel
                                                                                              'GHC.Maybe.Nothing
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.Rec1
                                                                                              GHC.Base.NonEmpty)))>_N))
                       HGit.Core.Types.$fFromJSON1Commit9
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Commit"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0 GHC.Base.String)
                                                      GHC.Generics.:*: (GHC.Generics.S1
                                                                          ('GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.Rec0
                                                                             (Data.Functor.Const.Const
                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                HGit.Core.Types.HashableDir))
                                                                        GHC.Generics.:*: GHC.Generics.S1
                                                                                           ('GHC.Generics.MetaSel
                                                                                              'GHC.Maybe.Nothing
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.Rec1
                                                                                              GHC.Base.NonEmpty)))>_N))
                       HGit.Core.Types.$fFromJSON1Commit1
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromUntaggedValue[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Commit"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0 GHC.Base.String)
                                                      GHC.Generics.:*: (GHC.Generics.S1
                                                                          ('GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.Rec0
                                                                             (Data.Functor.Const.Const
                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                HGit.Core.Types.HashableDir))
                                                                        GHC.Generics.:*: GHC.Generics.S1
                                                                                           ('GHC.Generics.MetaSel
                                                                                              'GHC.Maybe.Nothing
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.Rec1
                                                                                              GHC.Base.NonEmpty)))>_N))
                       Data.Aeson.Types.Internal.defaultOptions
                       (Data.Aeson.Types.FromJSON.$WFrom1Args @ a pj pjl)
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:+:)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (Data.Functor.Const.Const
                                                           Merkle.Types.IPFS.RawIPFSHash
                                                           HGit.Core.Types.HashableDir))
                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec1
                                                                         GHC.Base.NonEmpty))))
                             a)
                   = g x
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (HGit.Core.Types.HashableCommit a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <(GHC.Generics.:+:)
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: (GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.HashableDir))
                                                GHC.Generics.:*: GHC.Generics.S1
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec1
                                                                      GHC.Base.NonEmpty))))
                          a>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Base.String)
                                    GHC.Generics.:*: (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.Rec0
                                                           (Data.Functor.Const.Const
                                                              Merkle.Types.IPFS.RawIPFSHash
                                                              HGit.Core.Types.HashableDir))
                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.Rec1
                                                                            GHC.Base.NonEmpty))))
                                a) ->
                     ks
                       (HGit.Core.Types.$fFromJSON1Commit_$cto1
                          @ (Data.Functor.Const.Const
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir)
                          @ a
                          a2
                            `cast`
                          (Sym (GHC.Generics.N:M1[0]
                                    <Type>_N
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Commit"
                                       "HGit.Core.Types"
                                       "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.C1
                                       ('GHC.Generics.MetaCons
                                          "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.C1
                                                        ('GHC.Generics.MetaCons
                                                           "Commit"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.S1
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.Rec0 GHC.Base.String)
                                                         GHC.Generics.:*: (GHC.Generics.S1
                                                                             ('GHC.Generics.MetaSel
                                                                                'GHC.Maybe.Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.Rec0
                                                                                (Data.Functor.Const.Const
                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                   HGit.Core.Types.HashableDir))
                                                                           GHC.Generics.:*: GHC.Generics.S1
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'GHC.Maybe.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.Rec1
                                                                                                 GHC.Base.NonEmpty)))>_R) <a>_N ; Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Nth:3
                                                                                                                                                (Nth:3
                                                                                                                                                     (Inst (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                                              GHC.Generics.D
                                                                                                                                                                              ('GHC.Generics.MetaData
                                                                                                                                                                                 "Commit"
                                                                                                                                                                                 "HGit.Core.Types"
                                                                                                                                                                                 "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                 'GHC.Types.False)
                                                                                                                                                                              (GHC.Generics.C1
                                                                                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                                                                                    "NullCommit"
                                                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                                                    'GHC.Types.False)
                                                                                                                                                                                 GHC.Generics.U1
                                                                                                                                                                               GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                                                                                     "Commit"
                                                                                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                                                                                     'GHC.Types.False)
                                                                                                                                                                                                  (GHC.Generics.S1
                                                                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                                                                        'GHC.Maybe.Nothing
                                                                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                     (GHC.Generics.Rec0
                                                                                                                                                                                                        GHC.Base.String)
                                                                                                                                                                                                   GHC.Generics.:*: (GHC.Generics.S1
                                                                                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                                                                                          'GHC.Maybe.Nothing
                                                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                       (GHC.Generics.Rec0
                                                                                                                                                                                                                          (Data.Functor.Const.Const
                                                                                                                                                                                                                             Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                             HGit.Core.Types.HashableDir))
                                                                                                                                                                                                                     GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                           'GHC.Maybe.Nothing
                                                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                        (GHC.Generics.Rec1
                                                                                                                                                                                                                                           GHC.Base.NonEmpty))))
                                                                                                                                                                              a>_R) ; (Nth:3
                                                                                                                                                                                           (Nth:3
                                                                                                                                                                                                (Nth:3
                                                                                                                                                                                                     (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                      ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                              Data.Aeson.Types.Generic.One
                                                                                                                                                                                                              a>_R
                                                                                                                                                                                                      ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                      ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                              (Sub (Sym (HGit.Core.Types.Rep1_Commit[0]
                                                                                                                                                                                                                             <Data.Functor.Const.Const
                                                                                                                                                                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                HGit.Core.Types.HashableDir>_N)) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                    <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                       HGit.Core.Types.HashableCommit
                                                                                                                                                                                                                                                                                       a>_R)) (Coh <f5>_N
                                                                                                                                                                                                                                                                                                   (Nth:0
                                                                                                                                                                                                                                                                                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                  <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                     HGit.Core.Types.HashableCommit
                                                                                                                                                                                                                                                                                                                     a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                                                                  (Nth:3
                                                                                                                                                                                                                                                                                                                                       (Nth:3
                                                                                                                                                                                                                                                                                                                                            (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                                                                             ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                     Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                                                                     a>_R
                                                                                                                                                                                                                                                                                                                                             ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                                                                             ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                     (Sub (HGit.Core.Types.Rep1_Commit[0]
                                                                                                                                                                                                                                                                                                                                                               <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                  Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                  HGit.Core.Types.HashableDir>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                        GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                                                                                           "Commit"
                                                                                                                                                                                                                                                                                                                                                                                                                           "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                                                                           "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                              "NullCommit"
                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                              'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                           GHC.Generics.U1
                                                                                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                               "Commit"
                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                            (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                               (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GHC.Base.String)
                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Generics.:*: (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HGit.Core.Types.HashableDir))
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (GHC.Generics.Rec1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.NonEmpty))))
                                                                                                                                                                                                                                                                                                                                                                                                                        a>_R))))) (Coh <r>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                       (Nth:0
                                                                                                                                                                                                                                                                                                                                                                                                                                            (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                            <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                                                                                                                                                               HGit.Core.Types.HashableCommit
                                                                                                                                                                                                                                                                                                                                                                                                                                                               a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               a>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Sub (HGit.Core.Types.Rep1_Commit[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            HGit.Core.Types.HashableDir>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ('GHC.Generics.MetaData
ommit"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "HGit.Core.Types"
hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.C1
enerics.MetaCons
ullCommit"
enerics.PrefixI
ypes.False)
enerics.U1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GHC.Generics.:+: GHC.Generics.C1
enerics.MetaCons
ommit"
enerics.PrefixI
ypes.False)
enerics.S1
enerics.MetaSel
aybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
ase.String)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GHC.Generics.:*: (GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.HashableDir))
enerics.:*: GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
enerics.Rec1
ase.NonEmpty))))
a>_R)) (Sym (Coh <f5>_N
th:0
ym (Data.Aeson.Types.Internal.N:Parser[0]
enerics.Rep1
it.Core.Types.HashableCommit
a>_R) ; (Nth:3
th:3
th:3
ata.Aeson.Types.Internal.Options>_R
ata.Aeson.Types.FromJSON.FromArgs
ata.Aeson.Types.Generic.One
a>_R
ata.Aeson.Types.Internal.Value>_R
ata.Aeson.Types.Internal.Parser
ub (HGit.Core.Types.Rep1_Commit[0]
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.HashableDir>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
enerics.MetaData
ommit"
it.Core.Types"
hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.C1
enerics.MetaCons
ullCommit"
enerics.PrefixI
ypes.False)
enerics.U1
enerics.:+: GHC.Generics.C1
enerics.MetaCons
ommit"
enerics.PrefixI
ypes.False)
enerics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
ase.String)
enerics.:*: (GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
ata.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Merkle.Types.IPFS.RawIPFSHash
it.Core.Types.HashableDir))
enerics.:*: GHC.Generics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec1
ase.NonEmpty))))
a>_R))))))))))))))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <HGit.Core.Types.HashableCommit a>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Commit_$cliftParseJSONList ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [HGit.Core.Types.HashableCommit a]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
34aca104485ce79d597049c5ea286be1
  $fFromJSON1Commit_$cto1 ::
    GHC.Generics.Rep1 (HGit.Core.Types.Commit a1) a2
    -> HGit.Core.Types.Commit a1 a2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ a1
                   (ds :: GHC.Generics.Rep1 (HGit.Core.Types.Commit a) a1) ->
                 case ds
                        `cast`
                      ((Sub (HGit.Core.Types.Rep1_Commit[0] <a>_N) ; GHC.Generics.N:M1[0]
                                                                         <Type>_N
                                                                         <GHC.Generics.D>_P
                                                                         <'GHC.Generics.MetaData
                                                                            "Commit"
                                                                            "HGit.Core.Types"
                                                                            "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                            'GHC.Types.False>_P
                                                                         <GHC.Generics.M1
                                                                            GHC.Generics.C
                                                                            ('GHC.Generics.MetaCons
                                                                               "NullCommit"
                                                                               'GHC.Generics.PrefixI
                                                                               'GHC.Types.False)
                                                                            GHC.Generics.U1
                                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "Commit"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.False)
                                                                                             (GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   'GHC.Maybe.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   GHC.Base.String)
                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     'GHC.Maybe.Nothing
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     a)
                                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                   GHC.Generics.S
                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                      'GHC.Maybe.Nothing
                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                   (GHC.Generics.Rec1
                                                                                                                                      GHC.Base.NonEmpty)))>_R) <a1>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <Type>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <a1>_N) of wild1 { GHC.Generics.U1 ->
                      HGit.Core.Types.NullCommit @ a @ a1 }
                   GHC.Generics.R1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <Type>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1 GHC.Generics.R a)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec1
                                                                         GHC.Base.NonEmpty))>_R <a1>_N) of wild1 { GHC.Generics.:*: ds2 ds3 ->
                      case ds3 of wild2 { GHC.Generics.:*: ds4 ds5 ->
                      HGit.Core.Types.Commit
                        @ a
                        @ a1
                        ds2
                          `cast`
                        (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R GHC.Base.String>_R <a1>_N ; GHC.Generics.N:K1[0]
                                                                               <Type>_N
                                                                               <GHC.Generics.R>_P
                                                                               <GHC.Base.String>_R
                                                                               <a1>_P)
                        ds4
                          `cast`
                        (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R a>_R <a1>_N ; GHC.Generics.N:K1[0]
                                                                               <Type>_N
                                                                               <GHC.Generics.R>_P
                                                                               <a>_R
                                                                               <a1>_P)
                        ds5
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <Type>_N
                              <GHC.Generics.S>_P
                              <'GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy>_P
                              <GHC.Generics.Rec1 GHC.Base.NonEmpty>_R ; GHC.Generics.N:Rec1[0]
                                                                            <Type>_N
                                                                            <GHC.Base.NonEmpty>_R) <a1>_N) } } }) -}
8f445769847f1f2ac0f75980df91937c
  $fFromJSON1Commit_$s$fConstructorMetaMetaCons ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1Commit7)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
18d6dc81535ec689190596ba0d804029
  $fFromJSON1Commit_$s$fConstructorMetaMetaCons1 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1Commit11)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Dir ::
    Data.Aeson.Types.FromJSON.FromJSON1
      (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob))
                  HGit.Core.Types.$fFromJSON1Dir_$cliftParseJSON
                  HGit.Core.Types.$fFromJSON1Dir_$cliftParseJSONList -}
b63f380d203e991ae3ac3674219b10b6
  $fFromJSON1Dir1 ::
    (GHC.Generics.:.:)
      ((,) HGit.Core.Types.PartialFilePath)
      (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a2))
      a1
    -> (HGit.Core.Types.PartialFilePath,
        HGit.Core.Types.FileTreeEntity a2 a1)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ a1
                   (x :: (GHC.Generics.:.:)
                           ((,) HGit.Core.Types.PartialFilePath)
                           (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a1))
                           a) ->
                 case x `cast`
                      (GHC.Generics.N::.:[0]
                           <Type>_N
                           <Type>_N
                           <(,) HGit.Core.Types.PartialFilePath>_R
                           <GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a1)>_N
                           <a>_N) of wild { (,) x1 y ->
                 (x1,
                  y `cast`
                  (GHC.Generics.N:Rec1[0]
                       <Type>_N <HGit.Core.Types.FileTreeEntity a1>_R <a>_N)) }) -}
36d73f88f5753350507dfff02cc7e97f
  $fFromJSON1Dir2 :: Data.Aeson.Types.Internal.Options
  {- Strictness: m,
     Unfolding: (Data.Aeson.Types.Internal.Options
                   (GHC.Base.id @ GHC.Base.String)
                   (GHC.Base.id @ GHC.Base.String)
                   GHC.Types.True
                   GHC.Types.False
                   Data.Aeson.Types.Internal.defaultTaggedObject
                   GHC.Types.False
                   GHC.Types.False) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Dir3 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Maybe.Just "dirEntries")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            ([]
             GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                               GHC.Generics.:.: GHC.Generics.Rec1
                                                  (HGit.Core.Types.FileTreeEntity
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.Blob))))
            a)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U,U,1*U,U)><L,U>,
     Unfolding: (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Tagged.Tagged
                             Data.Aeson.Types.Generic.True
                             (Data.Aeson.Types.Internal.Parser
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Maybe.Just "dirEntries")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   ([]
                                    GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                      GHC.Generics.:.: GHC.Generics.Rec1
                                                                         (HGit.Core.Types.FileTreeEntity
                                                                            (Data.Functor.Const.Const
                                                                               Merkle.Types.IPFS.RawIPFSHash
                                                                               HGit.Core.Types.Blob))))
                                   a))
                   = case opts of ww { Data.Aeson.Types.Internal.Options ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                     case ww6 of wild {
                       GHC.Types.False
                       -> let {
                            g3 :: Data.Aeson.Types.Internal.Object
                                  -> Data.Aeson.Types.Internal.Parser
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Maybe.Just "dirEntries")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          ([]
                                           GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                             GHC.Generics.:.: GHC.Generics.Rec1
                                                                                (HGit.Core.Types.FileTreeEntity
                                                                                   (Data.Functor.Const.Const
                                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                                      HGit.Core.Types.Blob))))
                                          a)
                            = Data.Aeson.Types.FromJSON.$fFromRecordarityM11_$cparseRecord
                                @ ('GHC.Generics.MetaSel
                                     ('GHC.Maybe.Just "dirEntries")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                @ Data.Aeson.Types.Generic.One
                                @ ([]
                                   GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                     GHC.Generics.:.: GHC.Generics.Rec1
                                                                        (HGit.Core.Types.FileTreeEntity
                                                                           (Data.Functor.Const.Const
                                                                              Merkle.Types.IPFS.RawIPFSHash
                                                                              HGit.Core.Types.Blob))))
                                HGit.Core.Types.$fFromJSON1Dir_$s$fSelectorMetaMetaSel
                                HGit.Core.Types.$fFromJSON1Dir4
                                  `cast`
                                (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                          <Data.Aeson.Types.Generic.One>_N
                                          <[]
                                           GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                             GHC.Generics.:.: GHC.Generics.Rec1
                                                                                (HGit.Core.Types.FileTreeEntity
                                                                                   (Data.Functor.Const.Const
                                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                                      HGit.Core.Types.Blob)))>_N))
                                @ a
                                (Data.Aeson.Types.Internal.Options
                                   ww1
                                   ww2
                                   ww3
                                   ww4
                                   ww5
                                   GHC.Types.False
                                   ww7)
                                fargs
                          } in
                          (\ (x :: Data.Aeson.Types.Internal.Value) ->
                           case x of wild1 {
                             DEFAULT
                             -> Data.Aeson.Types.FromJSON.typeMismatch
                                  @ (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          ('GHC.Maybe.Just "dirEntries")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       ([]
                                        GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                          GHC.Generics.:.: GHC.Generics.Rec1
                                                                             (HGit.Core.Types.FileTreeEntity
                                                                                (Data.Functor.Const.Const
                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                   HGit.Core.Types.Blob))))
                                       a)
                                  Data.Aeson.Types.FromJSON.$fConsFromJSON'TYPEarityM1True1
                                  wild1
                             Data.Aeson.Types.Internal.Object obj -> g3 obj })
                            `cast`
                          (<Data.Aeson.Types.Internal.Value>_R
                           ->_R Sym (Data.Tagged.N:Tagged[0]
                                         <Type>_N
                                         <Data.Aeson.Types.Generic.True>_P
                                         <Data.Aeson.Types.Internal.Parser
                                            (GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Maybe.Just "dirEntries")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               ([]
                                                GHC.Generics.:.: ((,)
                                                                    HGit.Core.Types.PartialFilePath
                                                                  GHC.Generics.:.: GHC.Generics.Rec1
                                                                                     (HGit.Core.Types.FileTreeEntity
                                                                                        (Data.Functor.Const.Const
                                                                                           Merkle.Types.IPFS.RawIPFSHash
                                                                                           HGit.Core.Types.Blob))))
                                               a)>_R))
                       GHC.Types.True
                       -> let {
                            g3 :: Data.Aeson.Types.Internal.Value
                                  -> Data.Aeson.Types.Internal.Parser
                                       ((GHC.Generics.:.:)
                                          []
                                          ((,) HGit.Core.Types.PartialFilePath
                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                              (HGit.Core.Types.FileTreeEntity
                                                                 (Data.Functor.Const.Const
                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                    HGit.Core.Types.Blob)))
                                          a)
                            = HGit.Core.Types.$w$dGFromJSON @ a fargs
                          } in
                          (\ (x :: Data.Aeson.Types.Internal.Value) ->
                           let {
                             m :: Data.Aeson.Types.Internal.Parser
                                    ((GHC.Generics.:.:)
                                       []
                                       ((,) HGit.Core.Types.PartialFilePath
                                        GHC.Generics.:.: GHC.Generics.Rec1
                                                           (HGit.Core.Types.FileTreeEntity
                                                              (Data.Functor.Const.Const
                                                                 Merkle.Types.IPFS.RawIPFSHash
                                                                 HGit.Core.Types.Blob)))
                                       a)
                             = g3 x
                           } in
                           (\ @ f5 :: Type -> Type
                              @ r
                              (path :: Data.Aeson.Types.Internal.JSONPath)
                              (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                              (ks :: Data.Aeson.Types.Internal.Success
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Maybe.Just "dirEntries")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          ([]
                                           GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                             GHC.Generics.:.: GHC.Generics.Rec1
                                                                                (HGit.Core.Types.FileTreeEntity
                                                                                   (Data.Functor.Const.Const
                                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                                      HGit.Core.Types.Blob))))
                                          a)
                                       f5
                                       r) ->
                            m `cast`
                            (Data.Aeson.Types.Internal.N:Parser[0]
                                 <(GHC.Generics.:.:)
                                    []
                                    ((,) HGit.Core.Types.PartialFilePath
                                     GHC.Generics.:.: GHC.Generics.Rec1
                                                        (HGit.Core.Types.FileTreeEntity
                                                           (Data.Functor.Const.Const
                                                              Merkle.Types.IPFS.RawIPFSHash
                                                              HGit.Core.Types.Blob)))
                                    a>_R)
                              @ f5
                              @ r
                              path
                              kf
                              (\ (a2 :: (GHC.Generics.:.:)
                                          []
                                          ((,) HGit.Core.Types.PartialFilePath
                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                              (HGit.Core.Types.FileTreeEntity
                                                                 (Data.Functor.Const.Const
                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                    HGit.Core.Types.Blob)))
                                          a) ->
                               ks
                                 a2
                                   `cast`
                                 (Sym (GHC.Generics.N:M1[0]
                                           <Type>_N
                                           <GHC.Generics.S>_P
                                           <'GHC.Generics.MetaSel
                                              ('GHC.Maybe.Just "dirEntries")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy>_P
                                           <[]
                                            GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                              GHC.Generics.:.: GHC.Generics.Rec1
                                                                                 (HGit.Core.Types.FileTreeEntity
                                                                                    (Data.Functor.Const.Const
                                                                                       Merkle.Types.IPFS.RawIPFSHash
                                                                                       HGit.Core.Types.Blob)))>_R) <a>_N)))
                             `cast`
                           (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Maybe.Just "dirEntries")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        ([]
                                         GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                                              (HGit.Core.Types.FileTreeEntity
                                                                                 (Data.Functor.Const.Const
                                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                                    HGit.Core.Types.Blob))))
                                        a>_R)))
                            `cast`
                          (<Data.Aeson.Types.Internal.Value>_R
                           ->_R Sym (Data.Tagged.N:Tagged[0]
                                         <Type>_N
                                         <Data.Aeson.Types.Generic.True>_P
                                         <Data.Aeson.Types.Internal.Parser
                                            (GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Maybe.Just "dirEntries")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               ([]
                                                GHC.Generics.:.: ((,)
                                                                    HGit.Core.Types.PartialFilePath
                                                                  GHC.Generics.:.: GHC.Generics.Rec1
                                                                                     (HGit.Core.Types.FileTreeEntity
                                                                                        (Data.Functor.Const.Const
                                                                                           Merkle.Types.IPFS.RawIPFSHash
                                                                                           HGit.Core.Types.Blob))))
                                               a)>_R)) } }
                 } in
                 (\ (x :: Data.Aeson.Types.Internal.Value) -> g x)
                   `cast`
                 (<Data.Aeson.Types.Internal.Value>_R
                  ->_R Data.Tagged.N:Tagged[0]
                           <Type>_N
                           <Data.Aeson.Types.Generic.True>_P
                           <Data.Aeson.Types.Internal.Parser
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Maybe.Just "dirEntries")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 ([]
                                  GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                    GHC.Generics.:.: GHC.Generics.Rec1
                                                                       (HGit.Core.Types.FileTreeEntity
                                                                          (Data.Functor.Const.Const
                                                                             Merkle.Types.IPFS.RawIPFSHash
                                                                             HGit.Core.Types.Blob))))
                                 a)>_R)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Dir4 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:.:)
            []
            ((,) HGit.Core.Types.PartialFilePath
             GHC.Generics.:.: GHC.Generics.Rec1
                                (HGit.Core.Types.FileTreeEntity
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
            a)
  {- Arity: 2, Strictness: <L,A><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a) ->
                 HGit.Core.Types.$w$dGFromJSON @ a w1) -}
146038cd61fab5492555c143c6cc0f32
  $fFromJSON1Dir5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1Dir6) -}
9d488de9788de0b18784842f60a6998c
  $fFromJSON1Dir6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dirEntries"#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Dir_$cliftParseJSON ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (pj :: Data.Aeson.Types.Internal.Value
                          -> Data.Aeson.Types.Internal.Parser a)
                   (pjl :: Data.Aeson.Types.Internal.Value
                           -> Data.Aeson.Types.Internal.Parser [a]) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Maybe.Just "dirEntries")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                ([]
                                 GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                   GHC.Generics.:.: GHC.Generics.Rec1
                                                                      (HGit.Core.Types.FileTreeEntity
                                                                         (Data.Functor.Const.Const
                                                                            Merkle.Types.IPFS.RawIPFSHash
                                                                            HGit.Core.Types.Blob))))
                                a)
                   = HGit.Core.Types.$fFromJSON1Dir3
                       @ a
                       HGit.Core.Types.$fFromJSON1Dir2
                       (Data.Aeson.Types.FromJSON.From1Args
                          @ Data.Aeson.Types.Generic.One
                          @ a
                          @~ <Data.Aeson.Types.Generic.One>_N
                          pj
                          pjl)
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Maybe.Just "dirEntries")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             ([]
                              GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                GHC.Generics.:.: GHC.Generics.Rec1
                                                                   (HGit.Core.Types.FileTreeEntity
                                                                      (Data.Functor.Const.Const
                                                                         Merkle.Types.IPFS.RawIPFSHash
                                                                         HGit.Core.Types.Blob))))
                             a)
                   = g x
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <GHC.Generics.M1
                          GHC.Generics.S
                          ('GHC.Generics.MetaSel
                             ('GHC.Maybe.Just "dirEntries")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          ([]
                           GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                             GHC.Generics.:.: GHC.Generics.Rec1
                                                                (HGit.Core.Types.FileTreeEntity
                                                                   (Data.Functor.Const.Const
                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                      HGit.Core.Types.Blob))))
                          a>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Maybe.Just "dirEntries")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                ([]
                                 GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                   GHC.Generics.:.: GHC.Generics.Rec1
                                                                      (HGit.Core.Types.FileTreeEntity
                                                                         (Data.Functor.Const.Const
                                                                            Merkle.Types.IPFS.RawIPFSHash
                                                                            HGit.Core.Types.Blob))))
                                a) ->
                     ks
                       (HGit.Core.Types.$fFromJSON1Dir_$cto1
                          @ (Data.Functor.Const.Const
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                          @ a
                          a2
                            `cast`
                          ((Sym (GHC.Generics.N:M1[0]
                                     <Type>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Dir" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Maybe.Just "dirEntries")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        ([]
                                         GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                                              (HGit.Core.Types.FileTreeEntity
                                                                                 (Data.Functor.Const.Const
                                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                                    HGit.Core.Types.Blob))))>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                            <Type>_N
                                                                                                                            <GHC.Generics.D>_P
                                                                                                                            <'GHC.Generics.MetaData
                                                                                                                               "Dir"
                                                                                                                               "HGit.Core.Types"
                                                                                                                               "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                               'GHC.Types.False>_P
                                                                                                                            <GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "Dir"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.True)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Maybe.Just
                                                                                                                                        "dirEntries")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  ([]
                                                                                                                                   GHC.Generics.:.: ((,)
                                                                                                                                                       HGit.Core.Types.PartialFilePath
                                                                                                                                                     GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                        (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                           (Data.Functor.Const.Const
                                                                                                                                                                              Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                              HGit.Core.Types.Blob)))))>_R)) <a>_N ; Nth:2
                                                                                                                                                                                                                         (Nth:2
                                                                                                                                                                                                                              (Nth:3
                                                                                                                                                                                                                                   (Nth:3
                                                                                                                                                                                                                                        (Inst (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                              <GHC.Generics.M1
                                                                                                                                                                                                                                                                 GHC.Generics.D
                                                                                                                                                                                                                                                                 ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                    "Dir"
                                                                                                                                                                                                                                                                    "HGit.Core.Types"
                                                                                                                                                                                                                                                                    "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                    'GHC.Types.False)
                                                                                                                                                                                                                                                                 (GHC.Generics.M1
                                                                                                                                                                                                                                                                    GHC.Generics.C
                                                                                                                                                                                                                                                                    ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                       "Dir"
                                                                                                                                                                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                       'GHC.Types.True)
                                                                                                                                                                                                                                                                    (GHC.Generics.M1
                                                                                                                                                                                                                                                                       GHC.Generics.S
                                                                                                                                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                          ('GHC.Maybe.Just
                                                                                                                                                                                                                                                                             "dirEntries")
                                                                                                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                       ([]
                                                                                                                                                                                                                                                                        GHC.Generics.:.: ((,)
                                                                                                                                                                                                                                                                                            HGit.Core.Types.PartialFilePath
                                                                                                                                                                                                                                                                                          GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                                                                                                                                             (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                                                                                                (Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                   HGit.Core.Types.Blob))))))
                                                                                                                                                                                                                                                                 a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                              (Nth:3
                                                                                                                                                                                                                                                                                   (Nth:3
                                                                                                                                                                                                                                                                                        (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                         ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                 a>_R
                                                                                                                                                                                                                                                                                         ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                         ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                 (Sub (Sym (HGit.Core.Types.Rep1_Dir[0]
                                                                                                                                                                                                                                                                                                                <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                   HGit.Core.Types.Blob>_N)) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                                                                   (HGit.Core.Types.Dir
                                                                                                                                                                                                                                                                                                                                                                      (HGit.Core.Types.Hash
                                                                                                                                                                                                                                                                                                                                                                         HGit.Core.Types.Blob))
                                                                                                                                                                                                                                                                                                                                                                   a>_R)) (Coh <f5>_N
                                                                                                                                                                                                                                                                                                                                                                               (Nth:0
                                                                                                                                                                                                                                                                                                                                                                                    (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                              <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                                                                                                 (HGit.Core.Types.Dir
                                                                                                                                                                                                                                                                                                                                                                                                    (HGit.Core.Types.Hash
                                                                                                                                                                                                                                                                                                                                                                                                       HGit.Core.Types.Blob))
                                                                                                                                                                                                                                                                                                                                                                                                 a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                              (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                   (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                        (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                                                                                                                                                         ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                                                                                                                                                 a>_R
                                                                                                                                                                                                                                                                                                                                                                                                                         ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                                                                                                                                                         ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                                                                                                 (Sub (HGit.Core.Types.Rep1_Dir[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                           <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                              Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                              HGit.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "Dir"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GHC.Generics.C
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "Dir"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   'GHC.Types.True)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ('GHC.Maybe.Just
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         "dirEntries")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ([]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GHC.Generics.:.: ((,)
it.Core.Types.PartialFilePath
enerics.:.: GHC.Generics.Rec1
it.Core.Types.FileTreeEntity
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob))))))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             a>_R))))) (Coh <r>_N
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (Nth:0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
enerics.Rep1
it.Core.Types.Dir
it.Core.Types.Hash
it.Core.Types.Blob))
a>_R) ; (Nth:3
th:3
th:3
ata.Aeson.Types.Internal.Options>_R
ata.Aeson.Types.FromJSON.FromArgs
ata.Aeson.Types.Generic.One
a>_R
ata.Aeson.Types.Internal.Value>_R
ata.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (Sub (HGit.Core.Types.Rep1_Dir[0]
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
enerics.MetaData
ir"
it.Core.Types"
hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.M1
enerics.C
enerics.MetaCons
ir"
enerics.PrefixI
ypes.True)
enerics.M1
enerics.S
enerics.MetaSel
aybe.Just
dirEntries")
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)

enerics.:.: ((,)
it.Core.Types.PartialFilePath
enerics.:.: GHC.Generics.Rec1
it.Core.Types.FileTreeEntity
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob))))))
a>_R)) (Sym (Coh <f5>_N
th:0
ym (Data.Aeson.Types.Internal.N:Parser[0]
enerics.Rep1
it.Core.Types.Dir
it.Core.Types.Hash
it.Core.Types.Blob))
a>_R) ; (Nth:3
th:3
th:3
ata.Aeson.Types.Internal.Options>_R
ata.Aeson.Types.FromJSON.FromArgs
ata.Aeson.Types.Generic.One
a>_R
ata.Aeson.Types.Internal.Value>_R
ata.Aeson.Types.Internal.Parser
ub (HGit.Core.Types.Rep1_Dir[0]
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
enerics.MetaData
ir"
it.Core.Types"
hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.M1
enerics.C
enerics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "Dir"
enerics.PrefixI
ypes.True)
enerics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Generics.S
enerics.MetaSel
aybe.Just
dirEntries")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
enerics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        'GHC.Generics.DecidedLazy)

enerics.:.: ((,)
it.Core.Types.PartialFilePath
enerics.:.: GHC.Generics.Rec1
it.Core.Types.FileTreeEntity
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob))))))
a>_R))))))))))))))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <HGit.Core.Types.Dir
                              (HGit.Core.Types.Hash HGit.Core.Types.Blob) a>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1Dir_$cliftParseJSONList ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
be80b6a731843e8b4df725ad76728847
  $fFromJSON1Dir_$cto1 ::
    GHC.Generics.Rep1 (HGit.Core.Types.Dir a1) a2
    -> HGit.Core.Types.Dir a1 a2
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (ds :: GHC.Generics.Rep1 (HGit.Core.Types.Dir a) a1) ->
                 HGit.Core.Types.Dir
                   @ a
                   @ a1
                   (GHC.Base.build
                      @ (HGit.Core.Types.PartialFilePath,
                         HGit.Core.Types.FileTreeEntity a a1)
                      (\ @ b1
                         (c :: (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ ((GHC.Generics.:.:)
                              ((,) HGit.Core.Types.PartialFilePath)
                              (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a))
                              a1)
                         @ b1
                         (GHC.Base.mapFB
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a a1)
                            @ b1
                            @ ((GHC.Generics.:.:)
                                 ((,) HGit.Core.Types.PartialFilePath)
                                 (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a))
                                 a1)
                            c
                            (HGit.Core.Types.$fFromJSON1Dir1 @ a1 @ a))
                         n
                         ds
                           `cast`
                         ((Sub (HGit.Core.Types.Rep1_Dir[0] <a>_N) ; (GHC.Generics.N:M1[0]
                                                                          <Type>_N
                                                                          <GHC.Generics.D>_P
                                                                          <'GHC.Generics.MetaData
                                                                             "Dir"
                                                                             "HGit.Core.Types"
                                                                             "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                             'GHC.Types.False>_P
                                                                          <GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Dir"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.True)
                                                                             (GHC.Generics.M1
                                                                                GHC.Generics.S
                                                                                ('GHC.Generics.MetaSel
                                                                                   ('GHC.Maybe.Just
                                                                                      "dirEntries")
                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                   'GHC.Generics.DecidedLazy)
                                                                                ([]
                                                                                 GHC.Generics.:.: ((,)
                                                                                                     HGit.Core.Types.PartialFilePath
                                                                                                   GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                      (HGit.Core.Types.FileTreeEntity
                                                                                                                         a))))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                                         <Type>_N
                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                            "Dir"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'GHC.Types.True>_P
                                                                                                                                         <GHC.Generics.M1
                                                                                                                                            GHC.Generics.S
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               ('GHC.Maybe.Just
                                                                                                                                                  "dirEntries")
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            ([]
                                                                                                                                             GHC.Generics.:.: ((,)
                                                                                                                                                                 HGit.Core.Types.PartialFilePath
                                                                                                                                                               GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                  (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                     a)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                   <Type>_N
                                                                                                                                                                                                   <GHC.Generics.S>_P
                                                                                                                                                                                                   <'GHC.Generics.MetaSel
                                                                                                                                                                                                      ('GHC.Maybe.Just
                                                                                                                                                                                                         "dirEntries")
                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                                   <[]
                                                                                                                                                                                                    GHC.Generics.:.: ((,)
                                                                                                                                                                                                                        HGit.Core.Types.PartialFilePath
                                                                                                                                                                                                                      GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                                                                         (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                            a))>_R))) <a1>_N ; GHC.Generics.N::.:[0]
                                                                                                                                                                                                                                                                   <Type>_N
                                                                                                                                                                                                                                                                   <Type>_N
                                                                                                                                                                                                                                                                   <[]>_R
                                                                                                                                                                                                                                                                   <(,)
                                                                                                                                                                                                                                                                      HGit.Core.Types.PartialFilePath
                                                                                                                                                                                                                                                                    GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                                                                                                                                                       (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                                                                          a)>_N
                                                                                                                                                                                                                                                                   <a1>_N)))) -}
126c1d589e9a4c2063232dbb8c305f62
  $fFromJSON1Dir_$s$fSelectorMetaMetaSel ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Maybe.Just "dirEntries")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Maybe.Just "dirEntries")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "dirEntries")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   HGit.Core.Types.$fFromJSON1Dir5)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "dirEntries")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceUnpackedness
                          `cast`
                        (GHC.Generics.D:R:SingSourceUnpackednessa0[0] <'GHC.Generics.NoSourceUnpackedness>_N) of wild { GHC.Generics.SNoSourceUnpackedness co ->
                   GHC.Generics.NoSourceUnpackedness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "dirEntries")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceUnpackedness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "dirEntries")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSNoSourceStrictness
                          `cast`
                        (GHC.Generics.D:R:SingSourceStrictnessa0[0] <'GHC.Generics.NoSourceStrictness>_N) of wild { GHC.Generics.SNoSourceStrictness co ->
                   GHC.Generics.NoSourceStrictness
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "dirEntries")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepSourceStrictness[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f :: k -> Type
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Maybe.Just "dirEntries")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   case GHC.Generics.$WSDecidedLazy
                          `cast`
                        (GHC.Generics.D:R:SingDecidedStrictnessa0[0] <'GHC.Generics.DecidedLazy>_N) of wild { GHC.Generics.SDecidedLazy co ->
                   GHC.Generics.DecidedLazy
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepDecidedStrictness[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f :: <k
                                                                                        -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaSel
                         ('GHC.Maybe.Just "dirEntries")
                         'GHC.Generics.NoSourceUnpackedness
                         'GHC.Generics.NoSourceStrictness
                         'GHC.Generics.DecidedLazy) f a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepDecidedStrictness[0])) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity ::
    Data.Aeson.Types.FromJSON.FromJSON1
      (HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (HGit.Core.Types.FileTreeEntity
                       (HGit.Core.Types.Hash HGit.Core.Types.Blob))
                  HGit.Core.Types.$fFromJSON1FileTreeEntity_$cliftParseJSON
                  HGit.Core.Types.$fFromJSON1FileTreeEntity_$cliftParseJSONList -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity1 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:+:)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Data.Functor.Const.Const
                        Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  GHC.Generics.Par1))
            a1)
  {- Arity: 3, Strictness: <L,A><L,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Value) ->
                 HGit.Core.Types.$w$dFromUntaggedValue @ a1 w1 w2) -}
63df9ff48cdc3a03da666190053a120b
  $fFromJSON1FileTreeEntity10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FileEntity"#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity11 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
            a)
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a)
                   (contentsFieldName :: GHC.Base.String) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Object
                        -> Data.Tagged.Tagged
                             Data.Aeson.Types.Generic.False
                             (Data.Aeson.Types.Internal.Parser
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Functor.Const.Const
                                         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
                                   a))
                   = Data.Aeson.Types.FromJSON.$fFromTaggedObject''TYPEarityfFalse_$cparseFromTaggedObject''
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0
                               (Data.Functor.Const.Const
                                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                       HGit.Core.Types.$fFromJSON1FileTreeEntity12
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.K1
                                       GHC.Generics.R
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))>_N))
                       @ a
                       opts
                       fargs
                       contentsFieldName
                 } in
                 (\ (x :: Data.Aeson.Types.Internal.Object) -> g x)
                   `cast`
                 (<Data.Aeson.Types.Internal.Object>_R
                  ->_R Data.Tagged.N:Tagged[0]
                           <Type>_N
                           <Data.Aeson.Types.Generic.False>_P
                           <Data.Aeson.Types.Internal.Parser
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0
                                    (Data.Functor.Const.Const
                                       Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
                                 a)>_R)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity12 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
            a1)
  {- Arity: 3, Strictness: <L,A><L,A><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Value) ->
                 HGit.Core.Types.$w$dGFromJSON2 @ a1 w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity13 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0
                        (Data.Functor.Const.Const
                           Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     GHC.Generics.Par1))
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarity:+:_$cparsePair
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0
                              (Data.Functor.Const.Const
                                 Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           GHC.Generics.Par1))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity15
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Functor.Const.Const
                                         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity14
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)>_N))) -}
c2db000246a14cb1b9756194f53f2595
  $fFromJSON1FileTreeEntity14 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.M1
                  GHC.Generics.S
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  GHC.Generics.Par1)
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        GHC.Generics.Par1)
                   HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons
                   HGit.Core.Types.$fFromJSON1FileTreeEntity7
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity7
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1>_N))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity15 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Pair
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.M1
                  GHC.Generics.S
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Data.Functor.Const.Const
                        Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
               a1))
  {- Arity: 3,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromPairarityM1_$cparsePair
                   @ ('GHC.Generics.MetaCons
                        "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons1
                   HGit.Core.Types.$fFromJSON1FileTreeEntity12
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity12
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:ConsFromJSON[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))>_N))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity2 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            ((GHC.Generics.:+:)
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     (GHC.Generics.Rec0
                        (Data.Functor.Const.Const
                           Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
               (GHC.Generics.M1
                  GHC.Generics.C
                  ('GHC.Generics.MetaCons
                     "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (GHC.Generics.S1
                     ('GHC.Generics.MetaSel
                        'GHC.Maybe.Nothing
                        'GHC.Generics.NoSourceUnpackedness
                        'GHC.Generics.NoSourceStrictness
                        'GHC.Generics.DecidedLazy)
                     GHC.Generics.Par1))
               a1))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarity:+:_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0
                              (Data.Functor.Const.Const
                                 Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           GHC.Generics.Par1))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity8
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Functor.Const.Const
                                         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity3
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)>_N))) -}
e665bafe76ad017a653bf4670b971eb9
  $fFromJSON1FileTreeEntity3 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.M1
                  GHC.Generics.S
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  GHC.Generics.Par1)
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        GHC.Generics.Par1)
                   @ ('GHC.Generics.MetaCons
                        "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1FileTreeEntity6
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons) -}
39684599167d3084e02730c93f0958b2
  $fFromJSON1FileTreeEntity4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1FileTreeEntity5) -}
9db90279515c14ba454e6b89fccd4bb5
  $fFromJSON1FileTreeEntity5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DirEntity"#) -}
43b9135be898dd26f94a4e092ddfe47d
  $fFromJSON1FileTreeEntity6 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1
            a)
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (opts :: Data.Aeson.Types.Internal.Options)
                   (fargs :: Data.Aeson.Types.FromJSON.FromArgs
                               Data.Aeson.Types.Generic.One a)
                   (contentsFieldName :: GHC.Base.String) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Object
                        -> Data.Tagged.Tagged
                             Data.Aeson.Types.Generic.False
                             (Data.Aeson.Types.Internal.Parser
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1
                                   a))
                   = Data.Aeson.Types.FromJSON.$fFromTaggedObject''TYPEarityfFalse_$cparseFromTaggedObject''
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               'GHC.Maybe.Nothing
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            GHC.Generics.Par1)
                       HGit.Core.Types.$fFromJSON1FileTreeEntity7
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:GFromJSON[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.S
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1>_N))
                       @ a
                       opts
                       fargs
                       contentsFieldName
                 } in
                 (\ (x :: Data.Aeson.Types.Internal.Object) -> g x)
                   `cast`
                 (<Data.Aeson.Types.Internal.Object>_R
                  ->_R Data.Tagged.N:Tagged[0]
                           <Type>_N
                           <Data.Aeson.Types.Generic.False>_P
                           <Data.Aeson.Types.Internal.Parser
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 GHC.Generics.Par1
                                 a)>_R)) -}
2557a9d2bc43a77c78d22e2fccb870a9
  $fFromJSON1FileTreeEntity7 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1
            a1)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: Data.Aeson.Types.FromJSON.FromArgs
                            Data.Aeson.Types.Generic.One a1)
                   (w2 :: Data.Aeson.Types.Internal.Value) ->
                 HGit.Core.Types.$w$dGFromJSON1 @ a1 w1 w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity8 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.One a
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Object
    -> Data.Text.Internal.Text
    -> GHC.Maybe.Maybe
         (Data.Aeson.Types.Internal.Parser
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.M1
                  GHC.Generics.S
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Data.Functor.Const.Const
                        Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
               a))
  {- Arity: 5,
     Unfolding: (Data.Aeson.Types.FromJSON.$fFromTaggedObjectarityM1_$cparseFromTaggedObject
                   @ Data.Aeson.Types.Generic.One
                   @ (GHC.Generics.M1
                        GHC.Generics.S
                        ('GHC.Generics.MetaSel
                           'GHC.Maybe.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy)
                        (GHC.Generics.Rec0
                           (Data.Functor.Const.Const
                              Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                   @ ('GHC.Generics.MetaCons
                        "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                   HGit.Core.Types.$fFromJSON1FileTreeEntity11
                     `cast`
                   (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject'[0]
                             <Data.Aeson.Types.Generic.One>_N
                             <GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))>_N))
                   HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons1) -}
1d072e9decbfe5e3bc53416f983f1a41
  $fFromJSON1FileTreeEntity9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fFromJSON1FileTreeEntity10) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity_$cliftParseJSON ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (HGit.Core.Types.FileTreeEntity
            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a
                   (pj :: Data.Aeson.Types.Internal.Value
                          -> Data.Aeson.Types.Internal.Parser a)
                   (pjl :: Data.Aeson.Types.Internal.Value
                           -> Data.Aeson.Types.Internal.Parser [a]) ->
                 let {
                   g :: Data.Aeson.Types.Internal.Value
                        -> Data.Aeson.Types.Internal.Parser
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
                                a)
                   = Data.Aeson.Types.FromJSON.parseNonAllNullarySum
                       @ Data.Aeson.Types.Generic.One
                       @ (GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons
                               "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0
                                  (Data.Functor.Const.Const
                                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                          GHC.Generics.:+: GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                GHC.Generics.Par1))
                       @ a
                       HGit.Core.Types.$fFromJSON1FileTreeEntity13
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromPair[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "DirEntity"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)>_N))
                       HGit.Core.Types.$fFromJSON1FileTreeEntity2
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromTaggedObject[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "DirEntity"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)>_N))
                       HGit.Core.Types.$fFromJSON1FileTreeEntity1
                         `cast`
                       (Sym (Data.Aeson.Types.FromJSON.N:FromUntaggedValue[0]
                                 <Data.Aeson.Types.Generic.One>_N
                                 <GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.S1
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0
                                          (Data.Functor.Const.Const
                                             Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "DirEntity"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     (GHC.Generics.S1
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        GHC.Generics.Par1)>_N))
                       Data.Aeson.Types.Internal.defaultOptions
                       (Data.Aeson.Types.FromJSON.$WFrom1Args @ a pj pjl)
                 } in
                 \ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          ((GHC.Generics.:+:)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      (Data.Functor.Const.Const
                                         Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1))
                             a)
                   = g x
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (HGit.Core.Types.FileTreeEntity
                                (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <(GHC.Generics.:+:)
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                          (GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1))
                          a>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: (GHC.Generics.:+:)
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                                (GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
                                a) ->
                     ks
                       (HGit.Core.Types.$fFromJSON1FileTreeEntity_$cto1
                          @ (Data.Functor.Const.Const
                               Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                          @ a
                          a2
                            `cast`
                          (Sym (GHC.Generics.N:M1[0]
                                    <Type>_N
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "FileTreeEntity"
                                       "HGit.Core.Types"
                                       "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.C1
                                       ('GHC.Generics.MetaCons
                                          "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.S1
                                          ('GHC.Generics.MetaSel
                                             'GHC.Maybe.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.Rec0
                                             (Data.Functor.Const.Const
                                                Merkle.Types.IPFS.RawIPFSHash
                                                HGit.Core.Types.Blob)))
                                     GHC.Generics.:+: GHC.Generics.C1
                                                        ('GHC.Generics.MetaCons
                                                           "DirEntity"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.S1
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           GHC.Generics.Par1)>_R) <a>_N ; Nth:2
                                                                                              (Nth:2
                                                                                                   (Nth:3
                                                                                                        (Nth:3
                                                                                                             (Inst (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                   <GHC.Generics.M1
                                                                                                                                      GHC.Generics.D
                                                                                                                                      ('GHC.Generics.MetaData
                                                                                                                                         "FileTreeEntity"
                                                                                                                                         "HGit.Core.Types"
                                                                                                                                         "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.C1
                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                            "FileEntity"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'GHC.Types.False)
                                                                                                                                         (GHC.Generics.S1
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               'GHC.Maybe.Nothing
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            (GHC.Generics.Rec0
                                                                                                                                               (Data.Functor.Const.Const
                                                                                                                                                  Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                  HGit.Core.Types.Blob)))
                                                                                                                                       GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                                                             "DirEntity"
                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                             'GHC.Types.False)
                                                                                                                                                          (GHC.Generics.S1
                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                'GHC.Maybe.Nothing
                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                             GHC.Generics.Par1))
                                                                                                                                      a>_R) ; (Nth:3
                                                                                                                                                   (Nth:3
                                                                                                                                                        (Nth:3
                                                                                                                                                             (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                              ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                      Data.Aeson.Types.Generic.One
                                                                                                                                                                      a>_R
                                                                                                                                                              ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                              ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                      (Sub (Sym (HGit.Core.Types.Rep1_FileTreeEntity[0]
                                                                                                                                                                                     <Data.Functor.Const.Const
                                                                                                                                                                                        Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                        HGit.Core.Types.Blob>_N)) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                     <GHC.Generics.Rep1
                                                                                                                                                                                                                                        (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                           (HGit.Core.Types.Hash
                                                                                                                                                                                                                                              HGit.Core.Types.Blob))
                                                                                                                                                                                                                                        a>_R)) (Coh <f5>_N
                                                                                                                                                                                                                                                    (Nth:0
                                                                                                                                                                                                                                                         (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                   <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                      (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                                                         (HGit.Core.Types.Hash
                                                                                                                                                                                                                                                                            HGit.Core.Types.Blob))
                                                                                                                                                                                                                                                                      a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                   (Nth:3
                                                                                                                                                                                                                                                                                        (Nth:3
                                                                                                                                                                                                                                                                                             (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                              ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                      Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                      a>_R
                                                                                                                                                                                                                                                                                              ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                              ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                      (Sub (HGit.Core.Types.Rep1_FileTreeEntity[0]
                                                                                                                                                                                                                                                                                                                <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                   HGit.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                               <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                  GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                                  ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                                     "FileTreeEntity"
                                                                                                                                                                                                                                                                                                                                                                     "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                     "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                                     'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                  (GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                        "FileEntity"
                                                                                                                                                                                                                                                                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                        'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                     (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                           'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                           (Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                              Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                              HGit.Core.Types.Blob)))
                                                                                                                                                                                                                                                                                                                                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                         "DirEntity"
                                                                                                                                                                                                                                                                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                         'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                      (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Maybe.Nothing
                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                         GHC.Generics.Par1))
                                                                                                                                                                                                                                                                                                                                                                  a>_R))))) (Coh <r>_N
                                                                                                                                                                                                                                                                                                                                                                                 (Nth:0
                                                                                                                                                                                                                                                                                                                                                                                      (Inst (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                      <GHC.Generics.Rep1
                                                                                                                                                                                                                                                                                                                                                                                                         (HGit.Core.Types.FileTreeEntity
                                                                                                                                                                                                                                                                                                                                                                                                            (HGit.Core.Types.Hash
                                                                                                                                                                                                                                                                                                                                                                                                               HGit.Core.Types.Blob))
                                                                                                                                                                                                                                                                                                                                                                                                         a>_R) ; (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                      (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                           (Nth:3
                                                                                                                                                                                                                                                                                                                                                                                                                                (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                 ->_R <Data.Aeson.Types.FromJSON.FromArgs
                                                                                                                                                                                                                                                                                                                                                                                                                                         Data.Aeson.Types.Generic.One
                                                                                                                                                                                                                                                                                                                                                                                                                                         a>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                 ->_R <Data.Aeson.Types.Internal.Value>_R
                                                                                                                                                                                                                                                                                                                                                                                                                                 ->_R (Data.Aeson.Types.Internal.Parser
                                                                                                                                                                                                                                                                                                                                                                                                                                         (Sub (HGit.Core.Types.Rep1_FileTreeEntity[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                   <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                                      HGit.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <GHC.Generics.M1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Generics.D
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ('GHC.Generics.MetaData
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "FileTreeEntity"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "HGit.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (GHC.Generics.C1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "FileEntity"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           'GHC.Types.False)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (GHC.Generics.S1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (GHC.Generics.Rec0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HGit.Core.Types.Blob)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GHC.Generics.:+: GHC.Generics.C1
enerics.MetaCons
irEntity"
enerics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            'GHC.Types.False)
enerics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
enerics.Par1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     a>_R)) (Sym (Coh <f5>_N
th:0
ym (Data.Aeson.Types.Internal.N:Parser[0]
enerics.Rep1
it.Core.Types.FileTreeEntity
it.Core.Types.Hash
it.Core.Types.Blob))
a>_R) ; (Nth:3
th:3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (Nth:3
ata.Aeson.Types.Internal.Options>_R
ata.Aeson.Types.FromJSON.FromArgs
ata.Aeson.Types.Generic.One
a>_R
ata.Aeson.Types.Internal.Value>_R
ata.Aeson.Types.Internal.Parser
ub (HGit.Core.Types.Rep1_FileTreeEntity[0]
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HGit.Core.Types.Blob>_N) <a>_N))_R))) ; Data.Aeson.Types.Internal.N:Parser[0]
enerics.M1
enerics.D
enerics.MetaData
ileTreeEntity"
it.Core.Types"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
ypes.False)
enerics.C1
enerics.MetaCons
ileEntity"
enerics.PrefixI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          'GHC.Types.False)
enerics.S1
enerics.MetaSel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             'GHC.Maybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Rec0
ata.Functor.Const.Const
erkle.Types.IPFS.RawIPFSHash
it.Core.Types.Blob)))
enerics.:+: GHC.Generics.C1
enerics.MetaCons
irEntity"
enerics.PrefixI
ypes.False)
enerics.S1
enerics.MetaSel
aybe.Nothing
enerics.NoSourceUnpackedness
enerics.NoSourceStrictness
enerics.DecidedLazy)
enerics.Par1))
a>_R))))))))))))))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <HGit.Core.Types.FileTreeEntity
                              (HGit.Core.Types.Hash HGit.Core.Types.Blob) a>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFromJSON1FileTreeEntity_$cliftParseJSONList ::
    (Data.Aeson.Types.Internal.Value
     -> Data.Aeson.Types.Internal.Parser a)
    -> (Data.Aeson.Types.Internal.Value
        -> Data.Aeson.Types.Internal.Parser [a])
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [HGit.Core.Types.FileTreeEntity
            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
ae33a7ec835849f6fc910a468589c69e
  $fFromJSON1FileTreeEntity_$cto1 ::
    GHC.Generics.Rep1 (HGit.Core.Types.FileTreeEntity a1) a2
    -> HGit.Core.Types.FileTreeEntity a1 a2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ a1
                   (ds :: GHC.Generics.Rep1 (HGit.Core.Types.FileTreeEntity a) a1) ->
                 case ds
                        `cast`
                      ((Sub (HGit.Core.Types.Rep1_FileTreeEntity[0]
                                 <a>_N) ; GHC.Generics.N:M1[0]
                                              <Type>_N
                                              <GHC.Generics.D>_P
                                              <'GHC.Generics.MetaData
                                                 "FileTreeEntity"
                                                 "HGit.Core.Types"
                                                 "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                                 'GHC.Types.False>_P
                                              <GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "FileEntity"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1 GHC.Generics.R a))
                                               GHC.Generics.:+: GHC.Generics.M1
                                                                  GHC.Generics.C
                                                                  ('GHC.Generics.MetaCons
                                                                     "DirEntity"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  (GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Maybe.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     GHC.Generics.Par1)>_R) <a1>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> HGit.Core.Types.FileEntity
                        @ a
                        @ a1
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <Type>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R a)>_R ; GHC.Generics.N:M1[0]
                                                                             <Type>_N
                                                                             <GHC.Generics.S>_P
                                                                             <'GHC.Generics.MetaSel
                                                                                'GHC.Maybe.Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy>_P
                                                                             <GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                a>_R) <a1>_N ; GHC.Generics.N:K1[0]
                                                                                                   <Type>_N
                                                                                                   <GHC.Generics.R>_P
                                                                                                   <a>_R
                                                                                                   <a1>_P)
                   GHC.Generics.R1 ds1
                   -> HGit.Core.Types.DirEntity
                        @ a
                        @ a1
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <Type>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 GHC.Generics.Par1>_R ; GHC.Generics.N:M1[0]
                                                            <Type>_N
                                                            <GHC.Generics.S>_P
                                                            <'GHC.Generics.MetaSel
                                                               'GHC.Maybe.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy>_P
                                                            <GHC.Generics.Par1>_R) <a1>_N ; GHC.Generics.N:Par1[0]
                                                                                                <a1>_R) }) -}
b34576d17386870a004e69c8bbb62eb9
  $fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1FileTreeEntity4)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
f91f918b729d1b555d09d5d1ebdf823a
  $fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons1 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   HGit.Core.Types.$fFromJSON1FileTreeEntity9)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSPrefix
                          `cast`
                        (GHC.Generics.D:R:SingFixityIa0[0] <'GHC.Generics.PrefixI>_N) of wild { GHC.Generics.SPrefix co ->
                   GHC.Generics.Prefix
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepFixityI[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepFixityI[0]))
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> Type) -> k -> Type
                     @ f1 :: k -> Type
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a) ->
                   case GHC.Generics.$WSFalse
                          `cast`
                        (GHC.Generics.D:R:SingBoola0[0] <'GHC.Types.False>_N) of wild { GHC.Generics.SFalse co ->
                   GHC.Types.False
                     `cast`
                   (Sub (Sym (GHC.Generics.D:R:DemoteRepBool[0]))) })
                    `cast`
                  (forall (k :: <Type>_N) (t :: <GHC.Generics.Meta
                                                 -> (k -> Type) -> k -> Type>_N) (f1 :: <k
                                                                                         -> Type>_N) (a :: <k>_N).
                   <t ('GHC.Generics.MetaCons
                         "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False) f1 a>_R
                   ->_R Sub (GHC.Generics.D:R:DemoteRepBool[0])) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFunctorBlob :: GHC.Base.Functor HGit.Core.Types.Blob
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fFunctorBlob_$cfmap
                  HGit.Core.Types.$fFunctorBlob_$c<$ -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFunctorBlob_$c<$ ::
    a -> HGit.Core.Types.Blob b -> HGit.Core.Types.Blob a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (z :: a) (ds :: HGit.Core.Types.Blob b) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2 -> HGit.Core.Types.Chunk @ a a1 z
                   HGit.Core.Types.Empty -> HGit.Core.Types.Empty @ a }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fFunctorBlob_$cfmap ::
    (a -> b) -> HGit.Core.Types.Blob a -> HGit.Core.Types.Blob b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (f :: a -> b) (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk a1 a2 -> HGit.Core.Types.Chunk @ b a1 (f a2)
                   HGit.Core.Types.Empty -> HGit.Core.Types.Empty @ b }) -}
34aca104485ce79d597049c5ea286be1
  $fFunctorCommit :: GHC.Base.Functor (HGit.Core.Types.Commit a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Commit a)
                  (HGit.Core.Types.$fFunctorCommit_$cfmap @ a)
                  (HGit.Core.Types.$fFunctorCommit_$c<$ @ a) -}
34aca104485ce79d597049c5ea286be1
  $fFunctorCommit_$c<$ ::
    a2 -> HGit.Core.Types.Commit a1 b -> HGit.Core.Types.Commit a1 a2
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ a1 @ b (z :: a1) (ds :: HGit.Core.Types.Commit a b) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.NullCommit @ a @ a1
                   HGit.Core.Types.Commit a2 a3 a4
                   -> HGit.Core.Types.Commit
                        @ a
                        @ a1
                        a2
                        a3
                        (GHC.Base.$fFunctorNonEmpty_$c<$ @ a1 @ b z a4) }) -}
34aca104485ce79d597049c5ea286be1
  $fFunctorCommit_$cfmap ::
    (a2 -> b)
    -> HGit.Core.Types.Commit a1 a2 -> HGit.Core.Types.Commit a1 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (f :: a1 -> b)
                   (ds :: HGit.Core.Types.Commit a a1) ->
                 case ds of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.NullCommit @ a @ b
                   HGit.Core.Types.Commit a2 a3 a4
                   -> HGit.Core.Types.Commit
                        @ a
                        @ b
                        a2
                        a3
                        (GHC.Base.$fFunctorNonEmpty_$cfmap @ a1 @ b f a4) }) -}
be80b6a731843e8b4df725ad76728847
  $fFunctorDir :: GHC.Base.Functor (HGit.Core.Types.Dir a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Dir a)
                  (HGit.Core.Types.$fFunctorDir_$cfmap @ a)
                  (HGit.Core.Types.$fFunctorDir_$c<$ @ a) -}
be80b6a731843e8b4df725ad76728847
  $fFunctorDir_$c<$ ::
    a2 -> HGit.Core.Types.Dir a1 b -> HGit.Core.Types.Dir a1 a2
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ a1 @ b (w :: a1) (w1 :: HGit.Core.Types.Dir a b) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.Dir
                   @ a
                   @ a1
                   (GHC.Base.build
                      @ (HGit.Core.Types.PartialFilePath,
                         HGit.Core.Types.FileTreeEntity a a1)
                      (\ @ b1
                         (c :: (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (HGit.Core.Types.PartialFilePath,
                            HGit.Core.Types.FileTreeEntity a b)
                         @ b1
                         (GHC.Base.mapFB
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a a1)
                            @ b1
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a b)
                            c
                            (\ (b3 :: (HGit.Core.Types.PartialFilePath,
                                       HGit.Core.Types.FileTreeEntity a b)) ->
                             case b3 of wild { (,) a2 a3 ->
                             (a2, HGit.Core.Types.$fFunctorDir_$c<$1 @ a @ a1 @ b w a3) }))
                         n
                         ww1)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFunctorDir_$c<$1 ::
    a2
    -> HGit.Core.Types.FileTreeEntity a1 b
    -> HGit.Core.Types.FileTreeEntity a1 a2
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (z :: a1)
                   (ds :: HGit.Core.Types.FileTreeEntity a b) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.FileEntity @ a @ a1 a2
                   HGit.Core.Types.DirEntity a2
                   -> HGit.Core.Types.DirEntity @ a @ a1 z }) -}
be80b6a731843e8b4df725ad76728847
  $fFunctorDir_$cfmap ::
    (a2 -> b) -> HGit.Core.Types.Dir a1 a2 -> HGit.Core.Types.Dir a1 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ a1 @ b (w :: a1 -> b) (w1 :: HGit.Core.Types.Dir a a1) ->
                 case w1 of ww { HGit.Core.Types.Dir ww1 ->
                 HGit.Core.Types.Dir
                   @ a
                   @ b
                   (GHC.Base.build
                      @ (HGit.Core.Types.PartialFilePath,
                         HGit.Core.Types.FileTreeEntity a b)
                      (\ @ b1
                         (c :: (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (HGit.Core.Types.PartialFilePath,
                            HGit.Core.Types.FileTreeEntity a a1)
                         @ b1
                         (GHC.Base.mapFB
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a b)
                            @ b1
                            @ (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a a1)
                            c
                            (\ (b2 :: (HGit.Core.Types.PartialFilePath,
                                       HGit.Core.Types.FileTreeEntity a a1)) ->
                             case b2 of wild { (,) a2 a3 ->
                             (a2, HGit.Core.Types.$fFunctorDir_$cfmap1 @ a @ a1 @ b w a3) }))
                         n
                         ww1)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFunctorDir_$cfmap1 ::
    (a2 -> b)
    -> HGit.Core.Types.FileTreeEntity a1 a2
    -> HGit.Core.Types.FileTreeEntity a1 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ a1
                   @ b
                   (f :: a1 -> b)
                   (ds :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case ds of wild {
                   HGit.Core.Types.FileEntity a2
                   -> HGit.Core.Types.FileEntity @ a @ b a2
                   HGit.Core.Types.DirEntity a2
                   -> HGit.Core.Types.DirEntity @ a @ b (f a2) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fFunctorFileTreeEntity ::
    GHC.Base.Functor (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.FileTreeEntity a)
                  (HGit.Core.Types.$fFunctorDir_$cfmap1 @ a)
                  (HGit.Core.Types.$fFunctorDir_$c<$1 @ a) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fGeneric1Blob :: GHC.Generics.Generic1 HGit.Core.Types.Blob
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Type
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fGeneric1Blob1
                    `cast`
                  (forall (a :: <Type>_N).
                   <HGit.Core.Types.Blob a>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Blob"
                                     "HGit.Core.Types"
                                     "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         GHC.Generics.Par1)
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Empty"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1>_R) ; Sub (Sym (HGit.Core.Types.Rep1_Blob[0]))) <a>_N)
                  HGit.Core.Types.$fFromJSON1Blob_$cto1 -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fGeneric1Blob1 ::
    HGit.Core.Types.Blob a
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
             GHC.Generics.:*: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: HGit.Core.Types.Blob a) ->
                 case x of wild {
                   HGit.Core.Types.Chunk g3 g4
                   -> GHC.Generics.L1
                        @ Type
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 GHC.Generics.Par1))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
                        @ a
                        (GHC.Generics.:*:
                           @ Type
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1)
                           @ a
                           g3
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <Type>_N
                                     <GHC.Generics.R>_P
                                     <GHC.Base.String>_R
                                     <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                       <Type>_N
                                                       <GHC.Generics.S>_P
                                                       <'GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy>_P
                                                       <GHC.Generics.K1
                                                          GHC.Generics.R GHC.Base.String>_R) <a>_N)
                           g4
                             `cast`
                           (Sym (GHC.Generics.N:Par1[0] <a>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                          <Type>_N
                                                                          <GHC.Generics.S>_P
                                                                          <'GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy>_P
                                                                          <GHC.Generics.Par1>_R) <a>_N))
                          `cast`
                        (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.C>_P
                                  <'GHC.Generics.MetaCons
                                     "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.S
                                     ('GHC.Generics.MetaSel
                                        'GHC.Maybe.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                   GHC.Generics.:*: GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      GHC.Generics.Par1>_R) <a>_N)
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fGeneric1Blob2 @ a }) -}
b7b79b24b2e97f725ca665a40afd4e3e
  $fGeneric1Blob2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             GHC.Generics.Par1))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      a
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Generics.R1
                   @ Type
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            GHC.Generics.Par1))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ a
                   (GHC.Generics.U1 @ Type @ a)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <a>_N)) -}
34aca104485ce79d597049c5ea286be1
  $fGeneric1Commit ::
    GHC.Generics.Generic1 (HGit.Core.Types.Commit a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ Type
                  @ (HGit.Core.Types.Commit a)
                  (HGit.Core.Types.$fGeneric1Commit1 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <HGit.Core.Types.Commit a a1>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Commit"
                                     "HGit.Core.Types"
                                     "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Commit"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R GHC.Base.String)
                                                       GHC.Generics.:*: (GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              'GHC.Maybe.Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R a)
                                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                                            GHC.Generics.S
                                                                                            ('GHC.Generics.MetaSel
                                                                                               'GHC.Maybe.Nothing
                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                               'GHC.Generics.DecidedLazy)
                                                                                            (GHC.Generics.Rec1
                                                                                               GHC.Base.NonEmpty)))>_R) ; Sub (Sym (HGit.Core.Types.Rep1_Commit[0]
                                                                                                                                        <a>_N))) <a1>_N)
                  (HGit.Core.Types.$fFromJSON1Commit_$cto1 @ a) -}
34aca104485ce79d597049c5ea286be1
  $fGeneric1Commit1 ::
    HGit.Core.Types.Commit a1 a2
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
             GHC.Generics.:*: (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R a1)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec1 GHC.Base.NonEmpty))))
         a2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: HGit.Core.Types.Commit a a1) ->
                 case x of wild {
                   HGit.Core.Types.NullCommit
                   -> HGit.Core.Types.$fGeneric1Commit2 @ a @ a1
                   HGit.Core.Types.Commit g3 g4 g5
                   -> GHC.Generics.R1
                        @ Type
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                              GHC.Generics.:*: (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Maybe.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1 GHC.Generics.R a)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.Rec1
                                                                      GHC.Base.NonEmpty))))
                        @ a1
                        (GHC.Generics.:*:
                           @ Type
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Maybe.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                           @ a1
                           g3
                             `cast`
                           (Sym (GHC.Generics.N:K1[0]
                                     <Type>_N
                                     <GHC.Generics.R>_P
                                     <GHC.Base.String>_R
                                     <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                        <Type>_N
                                                        <GHC.Generics.S>_P
                                                        <'GHC.Generics.MetaSel
                                                           'GHC.Maybe.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy>_P
                                                        <GHC.Generics.K1
                                                           GHC.Generics.R
                                                           GHC.Base.String>_R) <a1>_N)
                           (GHC.Generics.:*:
                              @ Type
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R a))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                              @ a1
                              g4
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <Type>_N
                                        <GHC.Generics.R>_P
                                        <a>_R
                                        <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                           <Type>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Maybe.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R a>_R) <a1>_N)
                              g5
                                `cast`
                              ((Sym (GHC.Generics.N:Rec1[0]
                                         <Type>_N <GHC.Base.NonEmpty>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                    <Type>_N
                                                                                    <GHC.Generics.S>_P
                                                                                    <'GHC.Generics.MetaSel
                                                                                       'GHC.Maybe.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy>_P
                                                                                    <GHC.Generics.Rec1
                                                                                       GHC.Base.NonEmpty>_R)) <a1>_N)))
                          `cast`
                        (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.C>_P
                                  <'GHC.Generics.MetaCons
                                     "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.S
                                     ('GHC.Generics.MetaSel
                                        'GHC.Maybe.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                   GHC.Generics.:*: (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Maybe.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1 GHC.Generics.R a)
                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                        GHC.Generics.S
                                                                        ('GHC.Generics.MetaSel
                                                                           'GHC.Maybe.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy)
                                                                        (GHC.Generics.Rec1
                                                                           GHC.Base.NonEmpty))>_R) <a1>_N) }) -}
e682d0f53773c2c8e6d3eadc077ab509
  $fGeneric1Commit2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R a1)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Maybe.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.Rec1 GHC.Base.NonEmpty))))
      a2
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ a @ a1 ->
                 GHC.Generics.L1
                   @ Type
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                         GHC.Generics.:*: (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R a)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Maybe.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec1
                                                                 GHC.Base.NonEmpty))))
                   @ a1
                   (GHC.Generics.U1 @ Type @ a1)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <Type>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <a1>_N)) -}
be80b6a731843e8b4df725ad76728847
  $fGeneric1Dir :: GHC.Generics.Generic1 (HGit.Core.Types.Dir a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ Type
                  @ (HGit.Core.Types.Dir a)
                  (HGit.Core.Types.$fGeneric1Dir1 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <HGit.Core.Types.Dir a a1>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Dir"
                                     "HGit.Core.Types"
                                     "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Dir" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Maybe.Just "dirEntries")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        ([]
                                         GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                                           GHC.Generics.:.: GHC.Generics.Rec1
                                                                              (HGit.Core.Types.FileTreeEntity
                                                                                 a))))>_R) ; Sub (Sym (HGit.Core.Types.Rep1_Dir[0]
                                                                                                           <a>_N))) <a1>_N)
                  (HGit.Core.Types.$fFromJSON1Dir_$cto1 @ a) -}
be80b6a731843e8b4df725ad76728847
  $fGeneric1Dir1 ::
    HGit.Core.Types.Dir a1 a2
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Dir" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Maybe.Just "dirEntries")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            ([]
             GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                               GHC.Generics.:.: GHC.Generics.Rec1
                                                  (HGit.Core.Types.FileTreeEntity a1))))
         a2
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: HGit.Core.Types.Dir a a1) ->
                 case x of wild { HGit.Core.Types.Dir g3 ->
                 (GHC.Base.build
                    @ ((GHC.Generics.:.:)
                         ((,) HGit.Core.Types.PartialFilePath)
                         (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a))
                         a1)
                    (\ @ b1
                       (c :: (GHC.Generics.:.:)
                               ((,) HGit.Core.Types.PartialFilePath)
                               (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a))
                               a1
                             -> b1 -> b1)[OneShot]
                       (n :: b1)[OneShot] ->
                     GHC.Base.foldr
                       @ (HGit.Core.Types.PartialFilePath,
                          HGit.Core.Types.FileTreeEntity a a1)
                       @ b1
                       (GHC.Base.mapFB
                          @ ((GHC.Generics.:.:)
                               ((,) HGit.Core.Types.PartialFilePath)
                               (GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a))
                               a1)
                          @ b1
                          @ (HGit.Core.Types.PartialFilePath,
                             HGit.Core.Types.FileTreeEntity a a1)
                          c
                          (HGit.Core.Types.$fGeneric1Dir2 @ a1 @ a)
                            `cast`
                          (<(HGit.Core.Types.PartialFilePath,
                             HGit.Core.Types.FileTreeEntity a a1)>_R
                           ->_R Sym (GHC.Generics.N::.:[0]
                                         <Type>_N
                                         <Type>_N
                                         <(,) HGit.Core.Types.PartialFilePath>_R
                                         <GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a)>_N
                                         <a1>_N)))
                       n
                       g3))
                   `cast`
                 (Sym (GHC.Generics.N::.:[0]
                           <Type>_N
                           <Type>_N
                           <[]>_R
                           <(,) HGit.Core.Types.PartialFilePath
                            GHC.Generics.:.: GHC.Generics.Rec1
                                               (HGit.Core.Types.FileTreeEntity a)>_N
                           <a1>_N) ; (Sym (GHC.Generics.N:M1[0]
                                               <Type>_N
                                               <GHC.Generics.S>_P
                                               <'GHC.Generics.MetaSel
                                                  ('GHC.Maybe.Just "dirEntries")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy>_P
                                               <[]
                                                GHC.Generics.:.: ((,)
                                                                    HGit.Core.Types.PartialFilePath
                                                                  GHC.Generics.:.: GHC.Generics.Rec1
                                                                                     (HGit.Core.Types.FileTreeEntity
                                                                                        a))>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                           <Type>_N
                                                                                                           <GHC.Generics.C>_P
                                                                                                           <'GHC.Generics.MetaCons
                                                                                                              "Dir"
                                                                                                              'GHC.Generics.PrefixI
                                                                                                              'GHC.Types.True>_P
                                                                                                           <GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 ('GHC.Maybe.Just
                                                                                                                    "dirEntries")
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              ([]
                                                                                                               GHC.Generics.:.: ((,)
                                                                                                                                   HGit.Core.Types.PartialFilePath
                                                                                                                                 GHC.Generics.:.: GHC.Generics.Rec1
                                                                                                                                                    (HGit.Core.Types.FileTreeEntity
                                                                                                                                                       a)))>_R)) <a1>_N) }) -}
f80f3e4267c136ad12b1bd3982d26649
  $fGeneric1Dir2 ::
    (HGit.Core.Types.PartialFilePath,
     HGit.Core.Types.FileTreeEntity a2 a1)
    -> (HGit.Core.Types.PartialFilePath,
        GHC.Generics.Rec1 (HGit.Core.Types.FileTreeEntity a2) a1)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ a1
                   (x :: (HGit.Core.Types.PartialFilePath,
                          HGit.Core.Types.FileTreeEntity a1 a)) ->
                 case x of wild { (,) x1 y ->
                 (x1,
                  y `cast`
                  (Sym (GHC.Generics.N:Rec1[0]
                            <Type>_N <HGit.Core.Types.FileTreeEntity a1>_R) <a>_N)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fGeneric1FileTreeEntity ::
    GHC.Generics.Generic1 (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ Type
                  @ (HGit.Core.Types.FileTreeEntity a)
                  (HGit.Core.Types.$fGeneric1FileTreeEntity1 @ a)
                    `cast`
                  (forall (a1 :: <Type>_N).
                   <HGit.Core.Types.FileTreeEntity a a1>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <Type>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "FileTreeEntity"
                                     "HGit.Core.Types"
                                     "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R a))
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "DirEntity"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         GHC.Generics.Par1)>_R) ; Sub (Sym (HGit.Core.Types.Rep1_FileTreeEntity[0]
                                                                                                <a>_N))) <a1>_N)
                  (HGit.Core.Types.$fFromJSON1FileTreeEntity_$cto1 @ a) -}
ae33a7ec835849f6fc910a468589c69e
  $fGeneric1FileTreeEntity1 ::
    HGit.Core.Types.FileTreeEntity a1 a2
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R a1)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               GHC.Generics.Par1))
         a2
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ a1 (x :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case x of wild {
                   HGit.Core.Types.FileEntity g3
                   -> GHC.Generics.L1
                        @ Type
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1))
                        @ a1
                        g3
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <Type>_N
                                  <GHC.Generics.R>_P
                                  <a>_R
                                  <a1>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                      <Type>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         a>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                          <Type>_N
                                                                          <GHC.Generics.C>_P
                                                                          <'GHC.Generics.MetaCons
                                                                             "FileEntity"
                                                                             'GHC.Generics.PrefixI
                                                                             'GHC.Types.False>_P
                                                                          <GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                'GHC.Maybe.Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                a)>_R)) <a1>_N)
                   HGit.Core.Types.DirEntity g3
                   -> GHC.Generics.R1
                        @ Type
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1))
                        @ a1
                        g3
                          `cast`
                        (Sym (GHC.Generics.N:Par1[0] <a1>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                         <Type>_N
                                                                         <GHC.Generics.S>_P
                                                                         <'GHC.Generics.MetaSel
                                                                            'GHC.Maybe.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy>_P
                                                                         <GHC.Generics.Par1>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                           <Type>_N
                                                                                                           <GHC.Generics.C>_P
                                                                                                           <'GHC.Generics.MetaCons
                                                                                                              "DirEntity"
                                                                                                              'GHC.Generics.PrefixI
                                                                                                              'GHC.Types.False>_P
                                                                                                           <GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 'GHC.Maybe.Nothing
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              GHC.Generics.Par1>_R)) <a1>_N) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob ::
    GHC.Classes.Ord a => GHC.Classes.Ord (HGit.Core.Types.Blob a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (HGit.Core.Types.Blob a)
                  (HGit.Core.Types.$fOrdBlob_$cp1Ord @ a v)
                  (HGit.Core.Types.$fOrdBlob_$ccompare @ a v)
                  (HGit.Core.Types.$fOrdBlob_$c< @ a v)
                  (HGit.Core.Types.$fOrdBlob_$c<= @ a v)
                  (\ (a1 :: HGit.Core.Types.Blob a) (b :: HGit.Core.Types.Blob a) ->
                   HGit.Core.Types.$fOrdBlob_$c< @ a v b a1)
                  (HGit.Core.Types.$fOrdBlob_$c>= @ a v)
                  (HGit.Core.Types.$fOrdBlob_$cmax @ a v)
                  (HGit.Core.Types.$fOrdBlob_$cmin @ a v) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$c< ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: HGit.Core.Types.Blob a)
                   (b :: HGit.Core.Types.Blob a) ->
                 case a1 of wild {
                   HGit.Core.Types.Chunk a2 a3
                   -> case b of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ a $dOrd a3 b2
                             GHC.Types.GT -> GHC.Types.False }
                        HGit.Core.Types.Empty -> GHC.Types.True }
                   HGit.Core.Types.Empty
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$c<= ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: HGit.Core.Types.Blob a)
                   (b :: HGit.Core.Types.Blob a) ->
                 case b of wild {
                   HGit.Core.Types.Chunk a2 a3
                   -> case a1 of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> case GHC.Classes.< @ a $dOrd a3 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.GT -> GHC.Types.True }
                        HGit.Core.Types.Empty -> GHC.Types.False }
                   HGit.Core.Types.Empty
                   -> case a1 of wild1 { DEFAULT -> GHC.Types.True } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$c>= ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: HGit.Core.Types.Blob a)
                   (b :: HGit.Core.Types.Blob a) ->
                 case a1 of wild {
                   HGit.Core.Types.Chunk a2 a3
                   -> case b of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> case GHC.Classes.< @ a $dOrd a3 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.GT -> GHC.Types.True }
                        HGit.Core.Types.Empty -> GHC.Types.False }
                   HGit.Core.Types.Empty
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$ccompare ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a
    -> HGit.Core.Types.Blob a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: HGit.Core.Types.Blob a)
                   (b :: HGit.Core.Types.Blob a) ->
                 case a1 of wild {
                   HGit.Core.Types.Chunk a2 a3
                   -> case b of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b1 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ a $dOrd a3 b2
                             GHC.Types.GT -> GHC.Types.GT }
                        HGit.Core.Types.Empty -> GHC.Types.LT }
                   HGit.Core.Types.Empty
                   -> case b of wild1 {
                        HGit.Core.Types.Chunk ipv ipv1 -> GHC.Types.GT
                        HGit.Core.Types.Empty -> GHC.Types.EQ } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$cmax ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a
    -> HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: HGit.Core.Types.Blob a)
                   (y :: HGit.Core.Types.Blob a) ->
                 case y of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> case x of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             GHC.Types.LT -> wild1
                             GHC.Types.EQ
                             -> case GHC.Classes.< @ a $dOrd a2 b2 of wild3 {
                                  GHC.Types.False -> wild GHC.Types.True -> wild1 }
                             GHC.Types.GT -> wild }
                        HGit.Core.Types.Empty -> HGit.Core.Types.Empty @ a }
                   HGit.Core.Types.Empty
                   -> case x of wild1 { DEFAULT -> HGit.Core.Types.Empty @ a } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$cmin ::
    GHC.Classes.Ord a =>
    HGit.Core.Types.Blob a
    -> HGit.Core.Types.Blob a -> HGit.Core.Types.Blob a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: HGit.Core.Types.Blob a)
                   (y :: HGit.Core.Types.Blob a) ->
                 case y of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> case x of wild1 {
                        HGit.Core.Types.Chunk b1 b2
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             GHC.Types.LT -> wild
                             GHC.Types.EQ
                             -> case GHC.Classes.< @ a $dOrd a2 b2 of wild3 {
                                  GHC.Types.False -> wild1 GHC.Types.True -> wild }
                             GHC.Types.GT -> wild1 }
                        HGit.Core.Types.Empty -> wild }
                   HGit.Core.Types.Empty -> x }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fOrdBlob_$cp1Ord ::
    GHC.Classes.Ord a => GHC.Classes.Eq (HGit.Core.Types.Blob a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 HGit.Core.Types.$fEqBlob @ a (GHC.Classes.$p1Ord @ a $dOrd)) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Ord (HGit.Core.Types.Commit a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Ord a)
                      (v1 :: GHC.Classes.Ord b).
                  @ (HGit.Core.Types.Commit a b)
                  (HGit.Core.Types.$fOrdCommit_$cp1Ord @ a @ b v v1)
                  (HGit.Core.Types.$fOrdCommit_$ccompare @ a @ b v v1)
                  (HGit.Core.Types.$fOrdCommit_$c< @ a @ b v v1)
                  (HGit.Core.Types.$fOrdCommit_$c<= @ a @ b v v1)
                  (\ (a1 :: HGit.Core.Types.Commit a b)
                     (b1 :: HGit.Core.Types.Commit a b) ->
                   HGit.Core.Types.$fOrdCommit_$c< @ a @ b v v1 b1 a1)
                  (HGit.Core.Types.$fOrdCommit_$c>= @ a @ b v v1)
                  (HGit.Core.Types.$fOrdCommit_$cmax @ a @ b v v1)
                  (HGit.Core.Types.$fOrdCommit_$cmin @ a @ b v v1) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$c< ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.Commit a b)
                   (b1 :: HGit.Core.Types.Commit a b) ->
                 case a1 of wild {
                   HGit.Core.Types.NullCommit
                   -> case b1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.False
                        HGit.Core.Types.Commit ipv ipv1 ipv2 -> GHC.Types.True }
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case b1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.False
                        HGit.Core.Types.Commit b2 b3 b4
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case GHC.Classes.compare @ a $dOrd a3 b3 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ -> GHC.Base.$fOrdNonEmpty_$c< @ b $dOrd1 a4 b4
                                  GHC.Types.GT -> GHC.Types.False }
                             GHC.Types.GT -> GHC.Types.False } } }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$c<= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.Commit a b)
                   (b1 :: HGit.Core.Types.Commit a b) ->
                 case HGit.Core.Types.$fOrdCommit_$c<
                        @ a
                        @ b
                        $dOrd
                        $dOrd1
                        b1
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$c>= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.Commit a b)
                   (b1 :: HGit.Core.Types.Commit a b) ->
                 case HGit.Core.Types.$fOrdCommit_$c<
                        @ a
                        @ b
                        $dOrd
                        $dOrd1
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$ccompare ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> GHC.Types.Ordering
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.Commit a b)
                   (b1 :: HGit.Core.Types.Commit a b) ->
                 case a1 of wild {
                   HGit.Core.Types.NullCommit
                   -> case b1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.EQ
                        HGit.Core.Types.Commit ipv ipv1 ipv2 -> GHC.Types.LT }
                   HGit.Core.Types.Commit a2 a3 a4
                   -> case b1 of wild1 {
                        HGit.Core.Types.NullCommit -> GHC.Types.GT
                        HGit.Core.Types.Commit b2 b3 b4
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case GHC.Classes.compare @ a $dOrd a3 b3 of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ -> GHC.Base.$fOrdNonEmpty_$ccompare @ b $dOrd1 a4 b4
                                  GHC.Types.GT -> GHC.Types.GT }
                             GHC.Types.GT -> GHC.Types.GT } } }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$cmax ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> HGit.Core.Types.Commit a b
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (x :: HGit.Core.Types.Commit a b)
                   (y :: HGit.Core.Types.Commit a b) ->
                 case HGit.Core.Types.$fOrdCommit_$c<
                        @ a
                        @ b
                        $dOrd
                        $dOrd1
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$cmin ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Commit a b
    -> HGit.Core.Types.Commit a b -> HGit.Core.Types.Commit a b
  {- Arity: 4,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,C(C1(U)),A,A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (x :: HGit.Core.Types.Commit a b)
                   (y :: HGit.Core.Types.Commit a b) ->
                 case HGit.Core.Types.$fOrdCommit_$c<
                        @ a
                        @ b
                        $dOrd
                        $dOrd1
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
34aca104485ce79d597049c5ea286be1
  $fOrdCommit_$cp1Ord ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Eq (HGit.Core.Types.Commit a b)
  {- Arity: 2,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b) ->
                 HGit.Core.Types.$fEqCommit
                   @ a
                   @ b
                   (GHC.Classes.$p1Ord @ a $dOrd)
                   (GHC.Classes.$p1Ord @ b $dOrd1)) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Ord (HGit.Core.Types.Dir a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Ord a)
                      (v1 :: GHC.Classes.Ord b).
                  @ (HGit.Core.Types.Dir a b)
                  (HGit.Core.Types.$fOrdDir_$cp1Ord @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$ccompare @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$c< @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$c<= @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$c> @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$c>= @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$cmax @ a @ b v v1)
                  (HGit.Core.Types.$fOrdDir_$cmin @ a @ b v v1) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$c< ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (HGit.Core.Types.FileTreeEntity a b)
                   = HGit.Core.Types.$fOrdFileTreeEntity @ a @ b $dOrd $dOrd1
                 } in
                 let {
                   $dOrd3 :: GHC.Classes.Ord
                               (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)
                   = GHC.Classes.$fOrd(,)
                       @ [GHC.Types.Char]
                       @ (HGit.Core.Types.FileTreeEntity a b)
                       GHC.Classes.$fOrd[]_$s$fOrd[]1
                       $dOrd2
                 } in
                 \ (a1 :: HGit.Core.Types.Dir a b)
                   (b1 :: HGit.Core.Types.Dir a b) ->
                 case a1 of wild { HGit.Core.Types.Dir a2 ->
                 case b1 of wild1 { HGit.Core.Types.Dir b2 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        $dOrd3
                        a2
                        b2 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$c<= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: HGit.Core.Types.Dir a b)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$c<= @ a @ b w w1 ww1 ww3 } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$c> ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: HGit.Core.Types.Dir a b)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$c> @ a @ b w w1 ww1 ww3 } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$c>= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: HGit.Core.Types.Dir a b)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$c>= @ a @ b w w1 ww1 ww3 } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$ccompare ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (HGit.Core.Types.FileTreeEntity a b)
                   = HGit.Core.Types.$fOrdFileTreeEntity @ a @ b $dOrd $dOrd1
                 } in
                 let {
                   $dOrd3 :: GHC.Classes.Ord
                               (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)
                   = GHC.Classes.$fOrd(,)
                       @ [GHC.Types.Char]
                       @ (HGit.Core.Types.FileTreeEntity a b)
                       GHC.Classes.$fOrd[]_$s$fOrd[]1
                       $dOrd2
                 } in
                 \ (a1 :: HGit.Core.Types.Dir a b)
                   (b1 :: HGit.Core.Types.Dir a b) ->
                 case a1 of wild { HGit.Core.Types.Dir a2 ->
                 case b1 of wild1 { HGit.Core.Types.Dir b2 ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity a b)
                   $dOrd3
                   a2
                   b2 } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$cmax ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> HGit.Core.Types.Dir a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: HGit.Core.Types.Dir a b)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           (HGit.Core.Types.$fOrdFileTreeEntity @ a @ b w w1))
                        ww3
                        ww1 of wild {
                   DEFAULT -> HGit.Core.Types.Dir @ a @ b ww3
                   GHC.Types.LT -> HGit.Core.Types.Dir @ a @ b ww1 } } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$cmin ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.Dir a b
    -> HGit.Core.Types.Dir a b -> HGit.Core.Types.Dir a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: HGit.Core.Types.Dir a b)
                   (w3 :: HGit.Core.Types.Dir a b) ->
                 case w2 of ww { HGit.Core.Types.Dir ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           (HGit.Core.Types.$fOrdFileTreeEntity @ a @ b w w1))
                        ww3
                        ww1 of wild {
                   DEFAULT -> HGit.Core.Types.Dir @ a @ b ww1
                   GHC.Types.LT -> HGit.Core.Types.Dir @ a @ b ww3 } } }) -}
be80b6a731843e8b4df725ad76728847
  $fOrdDir_$cp1Ord ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Eq (HGit.Core.Types.Dir a b)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b) ->
                 HGit.Core.Types.$fEqDir
                   @ a
                   @ b
                   (GHC.Classes.$p1Ord @ a $dOrd)
                   (GHC.Classes.$p1Ord @ b $dOrd1)) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Ord (HGit.Core.Types.FileTreeEntity a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Ord a)
                      (v1 :: GHC.Classes.Ord b).
                  @ (HGit.Core.Types.FileTreeEntity a b)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$cp1Ord @ a @ b v v1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$ccompare @ a @ b v v1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$c< @ a @ b v v1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$c<= @ a @ b v v1)
                  (\ (a1 :: HGit.Core.Types.FileTreeEntity a b)
                     (b1 :: HGit.Core.Types.FileTreeEntity a b) ->
                   HGit.Core.Types.$fOrdFileTreeEntity_$c< @ a @ b v v1 b1 a1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$c>= @ a @ b v v1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$cmax @ a @ b v v1)
                  (HGit.Core.Types.$fOrdFileTreeEntity_$cmin @ a @ b v v1) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$c< ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.FileTreeEntity a b)
                   (b1 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case a1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity b2 -> GHC.Classes.< @ a $dOrd a2 b2
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.True }
                   HGit.Core.Types.DirEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.False
                        HGit.Core.Types.DirEntity b2
                        -> GHC.Classes.< @ b $dOrd1 a2 b2 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$c<= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.FileTreeEntity a b)
                   (b1 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case b1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> case a1 of wild1 {
                        HGit.Core.Types.FileEntity b2
                        -> case GHC.Classes.< @ a $dOrd a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.False }
                   HGit.Core.Types.DirEntity a2
                   -> case a1 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.True
                        HGit.Core.Types.DirEntity b2
                        -> case GHC.Classes.< @ b $dOrd1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$c>= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.FileTreeEntity a b)
                   (b1 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case a1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity b2
                        -> case GHC.Classes.< @ a $dOrd a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.False }
                   HGit.Core.Types.DirEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.True
                        HGit.Core.Types.DirEntity b2
                        -> case GHC.Classes.< @ b $dOrd1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$ccompare ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (a1 :: HGit.Core.Types.FileTreeEntity a b)
                   (b1 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case a1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity b2
                        -> GHC.Classes.compare @ a $dOrd a2 b2
                        HGit.Core.Types.DirEntity ipv -> GHC.Types.LT }
                   HGit.Core.Types.DirEntity a2
                   -> case b1 of wild1 {
                        HGit.Core.Types.FileEntity ipv -> GHC.Types.GT
                        HGit.Core.Types.DirEntity b2
                        -> GHC.Classes.compare @ b $dOrd1 a2 b2 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$cmax ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (x :: HGit.Core.Types.FileTreeEntity a b)
                   (y :: HGit.Core.Types.FileTreeEntity a b) ->
                 case y of wild {
                   HGit.Core.Types.FileEntity a1
                   -> case x of wild1 {
                        HGit.Core.Types.FileEntity b1
                        -> case GHC.Classes.< @ a $dOrd a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 }
                        HGit.Core.Types.DirEntity ipv -> wild1 }
                   HGit.Core.Types.DirEntity a1
                   -> case x of wild1 {
                        HGit.Core.Types.FileEntity ipv -> wild
                        HGit.Core.Types.DirEntity b1
                        -> case GHC.Classes.< @ b $dOrd1 a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$cmin ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b
    -> HGit.Core.Types.FileTreeEntity a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b)
                   (x :: HGit.Core.Types.FileTreeEntity a b)
                   (y :: HGit.Core.Types.FileTreeEntity a b) ->
                 case y of wild {
                   HGit.Core.Types.FileEntity a1
                   -> case x of wild1 {
                        HGit.Core.Types.FileEntity b1
                        -> case GHC.Classes.< @ a $dOrd a1 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild }
                        HGit.Core.Types.DirEntity ipv -> wild }
                   HGit.Core.Types.DirEntity a1
                   -> case x of wild1 {
                        HGit.Core.Types.FileEntity ipv -> wild1
                        HGit.Core.Types.DirEntity b1
                        -> case GHC.Classes.< @ b $dOrd1 a1 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fOrdFileTreeEntity_$cp1Ord ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    GHC.Classes.Eq (HGit.Core.Types.FileTreeEntity a b)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dOrd1 :: GHC.Classes.Ord b) ->
                 HGit.Core.Types.$fEqFileTreeEntity
                   @ a
                   @ b
                   (GHC.Classes.$p1Ord @ a $dOrd)
                   (GHC.Classes.$p1Ord @ b $dOrd1)) -}
34aca104485ce79d597049c5ea286be1
  $fShow1Commit ::
    GHC.Show.Show a =>
    Data.Functor.Classes.Show1 (HGit.Core.Types.Commit a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (HGit.Core.Types.Commit a)
                  (HGit.Core.Types.$fShow1Commit_$cliftShowsPrec @ a v)
                  (HGit.Core.Types.$fShow1Commit_$cliftShowList @ a v) -}
73627b0f1aa66fee8a54cef628cb30e9
  $fShow1Commit1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Commit "#) -}
6674662c0a7fe1fff4b43c99b16e2773
  $fShow1Commit2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d05665bcef6415366042937b13c31b23
  $fShow1Commit3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   HGit.Core.Types.$fFromJSON1Commit7) -}
34aca104485ce79d597049c5ea286be1
  $fShow1Commit_$cliftShowList ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.Commit a a1]
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,C(C1(C(U)))><L,C(C(U))><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   @ a1
                   (sp :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (sl :: [a1] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.Commit a a1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Commit a a1)
                   (HGit.Core.Types.$fShow1Commit_$cliftShowsPrec
                      @ a
                      $dShow
                      @ a1
                      sp
                      sl
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
34aca104485ce79d597049c5ea286be1
  $fShow1Commit_$cliftShowsPrec ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.Commit a a1
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*C1(C1(C(U)))><L,1*C1(C(U))><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   @ a1
                   (sp1 :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (sl1 :: [a1] -> GHC.Show.ShowS)
                   (p :: GHC.Types.Int)
                   (value :: HGit.Core.Types.Commit a a1) ->
                 case value of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fShow1Commit3
                   HGit.Core.Types.Commit arg1 arg2 arg3
                   -> case p of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow HGit.Core.Types.$fShow1Commit2 arg2
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case arg3 of ww2 { GHC.Base.:| ww3 ww4 ->
                          Data.Functor.Classes.$w$cliftShowsPrec1 @ a1 sp1 sl1 11# ww3 ww4 }
                      } in
                      let {
                        p1 :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            HGit.Core.Types.$fShow1Commit1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.$fShow(,)3
                               (GHC.Show.showLitString
                                  arg1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (f (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (g x1)))))))
                      } in
                      case GHC.Prim.># x 10# of lwild {
                        DEFAULT -> p1
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p1
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } } }) -}
be80b6a731843e8b4df725ad76728847
  $fShow1Dir ::
    GHC.Show.Show a =>
    Data.Functor.Classes.Show1 (HGit.Core.Types.Dir a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (HGit.Core.Types.Dir a)
                  (HGit.Core.Types.$fShow1Dir_$cliftShowsPrec @ a v)
                  (HGit.Core.Types.$fShow1Dir_$cliftShowList @ a v) -}
9b03d8bfccd069a71badd11428636ea6
  $fShow1Dir1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fShow1Dir2) -}
72155349478910101aeb043f7c22cfa2
  $fShow1Dir2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DirEntity "#) -}
dbdc40b65cdf9b8b066eea977d0ff57c
  $fShow1Dir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   HGit.Core.Types.$fShow1Dir4) -}
e52b3713877385d5832043d64c7afacb
  $fShow1Dir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FileEntity "#) -}
8b64d764e5a438f815071e7c6e382e6b
  $fShow1Dir5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '}'#) -}
610ae74b022ee68fee3f0795658ee5af
  $fShow1Dir6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dirEntries = "#) -}
d9f0915ce75721a3db7de2985a9b4628
  $fShow1Dir7 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '{'#) -}
830748a76dc81b0bbf30a08db859768c
  $fShow1Dir8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dir "#) -}
be80b6a731843e8b4df725ad76728847
  $fShow1Dir_$cliftShowList ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.Dir a a1]
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,C(C1(C1(U)))><L,A><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   @ a1
                   (sp :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (sl :: [a1] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.Dir a a1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Dir a a1)
                   (HGit.Core.Types.$fShow1Dir_$cliftShowsPrec
                      @ a
                      $dShow
                      @ a1
                      sp
                      sl
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
be80b6a731843e8b4df725ad76728847
  $fShow1Dir_$cliftShowsPrec ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.Dir a a1
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,C(C1(C1(U)))><L,A><S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   @ a1
                   (w1 :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (w2 :: [a1] -> GHC.Show.ShowS)
                   (w3 :: GHC.Types.Int)
                   (w4 :: HGit.Core.Types.Dir a a1)
                   (w5 :: GHC.Base.String) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$cliftShowsPrec @ a w @ a1 w1 ww1 ww3 w5 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fShow1FileTreeEntity ::
    GHC.Show.Show a =>
    Data.Functor.Classes.Show1 (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (HGit.Core.Types.FileTreeEntity a)
                  (HGit.Core.Types.$fShow1FileTreeEntity_$cliftShowsPrec @ a v)
                  (HGit.Core.Types.$fShow1FileTreeEntity_$cliftShowList @ a v) -}
ae33a7ec835849f6fc910a468589c69e
  $fShow1FileTreeEntity_$cliftShowList ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.FileTreeEntity a a1]
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,C(C1(C(U)))><L,A><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   @ a1
                   (sp :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (sl :: [a1] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.FileTreeEntity a a1])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.FileTreeEntity a a1)
                   (HGit.Core.Types.$fShow1FileTreeEntity_$cliftShowsPrec
                      @ a
                      $dShow
                      @ a1
                      sp
                      sl
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
ae33a7ec835849f6fc910a468589c69e
  $fShow1FileTreeEntity_$cliftShowsPrec ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> ([a1] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.FileTreeEntity a a1
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*C1(C1(C(U)))><L,A><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   @ a1
                   (w1 :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (w2 :: [a1] -> GHC.Show.ShowS)
                   (w3 :: GHC.Types.Int)
                   (w4 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 HGit.Core.Types.$w$cliftShowsPrec1 @ a w @ a1 w1 ww1 w4 }) -}
34aca104485ce79d597049c5ea286be1
  $fShow2Commit :: Data.Functor.Classes.Show2 HGit.Core.Types.Commit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Commit
                  HGit.Core.Types.$fShow2Commit_$cliftShowsPrec2
                  HGit.Core.Types.$fShow2Commit_$cliftShowList2 -}
34aca104485ce79d597049c5ea286be1
  $fShow2Commit_$cliftShowList2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.Commit a b]
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,C(C1(C(U)))><L,A><L,C(C1(C(U)))><L,C(C(U))><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   (sp1 :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (sl1 :: [a] -> GHC.Show.ShowS)
                   (sp2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (sl2 :: [b] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.Commit a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Commit a b)
                   (HGit.Core.Types.$fShow2Commit_$cliftShowsPrec2
                      @ a
                      @ b
                      sp1
                      sl1
                      sp2
                      sl2
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
34aca104485ce79d597049c5ea286be1
  $fShow2Commit_$cliftShowsPrec2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.Commit a b
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*C1(C1(C(U)))><L,A><L,1*C1(C1(C(U)))><L,1*C1(C(U))><L,1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: [a] -> GHC.Show.ShowS)
                   (w2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (w3 :: [b] -> GHC.Show.ShowS)
                   (w4 :: GHC.Types.Int)
                   (w5 :: HGit.Core.Types.Commit a b) ->
                 HGit.Core.Types.$w$cliftShowsPrec2 @ a @ b w w2 w3 w4 w5) -}
be80b6a731843e8b4df725ad76728847
  $fShow2Dir :: Data.Functor.Classes.Show2 HGit.Core.Types.Dir
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Dir
                  HGit.Core.Types.$fShow2Dir_$cliftShowsPrec2
                  HGit.Core.Types.$fShow2Dir_$cliftShowList2 -}
be80b6a731843e8b4df725ad76728847
  $fShow2Dir_$cliftShowList2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.Dir a b]
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,A><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   (sp1 :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (sl1 :: [a] -> GHC.Show.ShowS)
                   (sp2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (sl2 :: [b] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.Dir a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Dir a b)
                   (HGit.Core.Types.$fShow2Dir_$cliftShowsPrec2
                      @ a
                      @ b
                      sp1
                      sl1
                      sp2
                      sl2
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
be80b6a731843e8b4df725ad76728847
  $fShow2Dir_$cliftShowsPrec2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.Dir a b
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,A><S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: [a] -> GHC.Show.ShowS)
                   (w2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (w3 :: [b] -> GHC.Show.ShowS)
                   (w4 :: GHC.Types.Int)
                   (w5 :: HGit.Core.Types.Dir a b)
                   (w6 :: GHC.Base.String) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$cliftShowsPrec3 @ a @ b w w2 ww1 ww3 w6 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fShow2FileTreeEntity ::
    Data.Functor.Classes.Show2 HGit.Core.Types.FileTreeEntity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.FileTreeEntity
                  HGit.Core.Types.$fShow2FileTreeEntity_$cliftShowsPrec2
                  HGit.Core.Types.$fShow2FileTreeEntity_$cliftShowList2 -}
ae33a7ec835849f6fc910a468589c69e
  $fShow2FileTreeEntity_$cliftShowList2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> [HGit.Core.Types.FileTreeEntity a b]
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,C(C1(C(U)))><L,A><L,C(C1(C(U)))><L,A><S,1*U><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   (sp1 :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (sl1 :: [a] -> GHC.Show.ShowS)
                   (sp2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (sl2 :: [b] -> GHC.Show.ShowS)
                   (eta :: [HGit.Core.Types.FileTreeEntity a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.FileTreeEntity a b)
                   (HGit.Core.Types.$fShow2FileTreeEntity_$cliftShowsPrec2
                      @ a
                      @ b
                      sp1
                      sl1
                      sp2
                      sl2
                      HGit.Core.Types.$fFoldableBlob7)
                   eta
                   eta1) -}
ae33a7ec835849f6fc910a468589c69e
  $fShow2FileTreeEntity_$cliftShowsPrec2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> ([a] -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.FileTreeEntity a b
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*C1(C1(C(U)))><L,A><L,1*C1(C1(C(U)))><L,A><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: [a] -> GHC.Show.ShowS)
                   (w2 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (w3 :: [b] -> GHC.Show.ShowS)
                   (w4 :: GHC.Types.Int)
                   (w5 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 HGit.Core.Types.$w$cliftShowsPrec4 @ a @ b w w2 ww1 w5 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fShowBlob ::
    GHC.Show.Show a => GHC.Show.Show (HGit.Core.Types.Blob a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (HGit.Core.Types.Blob a)
                  (HGit.Core.Types.$fShowBlob_$cshowsPrec @ a v)
                  (HGit.Core.Types.$fShowBlob_$cshow @ a v)
                  (HGit.Core.Types.$fShowBlob_$cshowList @ a v) -}
81ecd45af41a020ef3969768ff0bde8e
  $fShowBlob1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   HGit.Core.Types.$fFromJSON1Blob2) -}
7628aac408dda8ca93724e810e8b2848
  $fShowBlob2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Chunk "#) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fShowBlob_$cshow ::
    GHC.Show.Show a => HGit.Core.Types.Blob a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: HGit.Core.Types.Blob a) ->
                 case x of wild {
                   HGit.Core.Types.Chunk b1 b2
                   -> GHC.CString.unpackAppendCString#
                        HGit.Core.Types.$fShowBlob2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (GHC.Show.showsPrec
                                       @ a
                                       $dShow
                                       HGit.Core.Types.$fShow1Commit2
                                       b2
                                       (GHC.Types.[] @ GHC.Types.Char))))))
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fFromJSON1Blob2 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fShowBlob_$cshowList ::
    GHC.Show.Show a => [HGit.Core.Types.Blob a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [HGit.Core.Types.Blob a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Blob a)
                   (HGit.Core.Types.$fShowBlob_$cshowsPrec
                      @ a
                      $dShow
                      HGit.Core.Types.$fFoldableBlob7)
                   ls
                   s) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fShowBlob_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> HGit.Core.Types.Blob a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (a1 :: GHC.Types.Int)
                   (ds :: HGit.Core.Types.Blob a) ->
                 case ds of wild {
                   HGit.Core.Types.Chunk b1 b2
                   -> case a1 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow HGit.Core.Types.$fShow1Commit2 b2
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             HGit.Core.Types.$fShowBlob2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                HGit.Core.Types.$fShowBlob2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (g (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.$fShow(,)2
                                                  x1))))))) } }
                   HGit.Core.Types.Empty -> HGit.Core.Types.$fShowBlob1 }) -}
be80b6a731843e8b4df725ad76728847
  $fShowDir ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (HGit.Core.Types.Dir a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show a)
                      (v1 :: GHC.Show.Show b).
                  @ (HGit.Core.Types.Dir a b)
                  (HGit.Core.Types.$fShowDir_$cshowsPrec @ a @ b v v1)
                  (HGit.Core.Types.$fShowDir_$cshow @ a @ b v v1)
                  (HGit.Core.Types.$fShowDir_$cshowList @ a @ b v v1) -}
c2b0f70e0f6fb5f1e2a50b441a259924
  $fShowDir1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
9134aa85a71b2f5c3ceefee8bdaf971a
  $fShowDir2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dir {"#) -}
be80b6a731843e8b4df725ad76728847
  $fShowDir_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    HGit.Core.Types.Dir a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U(1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: HGit.Core.Types.Dir a b) ->
                 HGit.Core.Types.$fShowDir_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   HGit.Core.Types.$fFoldableBlob7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
be80b6a731843e8b4df725ad76728847
  $fShowDir_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [HGit.Core.Types.Dir a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (ls :: [HGit.Core.Types.Dir a b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.Dir a b)
                   (HGit.Core.Types.$fShowDir_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      HGit.Core.Types.$fFoldableBlob7)
                   ls
                   s) -}
be80b6a731843e8b4df725ad76728847
  $fShowDir_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> HGit.Core.Types.Dir a b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: HGit.Core.Types.Dir a b)
                   (w4 :: GHC.Base.String) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { HGit.Core.Types.Dir ww3 ->
                 HGit.Core.Types.$w$cshowsPrec @ a @ b w w1 ww1 ww3 w4 } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fShowFileTreeEntity ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Show.Show (HGit.Core.Types.FileTreeEntity a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show a)
                      (v1 :: GHC.Show.Show b).
                  @ (HGit.Core.Types.FileTreeEntity a b)
                  (HGit.Core.Types.$fShowFileTreeEntity_$cshowsPrec @ a @ b v v1)
                  (HGit.Core.Types.$fShowFileTreeEntity_$cshow @ a @ b v v1)
                  (HGit.Core.Types.$fShowFileTreeEntity_$cshowList @ a @ b v v1) -}
ae33a7ec835849f6fc910a468589c69e
  $fShowFileTreeEntity_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    HGit.Core.Types.FileTreeEntity a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: HGit.Core.Types.FileTreeEntity a b) ->
                 case x of wild {
                   HGit.Core.Types.FileEntity b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        HGit.Core.Types.$fShow1Dir3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           HGit.Core.Types.$fShow1Commit2
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   HGit.Core.Types.DirEntity b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        HGit.Core.Types.$fShow1Dir1
                        (GHC.Show.showsPrec
                           @ b
                           $dShow1
                           HGit.Core.Types.$fShow1Commit2
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $fShowFileTreeEntity_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [HGit.Core.Types.FileTreeEntity a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (ls :: [HGit.Core.Types.FileTreeEntity a b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (HGit.Core.Types.FileTreeEntity a b)
                   (HGit.Core.Types.$fShowFileTreeEntity_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      HGit.Core.Types.$fFoldableBlob7)
                   ls
                   s) -}
ae33a7ec835849f6fc910a468589c69e
  $fShowFileTreeEntity_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 HGit.Core.Types.$w$cshowsPrec1 @ a @ b w w1 ww1 w3 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Blob ::
    Data.Aeson.Types.ToJSON.ToJSON1 HGit.Core.Types.Blob
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fToJSON1Blob_$cliftToJSON
                  HGit.Core.Types.$fToJSON1Blob_$cliftToJSONList
                  HGit.Core.Types.$fToJSON1Blob_$cliftToEncoding
                  HGit.Core.Types.$fToJSON1Blob_$cliftToEncodingList -}
a2b3e6c4e08069647aef7900cf6753b1
  $fToJSON1Blob1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
ef9d6f4fef2e2bf5ebcff885df8df6e5
  $fToJSON1Blob10 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Blob11)) -}
684a6beb146919ca5ebe8e8503e467c9
  $fToJSON1Blob11 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Blob12 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
3d335551b1b313d127865ad7750b6ffb
  $fToJSON1Blob12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1Blob11
                   0#
                   ipv1 }) -}
11046621d0b8b1573367d488c4bc9663
  $fToJSON1Blob2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>,
     Unfolding: (\ @ r
                   (w2 :: Data.ByteString.Builder.Internal.BuildStep r)
                   (eta :: Data.ByteString.Builder.Internal.BufferRange)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of ww1 { Data.ByteString.Builder.Internal.BufferRange ww2 ww3 ->
                 let {
                   w1 :: Data.ByteString.Builder.Internal.BufferRange
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2 -}
                   = Data.Aeson.Encoding.Internal.closeCurly1 @ r w2
                 } in
                 let {
                   lvl45 :: Data.ByteString.Builder.Internal.BufferRange
                            -> GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                   = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.writeWord8OffAddr#
                            @ GHC.Prim.RealWorld
                            dt
                            0#
                            58##
                            eta2 of s2 { DEFAULT ->
                     Data.Aeson.Encoding.Builder.$wstring
                       HGit.Core.Types.$fFromJSON1Blob2
                       @ r
                       w1
                         `cast`
                       ((<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R)) ; Nth:2
                                                                                                  (<Data.ByteString.Builder.Internal.BuildStep
                                                                                                      r>_R
                                                                                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                                                   ->_R GHC.Types.N:IO[0]
                                                                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                                                                               r>_R))
                       (GHC.Prim.plusAddr# dt 1#)
                       dt1
                       s2 } }
                 } in
                 let {
                   w4 :: Data.ByteString.Builder.Internal.BufferRange
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [2],
                        Unfolding: InlineRule (2, True, False)
                                   (\ (w :: Data.ByteString.Builder.Internal.BufferRange)
                                      (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case w of ww { Data.ByteString.Builder.Internal.BufferRange ww4 ww5 ->
                                    case GHC.Prim.<# (GHC.Prim.minusAddr# ww5 ww4) 1# of lwild {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                ww4
                                                0#
                                                58##
                                                w4 of s2 { DEFAULT ->
                                         Data.Aeson.Encoding.Builder.$wstring
                                           HGit.Core.Types.$fFromJSON1Blob2
                                           @ r
                                           w1
                                             `cast`
                                           ((<Data.ByteString.Builder.Internal.BufferRange>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) ; Nth:2
                                                                           (<Data.ByteString.Builder.Internal.BuildStep
                                                                               r>_R
                                                                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                            ->_R GHC.Types.N:IO[0]
                                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                                        r>_R))
                                           (GHC.Prim.plusAddr# ww4 1#)
                                           ww5
                                           s2 }
                                      1#
                                      -> (# w4,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              ww4
                                              lvl45
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) } }) -}
                   = \ (w :: Data.ByteString.Builder.Internal.BufferRange)
                       (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of ww { Data.ByteString.Builder.Internal.BufferRange ww4 ww5 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# ww5 ww4) 1# of lwild {
                       DEFAULT
                       -> case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ww4
                                 0#
                                 58##
                                 w5 of s2 { DEFAULT ->
                          Data.Aeson.Encoding.Builder.$wstring
                            HGit.Core.Types.$fFromJSON1Blob2
                            @ r
                            w1
                              `cast`
                            ((<Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal
                                               r>_R)) ; Nth:2
                                                            (<Data.ByteString.Builder.Internal.BuildStep
                                                                r>_R
                                                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                         r>_R))
                            (GHC.Prim.plusAddr# ww4 1#)
                            ww5
                            s2 }
                       1#
                       -> (# w5,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               ww4
                               lvl45
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } }
                 } in
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww3 ww2) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww2
                             0#
                             123##
                             eta1 of s2 { DEFAULT ->
                      Data.Aeson.Encoding.Builder.$wstring
                        Data.Aeson.Types.Internal.defaultTaggedObject3
                        @ r
                        w4
                          `cast`
                        (Nth:3
                             (<Data.ByteString.Builder.Internal.BuildStep r>_R
                              ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal
                                               r>_R)) ; Nth:2
                                                            (<Data.ByteString.Builder.Internal.BuildStep
                                                                r>_R
                                                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                         r>_R))
                        (GHC.Prim.plusAddr# ww2 1#)
                        ww3
                        s2 }
                   1#
                   -> (# eta1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww2
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   123##
                                   eta2 of s2 { DEFAULT ->
                            Data.Aeson.Encoding.Builder.$wstring
                              Data.Aeson.Types.Internal.defaultTaggedObject3
                              @ r
                              w4
                                `cast`
                              (Nth:3
                                   (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                    ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) ; Nth:2
                                                                  (<Data.ByteString.Builder.Internal.BuildStep
                                                                      r>_R
                                                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                   ->_R GHC.Types.N:IO[0]
                                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                                               r>_R))
                              (GHC.Prim.plusAddr# dt 1#)
                              dt1
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) } }) -}
1427a680893790b4bab873a7b30ed0ad
  $fToJSON1Blob3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   HGit.Core.Types.$fToJSON1Blob4
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
64024dfd9fbb918d1f467a3aded9e96b
  $fToJSON1Blob4 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   HGit.Core.Types.$fToJSON1Blob5
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
300dbc256447251078d11afdfe8fe504
  $fToJSON1Blob5 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Blob6)) -}
6eedb6f1c77a2bc1ff3e58191ee90a4c
  $fToJSON1Blob6 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Blob7 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
2778b55dfa30858c96023d10ea1ab844
  $fToJSON1Blob7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1Blob2
                   0#
                   ipv1 }) -}
535bcf60f23696e6a975b18b213e2cd4
  $fToJSON1Blob8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Blob9 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
d372dc3968b073c23432be94cb5365ba
  $fToJSON1Blob9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Data.Aeson.Types.Internal.defaultTaggedObject3
                   0#
                   ipv1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Blob_$cliftToEncoding ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.Blob a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ @ a
                   (te :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (tel :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (eta :: HGit.Core.Types.Blob a) ->
                 case eta of wild {
                   HGit.Core.Types.Chunk g3 g4
                   -> let {
                        w1 :: Data.Aeson.Encoding.Internal.Series
                        = case HGit.Core.Types.$w$dTaggedObject'
                                 @ a
                                 Data.Aeson.Types.Internal.defaultOptions
                                 (Data.Aeson.Types.ToJSON.To1Args
                                    @ Data.Aeson.Encoding.Internal.Encoding
                                    @ Data.Aeson.Types.Generic.One
                                    @ a
                                    @~ <Data.Aeson.Types.Generic.One>_N
                                    te
                                    tel)
                                 Data.Aeson.Types.Internal.defaultTaggedObject1
                                 (GHC.Generics.:*:
                                    @ Type
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         GHC.Generics.Par1)
                                    @ a
                                    g3
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <Type>_N
                                              <GHC.Generics.R>_P
                                              <GHC.Base.String>_R
                                              <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <Type>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Maybe.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   GHC.Base.String>_R) <a>_N)
                                    g4
                                      `cast`
                                    (Sym (GHC.Generics.N:Par1[0] <a>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                   <Type>_N
                                                                                   <GHC.Generics.S>_P
                                                                                   <'GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                   <GHC.Generics.Par1>_R) <a>_N)) of ww { Unit# ww1 ->
                          Data.Aeson.Encoding.Internal.Value
                            (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                             let {
                               w :: Data.ByteString.Builder.Internal.BuildStep r
                               = ww1
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Encoding.Internal.Series>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                   @ r
                                   x
                             } in
                             let {
                               w2 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>,
                                    Unfolding: InlineRule (2, True, False)
                                               (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                                  (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                                Data.Aeson.Encoding.Internal.$wcomma
                                                  @ r
                                                  w
                                                  ww3
                                                  ww4
                                                  w3 }) -}
                               = \ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 Data.Aeson.Encoding.Internal.$wcomma @ r w ww3 ww4 w4 }
                             } in
                             let {
                               lvl45 :: Data.ByteString.Builder.Internal.BufferRange
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                               = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt
                                        0#
                                        58##
                                        eta1 of s2 { DEFAULT ->
                                 Data.Aeson.Encoding.Builder.$wstring
                                   HGit.Core.Types.$fFromJSON1Blob11
                                   @ r
                                   w2
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R))
                                   (GHC.Prim.plusAddr# dt 1#)
                                   dt1
                                   s2 } }
                             } in
                             let {
                               w3 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                               = \ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww4 ww3) 1# of lwild {
                                   DEFAULT
                                   -> case GHC.Prim.writeWord8OffAddr#
                                             @ GHC.Prim.RealWorld
                                             ww3
                                             0#
                                             58##
                                             w5 of s2 { DEFAULT ->
                                      Data.Aeson.Encoding.Builder.$wstring
                                        HGit.Core.Types.$fFromJSON1Blob11
                                        @ r
                                        w2
                                          `cast`
                                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))
                                        (GHC.Prim.plusAddr# ww3 1#)
                                        ww4
                                        s2 }
                                   1#
                                   -> (# w5,
                                         Data.ByteString.Builder.Internal.BufferFull
                                           @ r
                                           1#
                                           ww3
                                           lvl45
                                             `cast`
                                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.ByteString.Builder.Internal.BuildSignal
                                                             r>_R)) #) } }
                             } in
                             (\ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                                (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                              Data.Aeson.Encoding.Builder.$wstring
                                Data.Aeson.Types.Internal.defaultTaggedObject3
                                @ r
                                w3
                                  `cast`
                                (Nth:3
                                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) ; Nth:2
                                                                    (<Data.ByteString.Builder.Internal.BuildStep
                                                                        r>_R
                                                                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                     ->_R GHC.Types.N:IO[0]
                                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                                 r>_R))
                                ww3
                                ww4
                                w5 })
                               `cast`
                             (Nth:3
                                  (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R))))
                              `cast`
                            (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                            <Data.Aeson.Encoding.Internal.Series>_P)) }
                      } in
                      (\ @ r (w2 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       Data.Aeson.Types.ToJSON.$w$cfromPairs
                         @ Data.Aeson.Types.Internal.Value
                         @~ <Data.Aeson.Types.Internal.Value>_N
                         w1
                         @ r
                         w2)
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P))
                   HGit.Core.Types.Empty
                   -> HGit.Core.Types.$fToJSON1Blob2
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P))) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Blob_$cliftToEncodingList ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.Blob a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ @ a
                   (f6 :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (g :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (eta :: [HGit.Core.Types.Blob a]) ->
                 case eta of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = (HGit.Core.Types.$fToJSON1Blob_$cliftToEncoding @ a f6 g x)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = letrec {
                             go :: [HGit.Core.Types.Blob a]
                                   -> Data.Aeson.Encoding.Internal.Encoding'
                                        Data.Aeson.Types.Internal.Value
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds :: [HGit.Core.Types.Blob a]) ->
                               case ds of wild1 {
                                 []
                                 -> HGit.Core.Types.$fToJSON1Blob1
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P))
                                 : y ys
                                 -> (\ @ r1 ->
                                     let {
                                       vs :: Data.Aeson.Encoding.Internal.Encoding'
                                               Data.Aeson.Types.Internal.Value
                                       = go ys
                                     } in
                                     let {
                                       f2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                             -> Data.ByteString.Builder.Internal.BuildStep r1
                                       = (HGit.Core.Types.$fToJSON1Blob_$cliftToEncoding @ a f6 g y)
                                           `cast`
                                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                              <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                           @ r1
                                     } in
                                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r1) ->
                                     let {
                                       w :: Data.ByteString.Builder.Internal.BuildStep r1
                                       = f2
                                           (vs
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                              @ r1
                                              x1)
                                     } in
                                     (\ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                        (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                      Data.Aeson.Encoding.Internal.$wcomma @ r1 w ww1 ww2 w2 })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)))
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P)) }
                           } in
                           (go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       let {
                         w :: Data.ByteString.Builder.Internal.BuildStep r
                         = f (f1
                                (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                       } in
                       (\ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w ww1 ww2 w2 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Blob_$cliftToJSON ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.Blob a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>m1, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.Blob a) ->
                 case HGit.Core.Types.$w$cliftToJSON
                        @ a
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Blob_$cliftToJSONList ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.Blob a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.Blob a]) ->
                 case HGit.Core.Types.$w$cliftToJSONList
                        @ a
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Commit ::
    Data.Aeson.Types.ToJSON.ToJSON1 HGit.Core.Types.HashableCommit
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.HashableCommit
                  HGit.Core.Types.$fToJSON1Commit_$cliftToJSON
                  HGit.Core.Types.$fToJSON1Commit_$cliftToJSONList
                  HGit.Core.Types.$fToJSON1Commit_$cliftToEncoding
                  HGit.Core.Types.$fToJSON1Commit_$cliftToEncodingList -}
8b1f6a342c8b2a92e2ca959614691828
  $fToJSON1Commit1 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, Strictness: <L,C(C1(U(U,U)))><S(SS),1*U(U,U)><S,U>,
     Unfolding: (\ @ r
                   (w2 :: Data.ByteString.Builder.Internal.BuildStep r)
                   (eta :: Data.ByteString.Builder.Internal.BufferRange)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of ww1 { Data.ByteString.Builder.Internal.BufferRange ww2 ww3 ->
                 let {
                   w1 :: Data.ByteString.Builder.Internal.BufferRange
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2 -}
                   = Data.Aeson.Encoding.Internal.closeCurly1 @ r w2
                 } in
                 let {
                   lvl45 :: Data.ByteString.Builder.Internal.BufferRange
                            -> GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                   = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                     case GHC.Prim.writeWord8OffAddr#
                            @ GHC.Prim.RealWorld
                            dt
                            0#
                            58##
                            eta2 of s2 { DEFAULT ->
                     Data.Aeson.Encoding.Builder.$wstring
                       HGit.Core.Types.$fFromJSON1Commit7
                       @ r
                       w1
                         `cast`
                       ((<Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R)) ; Nth:2
                                                                                                  (<Data.ByteString.Builder.Internal.BuildStep
                                                                                                      r>_R
                                                                                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                                                   ->_R GHC.Types.N:IO[0]
                                                                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                                                                               r>_R))
                       (GHC.Prim.plusAddr# dt 1#)
                       dt1
                       s2 } }
                 } in
                 let {
                   w4 :: Data.ByteString.Builder.Internal.BufferRange
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.ByteString.Builder.Internal.BuildSignal r #)
                     {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [2],
                        Unfolding: InlineRule (2, True, False)
                                   (\ (w :: Data.ByteString.Builder.Internal.BufferRange)
                                      (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case w of ww { Data.ByteString.Builder.Internal.BufferRange ww4 ww5 ->
                                    case GHC.Prim.<# (GHC.Prim.minusAddr# ww5 ww4) 1# of lwild {
                                      DEFAULT
                                      -> case GHC.Prim.writeWord8OffAddr#
                                                @ GHC.Prim.RealWorld
                                                ww4
                                                0#
                                                58##
                                                w4 of s2 { DEFAULT ->
                                         Data.Aeson.Encoding.Builder.$wstring
                                           HGit.Core.Types.$fFromJSON1Commit7
                                           @ r
                                           w1
                                             `cast`
                                           ((<Data.ByteString.Builder.Internal.BufferRange>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) ; Nth:2
                                                                           (<Data.ByteString.Builder.Internal.BuildStep
                                                                               r>_R
                                                                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                            ->_R GHC.Types.N:IO[0]
                                                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                                                        r>_R))
                                           (GHC.Prim.plusAddr# ww4 1#)
                                           ww5
                                           s2 }
                                      1#
                                      -> (# w4,
                                            Data.ByteString.Builder.Internal.BufferFull
                                              @ r
                                              1#
                                              ww4
                                              lvl45
                                                `cast`
                                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <Data.ByteString.Builder.Internal.BuildSignal
                                                                r>_R)) #) } }) -}
                   = \ (w :: Data.ByteString.Builder.Internal.BufferRange)
                       (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of ww { Data.ByteString.Builder.Internal.BufferRange ww4 ww5 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# ww5 ww4) 1# of lwild {
                       DEFAULT
                       -> case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ww4
                                 0#
                                 58##
                                 w5 of s2 { DEFAULT ->
                          Data.Aeson.Encoding.Builder.$wstring
                            HGit.Core.Types.$fFromJSON1Commit7
                            @ r
                            w1
                              `cast`
                            ((<Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal
                                               r>_R)) ; Nth:2
                                                            (<Data.ByteString.Builder.Internal.BuildStep
                                                                r>_R
                                                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                         r>_R))
                            (GHC.Prim.plusAddr# ww4 1#)
                            ww5
                            s2 }
                       1#
                       -> (# w5,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               1#
                               ww4
                               lvl45
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } }
                 } in
                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww3 ww2) 1# of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             ww2
                             0#
                             123##
                             eta1 of s2 { DEFAULT ->
                      Data.Aeson.Encoding.Builder.$wstring
                        Data.Aeson.Types.Internal.defaultTaggedObject3
                        @ r
                        w4
                          `cast`
                        (Nth:3
                             (<Data.ByteString.Builder.Internal.BuildStep r>_R
                              ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal
                                               r>_R)) ; Nth:2
                                                            (<Data.ByteString.Builder.Internal.BuildStep
                                                                r>_R
                                                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                                         r>_R))
                        (GHC.Prim.plusAddr# ww2 1#)
                        ww3
                        s2 }
                   1#
                   -> (# eta1,
                         Data.ByteString.Builder.Internal.BufferFull
                           @ r
                           1#
                           ww2
                           (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                            case GHC.Prim.writeWord8OffAddr#
                                   @ GHC.Prim.RealWorld
                                   dt
                                   0#
                                   123##
                                   eta2 of s2 { DEFAULT ->
                            Data.Aeson.Encoding.Builder.$wstring
                              Data.Aeson.Types.Internal.defaultTaggedObject3
                              @ r
                              w4
                                `cast`
                              (Nth:3
                                   (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                    ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R)) ; Nth:2
                                                                  (<Data.ByteString.Builder.Internal.BuildStep
                                                                      r>_R
                                                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                   ->_R GHC.Types.N:IO[0]
                                                                            <Data.ByteString.Builder.Internal.BuildSignal
                                                                               r>_R))
                              (GHC.Prim.plusAddr# dt 1#)
                              dt1
                              s2 } })
                             `cast`
                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) #) } }) -}
5944eff1982dad04534971c96a7abd2c
  $fToJSON1Commit2 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Commit3)) -}
e078183738b20daff2322dba68e028ee
  $fToJSON1Commit3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Commit4 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
9c67c66603c88597f3a0f70f5ce321dd
  $fToJSON1Commit4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1Commit11
                   0#
                   ipv1 }) -}
e24eee08bb2ad1dc9a6f6f19f527f2a2
  $fToJSON1Commit5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   HGit.Core.Types.$fToJSON1Commit6
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
b48a2867e19503feefea9822e18c3249
  $fToJSON1Commit6 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   HGit.Core.Types.$fToJSON1Commit7
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
0c31e884e13f73ad7d9278c7f6ee62c1
  $fToJSON1Commit7 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Commit8)) -}
f160f61b8569af554b80b60c6afd053b
  $fToJSON1Commit8 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Commit9 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
960eb4574f36348061cfd0ce2500a4f1
  $fToJSON1Commit9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1Commit7
                   0#
                   ipv1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Commit_$cliftToEncoding ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.HashableCommit a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ @ a
                   (te :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (tel :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (eta :: HGit.Core.Types.HashableCommit a) ->
                 case eta of wild {
                   HGit.Core.Types.NullCommit
                   -> HGit.Core.Types.$fToJSON1Commit1
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   HGit.Core.Types.Commit g3 g4 g5
                   -> let {
                        w1 :: Data.Aeson.Encoding.Internal.Series
                        = case HGit.Core.Types.$w$dTaggedObject'2
                                 @ a
                                 Data.Aeson.Types.Internal.defaultOptions
                                 (Data.Aeson.Types.ToJSON.To1Args
                                    @ Data.Aeson.Encoding.Internal.Encoding
                                    @ Data.Aeson.Types.Generic.One
                                    @ a
                                    @~ <Data.Aeson.Types.Generic.One>_N
                                    te
                                    tel)
                                 Data.Aeson.Types.Internal.defaultTaggedObject1
                                 (GHC.Generics.:*:
                                    @ Type
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Data.Functor.Const.Const
                                               Merkle.Types.IPFS.RawIPFSHash
                                               HGit.Core.Types.HashableDir))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                    @ a
                                    g3
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <Type>_N
                                              <GHC.Generics.R>_P
                                              <GHC.Base.String>_R
                                              <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <Type>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Maybe.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   GHC.Base.String>_R) <a>_N)
                                    (GHC.Generics.:*:
                                       @ Type
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableDir)))
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                       @ a
                                       g4
                                         `cast`
                                       (Sym (GHC.Generics.N:K1[0]
                                                 <Type>_N
                                                 <GHC.Generics.R>_P
                                                 <Data.Functor.Const.Const
                                                    Merkle.Types.IPFS.RawIPFSHash
                                                    HGit.Core.Types.HashableDir>_R
                                                 <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                   <Type>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Data.Functor.Const.Const
                                                                         Merkle.Types.IPFS.RawIPFSHash
                                                                         HGit.Core.Types.HashableDir)>_R) <a>_N)
                                       g5
                                         `cast`
                                       ((Sym (GHC.Generics.N:Rec1[0]
                                                  <Type>_N
                                                  <GHC.Base.NonEmpty>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                    <Type>_N
                                                                                    <GHC.Generics.S>_P
                                                                                    <'GHC.Generics.MetaSel
                                                                                       'GHC.Maybe.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy>_P
                                                                                    <GHC.Generics.Rec1
                                                                                       GHC.Base.NonEmpty>_R)) <a>_N))) of ww { Unit# ww1 ->
                          Data.Aeson.Encoding.Internal.Value
                            (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                             let {
                               w :: Data.ByteString.Builder.Internal.BuildStep r
                               = ww1
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Encoding.Internal.Series>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                   @ r
                                   x
                             } in
                             let {
                               w2 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>,
                                    Unfolding: InlineRule (2, True, False)
                                               (\ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                                  (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                                Data.Aeson.Encoding.Internal.$wcomma
                                                  @ r
                                                  w
                                                  ww3
                                                  ww4
                                                  w3 }) -}
                               = \ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 Data.Aeson.Encoding.Internal.$wcomma @ r w ww3 ww4 w4 }
                             } in
                             let {
                               lvl45 :: Data.ByteString.Builder.Internal.BufferRange
                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                               = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt
                                        0#
                                        58##
                                        eta1 of s2 { DEFAULT ->
                                 Data.Aeson.Encoding.Builder.$wstring
                                   HGit.Core.Types.$fFromJSON1Commit11
                                   @ r
                                   w2
                                     `cast`
                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                     r>_R))
                                   (GHC.Prim.plusAddr# dt 1#)
                                   dt1
                                   s2 } }
                             } in
                             let {
                               w3 :: Data.ByteString.Builder.Internal.BufferRange
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                                 {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                               = \ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 case GHC.Prim.<# (GHC.Prim.minusAddr# ww4 ww3) 1# of lwild {
                                   DEFAULT
                                   -> case GHC.Prim.writeWord8OffAddr#
                                             @ GHC.Prim.RealWorld
                                             ww3
                                             0#
                                             58##
                                             w5 of s2 { DEFAULT ->
                                      Data.Aeson.Encoding.Builder.$wstring
                                        HGit.Core.Types.$fFromJSON1Commit11
                                        @ r
                                        w2
                                          `cast`
                                        (<Data.ByteString.Builder.Internal.BufferRange>_R
                                         ->_R Sym (GHC.Types.N:IO[0]
                                                       <Data.ByteString.Builder.Internal.BuildSignal
                                                          r>_R))
                                        (GHC.Prim.plusAddr# ww3 1#)
                                        ww4
                                        s2 }
                                   1#
                                   -> (# w5,
                                         Data.ByteString.Builder.Internal.BufferFull
                                           @ r
                                           1#
                                           ww3
                                           lvl45
                                             `cast`
                                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.ByteString.Builder.Internal.BuildSignal
                                                             r>_R)) #) } }
                             } in
                             (\ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                                (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                              Data.Aeson.Encoding.Builder.$wstring
                                Data.Aeson.Types.Internal.defaultTaggedObject3
                                @ r
                                w3
                                  `cast`
                                (Nth:3
                                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) ; Nth:2
                                                                    (<Data.ByteString.Builder.Internal.BuildStep
                                                                        r>_R
                                                                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                                                     ->_R GHC.Types.N:IO[0]
                                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                                 r>_R))
                                ww3
                                ww4
                                w5 })
                               `cast`
                             (Nth:3
                                  (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r>_R))))
                              `cast`
                            (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                            <Data.Aeson.Encoding.Internal.Series>_P)) }
                      } in
                      (\ @ r (w2 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       Data.Aeson.Types.ToJSON.$w$cfromPairs
                         @ Data.Aeson.Types.Internal.Value
                         @~ <Data.Aeson.Types.Internal.Value>_N
                         w1
                         @ r
                         w2)
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Commit_$cliftToEncodingList ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.HashableCommit a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ @ a
                   (f6 :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (g :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (eta :: [HGit.Core.Types.HashableCommit a]) ->
                 case eta of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = (HGit.Core.Types.$fToJSON1Commit_$cliftToEncoding @ a f6 g x)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = letrec {
                             go :: [HGit.Core.Types.HashableCommit a]
                                   -> Data.Aeson.Encoding.Internal.Encoding'
                                        Data.Aeson.Types.Internal.Value
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds :: [HGit.Core.Types.HashableCommit a]) ->
                               case ds of wild1 {
                                 []
                                 -> HGit.Core.Types.$fToJSON1Blob1
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P))
                                 : y ys
                                 -> (\ @ r1 ->
                                     let {
                                       vs :: Data.Aeson.Encoding.Internal.Encoding'
                                               Data.Aeson.Types.Internal.Value
                                       = go ys
                                     } in
                                     let {
                                       f2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                             -> Data.ByteString.Builder.Internal.BuildStep r1
                                       = (HGit.Core.Types.$fToJSON1Commit_$cliftToEncoding
                                            @ a
                                            f6
                                            g
                                            y)
                                           `cast`
                                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                              <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                           @ r1
                                     } in
                                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r1) ->
                                     let {
                                       w :: Data.ByteString.Builder.Internal.BuildStep r1
                                       = f2
                                           (vs
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                              @ r1
                                              x1)
                                     } in
                                     (\ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                        (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                      Data.Aeson.Encoding.Internal.$wcomma @ r1 w ww1 ww2 w2 })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)))
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P)) }
                           } in
                           (go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       let {
                         w :: Data.ByteString.Builder.Internal.BuildStep r
                         = f (f1
                                (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                       } in
                       (\ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w ww1 ww2 w2 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Commit_$cliftToJSON ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.HashableCommit a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>m1, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.HashableCommit a) ->
                 case HGit.Core.Types.$w$cliftToJSON1
                        @ a
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Commit_$cliftToJSONList ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.HashableCommit a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.HashableCommit a]) ->
                 case HGit.Core.Types.$w$cliftToJSONList1
                        @ a
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Dir ::
    Data.Aeson.Types.ToJSON.ToJSON1
      (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob))
                  HGit.Core.Types.$fToJSON1Dir_$cliftToJSON
                  HGit.Core.Types.$fToJSON1Dir_$cliftToJSONList
                  HGit.Core.Types.$fToJSON1Dir_$cliftToEncoding
                  HGit.Core.Types.$fToJSON1Dir_$cliftToEncodingList -}
22acbffa342d6f3d71b6532e6bf2ffb6
  $fToJSON1Dir1 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Dir2)) -}
c694ca63f6431fcebe8fc5b70e770d8d
  $fToJSON1Dir10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1Dir5
                   0#
                   ipv1 }) -}
409ec788ea426f4c7fe9236a217aaa76
  $fToJSON1Dir2 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Dir3 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
ed56f15c8ae3bc9713852b7e161e15f1
  $fToJSON1Dir3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1FileTreeEntity4
                   0#
                   ipv1 }) -}
eec911f1b74d9bbfd8bac1903d2b22d8
  $fToJSON1Dir4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Dir5 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
6bf6c41b3aaaa7314002b0cef479441e
  $fToJSON1Dir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Data.Aeson.Types.Internal.defaultTaggedObject1
                   0#
                   ipv1 }) -}
803f7be82b7571b237a2e7427f1a30f4
  $fToJSON1Dir6 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((HGit.Core.Types.$fToJSON1Blob8,
                  HGit.Core.Types.$fToJSON1Dir7)) -}
9fe6823380674fd44b3eccd00d20c429
  $fToJSON1Dir7 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Dir8 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.String dt } }) -}
262d1b71ea77ffd3c5718028516912ad
  $fToJSON1Dir8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter
                   ipv2
                   4#
                   HGit.Core.Types.$fFromJSON1FileTreeEntity9
                   0#
                   ipv1 }) -}
ce48d39e7f4f6b5b0e5fb92f08bbaac4
  $fToJSON1Dir9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        HGit.Core.Types.$fToJSON1Dir10 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Dir_$cliftToEncoding ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.Dir
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,C(C(C(C1(U(U,U)))))><L,A><L,1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (w2 :: HGit.Core.Types.Dir
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 HGit.Core.Types.$w$cliftToEncoding @ a w w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Dir_$cliftToEncodingList ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.Dir
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,C(C(C(C1(U(U,U)))))><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (w2 :: [HGit.Core.Types.Dir
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 HGit.Core.Types.$w$cliftToEncodingList @ a w w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Dir_$cliftToJSON ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.Dir
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,C(U)><L,A><L,1*U(1*U)>m1, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.Dir
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 case HGit.Core.Types.$w$cliftToJSON2 @ a w w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1Dir_$cliftToJSONList ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.Dir
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,C(U)><L,A><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.Dir
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case HGit.Core.Types.$w$cliftToJSONList2
                        @ a
                        w
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1FileTreeEntity ::
    Data.Aeson.Types.ToJSON.ToJSON1
      (HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (HGit.Core.Types.FileTreeEntity
                       (HGit.Core.Types.Hash HGit.Core.Types.Blob))
                  HGit.Core.Types.$fToJSON1FileTreeEntity_$cliftToJSON
                  HGit.Core.Types.$fToJSON1FileTreeEntity_$cliftToJSONList
                  HGit.Core.Types.$fToJSON1FileTreeEntity_$cliftToEncoding
                  HGit.Core.Types.$fToJSON1FileTreeEntity_$cliftToEncodingList -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1FileTreeEntity_$cliftToEncoding ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,1*C1(C(C(C1(U(U,U)))))><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (w2 :: HGit.Core.Types.FileTreeEntity
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 HGit.Core.Types.$w$cliftToEncoding1 @ a w w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1FileTreeEntity_$cliftToEncodingList ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> ([a] -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.FileTreeEntity
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3, Strictness: <L,C(C(C(C1(U(U,U)))))><L,A><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [a] -> Data.Aeson.Encoding.Internal.Encoding)
                   (w2 :: [HGit.Core.Types.FileTreeEntity
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 HGit.Core.Types.$w$cliftToEncodingList1 @ a w w2) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1FileTreeEntity_$cliftToJSON ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,1*C1(U)><L,A><S,1*U>m1, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.FileTreeEntity
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 case HGit.Core.Types.$w$cliftToJSON3 @ a w w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fToJSON1FileTreeEntity_$cliftToJSONList ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.FileTreeEntity
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <L,C(U)><L,A><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.FileTreeEntity
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case HGit.Core.Types.$w$cliftToJSONList3
                        @ a
                        w
                        w2 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fTraversableBlob ::
    Data.Traversable.Traversable HGit.Core.Types.Blob
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ HGit.Core.Types.Blob
                  HGit.Core.Types.$fFunctorBlob
                  HGit.Core.Types.$fFoldableBlob
                  HGit.Core.Types.$fTraversableBlob_$ctraverse
                  HGit.Core.Types.$fTraversableBlob_$csequenceA
                  HGit.Core.Types.$fTraversableBlob_$cmapM
                  HGit.Core.Types.$fTraversableBlob_$csequence -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fTraversableBlob_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b) -> HGit.Core.Types.Blob a -> m (HGit.Core.Types.Blob b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: Type -> Type @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableBlob_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fTraversableBlob_$csequence ::
    GHC.Base.Monad m =>
    HGit.Core.Types.Blob (m a) -> m (HGit.Core.Types.Blob a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: Type -> Type @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: HGit.Core.Types.Blob (m a)) ->
                 case eta of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> GHC.Base.fmap
                        @ m
                        (GHC.Base.$p1Applicative @ m $dApplicative)
                        @ a
                        @ (HGit.Core.Types.Blob a)
                        (\ (b2 :: a) -> HGit.Core.Types.Chunk @ a a1 b2)
                        a2
                   HGit.Core.Types.Empty
                   -> GHC.Base.pure
                        @ m
                        $dApplicative
                        @ (HGit.Core.Types.Blob a)
                        (HGit.Core.Types.Empty @ a) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fTraversableBlob_$csequenceA ::
    GHC.Base.Applicative f =>
    HGit.Core.Types.Blob (f a) -> f (HGit.Core.Types.Blob a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f :: Type -> Type
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: HGit.Core.Types.Blob (f a)) ->
                 case eta of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> GHC.Base.fmap
                        @ f
                        (GHC.Base.$p1Applicative @ f $dApplicative)
                        @ a
                        @ (HGit.Core.Types.Blob a)
                        (\ (b2 :: a) -> HGit.Core.Types.Chunk @ a a1 b2)
                        a2
                   HGit.Core.Types.Empty
                   -> GHC.Base.pure
                        @ f
                        $dApplicative
                        @ (HGit.Core.Types.Blob a)
                        (HGit.Core.Types.Empty @ a) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $fTraversableBlob_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b) -> HGit.Core.Types.Blob a -> f (HGit.Core.Types.Blob b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: Type -> Type
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (w2 :: HGit.Core.Types.Blob a) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 HGit.Core.Types.$w$ctraverse @ f @ a @ b ww1 ww2 w1 w2 }) -}
34aca104485ce79d597049c5ea286be1
  $fTraversableCommit ::
    Data.Traversable.Traversable (HGit.Core.Types.Commit a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Commit a)
                  (HGit.Core.Types.$fFunctorCommit @ a)
                  (HGit.Core.Types.$fFoldableCommit @ a)
                  (HGit.Core.Types.$fTraversableCommit_$ctraverse @ a)
                  (HGit.Core.Types.$fTraversableCommit_$csequenceA @ a)
                  (HGit.Core.Types.$fTraversableCommit_$cmapM @ a)
                  (HGit.Core.Types.$fTraversableCommit_$csequence @ a) -}
34aca104485ce79d597049c5ea286be1
  $fTraversableCommit_$cmapM ::
    GHC.Base.Monad m =>
    (a2 -> m b)
    -> HGit.Core.Types.Commit a1 a2 -> m (HGit.Core.Types.Commit a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ m :: Type -> Type
                   @ a1
                   @ b
                   ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableCommit_$ctraverse
                   @ a
                   @ m
                   @ a1
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
34aca104485ce79d597049c5ea286be1
  $fTraversableCommit_$csequence ::
    GHC.Base.Monad m =>
    HGit.Core.Types.Commit a1 (m a2)
    -> m (HGit.Core.Types.Commit a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a @ m :: Type -> Type @ a1 ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableCommit_$ctraverse
                   @ a
                   @ m
                   @ (m a1)
                   @ a1
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a1))) -}
34aca104485ce79d597049c5ea286be1
  $fTraversableCommit_$csequenceA ::
    GHC.Base.Applicative f =>
    HGit.Core.Types.Commit a1 (f a2)
    -> f (HGit.Core.Types.Commit a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 HGit.Core.Types.$fTraversableCommit_$ctraverse
                   @ a
                   @ f
                   @ (f a1)
                   @ a1
                   $dApplicative
                   (GHC.Base.id @ (f a1))) -}
34aca104485ce79d597049c5ea286be1
  $fTraversableCommit_$ctraverse ::
    GHC.Base.Applicative f =>
    (a2 -> f b)
    -> HGit.Core.Types.Commit a1 a2 -> f (HGit.Core.Types.Commit a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a1 -> f b)
                   (w2 :: HGit.Core.Types.Commit a a1) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 HGit.Core.Types.$w$ctraverse1
                   @ a
                   @ f
                   @ a1
                   @ b
                   ww1
                   ww2
                   ww4
                   w1
                   w2 }) -}
be80b6a731843e8b4df725ad76728847
  $fTraversableDir ::
    Data.Traversable.Traversable (HGit.Core.Types.Dir a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.Dir a)
                  (HGit.Core.Types.$fFunctorDir @ a)
                  (HGit.Core.Types.$fFoldableDir @ a)
                  (HGit.Core.Types.$fTraversableDir_$ctraverse @ a)
                  (HGit.Core.Types.$fTraversableDir_$csequenceA @ a)
                  (HGit.Core.Types.$fTraversableDir_$cmapM @ a)
                  (HGit.Core.Types.$fTraversableDir_$csequence @ a) -}
be80b6a731843e8b4df725ad76728847
  $fTraversableDir_$cmapM ::
    GHC.Base.Monad m =>
    (a2 -> m b)
    -> HGit.Core.Types.Dir a1 a2 -> m (HGit.Core.Types.Dir a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><S,1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ m :: Type -> Type
                   @ a1
                   @ b
                   ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableDir_$ctraverse
                   @ a
                   @ m
                   @ a1
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
be80b6a731843e8b4df725ad76728847
  $fTraversableDir_$csequence ::
    GHC.Base.Monad m =>
    HGit.Core.Types.Dir a1 (m a2) -> m (HGit.Core.Types.Dir a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><S,1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a @ m :: Type -> Type @ a1 ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableDir_$ctraverse
                   @ a
                   @ m
                   @ (m a1)
                   @ a1
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a1))) -}
be80b6a731843e8b4df725ad76728847
  $fTraversableDir_$csequenceA ::
    GHC.Base.Applicative f =>
    HGit.Core.Types.Dir a1 (f a2) -> f (HGit.Core.Types.Dir a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><S,1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 HGit.Core.Types.$fTraversableDir_$ctraverse
                   @ a
                   @ f
                   @ (f a1)
                   @ a1
                   $dApplicative
                   (GHC.Base.id @ (f a1))) -}
be80b6a731843e8b4df725ad76728847
  $fTraversableDir_$ctraverse ::
    GHC.Base.Applicative f =>
    (a2 -> f b)
    -> HGit.Core.Types.Dir a1 a2 -> f (HGit.Core.Types.Dir a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,C(U)><S,1*U(1*U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a1 -> f b)
                   (w2 :: HGit.Core.Types.Dir a a1) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Base.C:Functor ww8 ww9 ->
                 case w2 of ww10 { HGit.Core.Types.Dir ww11 ->
                 HGit.Core.Types.$w$ctraverse2
                   @ a
                   @ f
                   @ a1
                   @ b
                   ww8
                   ww2
                   ww4
                   w1
                   ww11 } } }) -}
ae33a7ec835849f6fc910a468589c69e
  $fTraversableFileTreeEntity ::
    Data.Traversable.Traversable (HGit.Core.Types.FileTreeEntity a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (HGit.Core.Types.FileTreeEntity a)
                  (HGit.Core.Types.$fFunctorFileTreeEntity @ a)
                  (HGit.Core.Types.$fFoldableFileTreeEntity @ a)
                  (HGit.Core.Types.$fTraversableFileTreeEntity_$ctraverse @ a)
                  (HGit.Core.Types.$fTraversableFileTreeEntity_$csequenceA @ a)
                  (HGit.Core.Types.$fTraversableFileTreeEntity_$cmapM @ a)
                  (HGit.Core.Types.$fTraversableFileTreeEntity_$csequence @ a) -}
ae33a7ec835849f6fc910a468589c69e
  $fTraversableFileTreeEntity_$cmapM ::
    GHC.Base.Monad m =>
    (a2 -> m b)
    -> HGit.Core.Types.FileTreeEntity a1 a2
    -> m (HGit.Core.Types.FileTreeEntity a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ m :: Type -> Type
                   @ a1
                   @ b
                   ($dMonad :: GHC.Base.Monad m) ->
                 HGit.Core.Types.$fTraversableFileTreeEntity_$ctraverse
                   @ a
                   @ m
                   @ a1
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
ae33a7ec835849f6fc910a468589c69e
  $fTraversableFileTreeEntity_$csequence ::
    GHC.Base.Monad m =>
    HGit.Core.Types.FileTreeEntity a1 (m a2)
    -> m (HGit.Core.Types.FileTreeEntity a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a @ m :: Type -> Type @ a1 ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: HGit.Core.Types.FileTreeEntity a (m a1)) ->
                 case eta of wild {
                   HGit.Core.Types.FileEntity a2
                   -> GHC.Base.pure
                        @ m
                        $dApplicative
                        @ (HGit.Core.Types.FileTreeEntity a a1)
                        (HGit.Core.Types.FileEntity @ a @ a1 a2)
                   HGit.Core.Types.DirEntity a2
                   -> GHC.Base.fmap
                        @ m
                        (GHC.Base.$p1Applicative @ m $dApplicative)
                        @ a1
                        @ (HGit.Core.Types.FileTreeEntity a a1)
                        (HGit.Core.Types.DirEntity @ a @ a1)
                        a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fTraversableFileTreeEntity_$csequenceA ::
    GHC.Base.Applicative f =>
    HGit.Core.Types.FileTreeEntity a1 (f a2)
    -> f (HGit.Core.Types.FileTreeEntity a1 a2)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: HGit.Core.Types.FileTreeEntity a (f a1)) ->
                 case eta of wild {
                   HGit.Core.Types.FileEntity a2
                   -> GHC.Base.pure
                        @ f
                        $dApplicative
                        @ (HGit.Core.Types.FileTreeEntity a a1)
                        (HGit.Core.Types.FileEntity @ a @ a1 a2)
                   HGit.Core.Types.DirEntity a2
                   -> GHC.Base.fmap
                        @ f
                        (GHC.Base.$p1Applicative @ f $dApplicative)
                        @ a1
                        @ (HGit.Core.Types.FileTreeEntity a a1)
                        (HGit.Core.Types.DirEntity @ a @ a1)
                        a2 }) -}
ae33a7ec835849f6fc910a468589c69e
  $fTraversableFileTreeEntity_$ctraverse ::
    GHC.Base.Applicative f =>
    (a2 -> f b)
    -> HGit.Core.Types.FileTreeEntity a1 a2
    -> f (HGit.Core.Types.FileTreeEntity a1 b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a1 -> f b)
                   (w2 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case w of ww { GHC.Base.C:Applicative ww1 ww2 ww3 ww4 ww5 ww6 ->
                 HGit.Core.Types.$w$ctraverse3 @ a @ f @ a1 @ b ww1 ww2 w1 w2 }) -}
53bbf5365fe7bfe0dafb2531486f1aa8
  $s$fConstructorMetaMetaCons2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dir"#) -}
f0a1082cbebf4926e280de904432ad02
  $sfromList ::
    [(HGit.Core.Types.PartialFilePath, a)]
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(HGit.Core.Types.PartialFilePath, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ HGit.Core.Types.PartialFilePath
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a)
                             (Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                HGit.Core.Types.$sfromList1
                                  @ a
                                  wild2
                                  (Data.Map.Internal.Bin
                                     @ HGit.Core.Types.PartialFilePath
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a)
                                     (Data.Map.Internal.Tip
                                        @ HGit.Core.Types.PartialFilePath
                                        @ a)) } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                HGit.Core.Types.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ HGit.Core.Types.PartialFilePath
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a)
                                     (Data.Map.Internal.Tip @ HGit.Core.Types.PartialFilePath @ a))
                                  wild2 } } } } } } }) -}
aade9b875cdee6b084e69a64f1b44aca
  $sfromList1 ::
    [(HGit.Core.Types.PartialFilePath, a)]
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
609707435dc3a9c18df995fa1b92b617
  $sinsert_$sgo8 ::
    HGit.Core.Types.PartialFilePath
    -> a1
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a1
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
a40b41da2f3b8922e926110928923545
  $tc'Chunk :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10500807762091847792##
                   7528055711662570468##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'Chunk2
                   1#
                   HGit.Core.Types.$tc'Chunk1) -}
4448d40339e6302c88ea0e2550c78d16
  $tc'Chunk1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c896d0a19a9de2207e240ba841b17f99
  $tc'Chunk2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'Chunk3) -}
919e00435315aca457e461ecc478986d
  $tc'Chunk3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Chunk"#) -}
7f653adfe4417214ea58f45125077c8b
  $tc'Commit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14684568997928755804##
                   8811044435469307499##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'Commit2
                   2#
                   HGit.Core.Types.$tc'Commit1) -}
6e4ca9a83b623d5994215006c7f42586
  $tc'Commit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd229d7c9b668d55b4fa692113999137
  $tc'Commit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'Commit3) -}
8fd105e5d2358eecd061a80017d04ef0
  $tc'Commit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Commit"#) -}
98e66af30c40d777d5510606384fa032
  $tc'Dir :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17851125430318428050##
                   3362559973120312329##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'Dir2
                   2#
                   HGit.Core.Types.$tc'Dir1) -}
4096339fd3545c256869b469fed687ab
  $tc'Dir1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5747e2bfb58b296b146f6b116ff4ed1b
  $tc'Dir2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'Dir3) -}
74a62503d933171bece0978f1ccc7628
  $tc'Dir3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dir"#) -}
5f549553c4866e2dc17363b9f8c06f00
  $tc'DirEntity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6070675372569288566##
                   8873550194179449482##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'DirEntity2
                   2#
                   HGit.Core.Types.$tc'DirEntity1) -}
ca06e39e541a0856d8fd3af597217bbb
  $tc'DirEntity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8ed3dfe61a7f0ea9c16f14b0073241ba
  $tc'DirEntity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'DirEntity3) -}
a64283da3d33d9a1a002258e0dae5e43
  $tc'DirEntity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DirEntity"#) -}
66470617f5368bfa9ea4e7c7314cb748
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11044162695859846839##
                   3421297067392760045##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'Empty2
                   1#
                   HGit.Core.Types.$tc'Empty1) -}
55edfd8db76016b8d7801653088c2f32
  $tc'Empty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ba47542a74aaee3373d05d43c9a8ab51
  $tc'Empty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'Empty3) -}
35928528751e94a01242b9c242a13476
  $tc'Empty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
b8a11c0ca132630821c07e0a7bc53ab4
  $tc'FileEntity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8531767965751865319##
                   7299814197213800572##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'FileEntity2
                   2#
                   HGit.Core.Types.$tc'FileEntity1) -}
6bfafe29797737e07a7e89ef71383de0
  $tc'FileEntity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
79d78fec9257ff7f58d0684906548c25
  $tc'FileEntity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'FileEntity3) -}
7448ee99abd53a6a86805ed41d89e39e
  $tc'FileEntity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FileEntity"#) -}
877676e1a030fd7b47b5bea5227aa3a9
  $tc'NullCommit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5138251771745436628##
                   1948003057763599333##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tc'NullCommit2
                   2#
                   HGit.Core.Types.$tc'NullCommit1) -}
da4a582e5b2e688ea24f4a8e04779fd0
  $tc'NullCommit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0947f10841a634d8940b6a8fb3962fee
  $tc'NullCommit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tc'NullCommit3) -}
b528ad68c1063c37dcafbb980e8fa4c0
  $tc'NullCommit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NullCommit"#) -}
864f09d4479cbd3948871dccf3f18a51
  $tcBlob :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3697964508288605776##
                   8727688526884739188##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tcBlob1
                   0#
                   GHC.Types.krep$*Arr*) -}
64018ce6377c81400c2d8a52f185bbbd
  $tcBlob1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$tcBlob2) -}
31c6e66666be838ead4502495282e806
  $tcBlob2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Blob"#) -}
7e1e707857cc7f7139a72b5fac1d7c5f
  $tcCommit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16052671520955631159##
                   9228869566471199421##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tcCommit1
                   0#
                   GHC.Types.krep$*->*->*) -}
314be2e65cccedb4efa9bdfa51ba2c44
  $tcCommit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   HGit.Core.Types.$fFromJSON1Commit12) -}
1ddfcd893b21f83f59e07fac1e6ef287
  $tcDir :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12673566239491119691##
                   13448285407969295476##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tcDir1
                   0#
                   GHC.Types.krep$*->*->*) -}
72926c10d1b45b5a76e4fb16a7a1c17c
  $tcDir1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   HGit.Core.Types.$s$fConstructorMetaMetaCons2) -}
297b3b4f3da08fdd5f2f457d85c72b46
  $tcFileTreeEntity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6570262959286476358##
                   179576686362837005##
                   HGit.Core.Types.$trModule
                   HGit.Core.Types.$tcFileTreeEntity1
                   0#
                   GHC.Types.krep$*->*->*) -}
94bf799c171d56ada8b3ed15253bed7d
  $tcFileTreeEntity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   HGit.Core.Types.$tcFileTreeEntity2) -}
491ed6ad148c479745ca99722ece3f75
  $tcFileTreeEntity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FileTreeEntity"#) -}
69848f27d6151c4b4b1f16d8a73e160d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HGit.Core.Types.$trModule3
                   HGit.Core.Types.$trModule1) -}
4d5de6aff61ac929ebd2a3a546e29749
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$trModule2) -}
c4d557eff2fec517241b0ec01fd6f75b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HGit.Core.Types"#) -}
455cd5a1b4bc56b738cc3cd6cb4159b0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HGit.Core.Types.$trModule4) -}
7970b240882a01e56db5ab2943977a7d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"#) -}
01954d60408f13d3313ae6fb2384b8c0
  $w$c<= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    [HGit.Core.Types.NamedFileTreeEntity a b]
    -> [HGit.Core.Types.NamedFileTreeEntity a b] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b])
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           (HGit.Core.Types.$fOrdFileTreeEntity @ a @ b w w1))
                        ww1
                        ww of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
71ac81e6ed55c4335aa791008464dc73
  $w$c> ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    [HGit.Core.Types.NamedFileTreeEntity a b]
    -> [HGit.Core.Types.NamedFileTreeEntity a b] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b])
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           (HGit.Core.Types.$fOrdFileTreeEntity @ a @ b w w1))
                        ww1
                        ww of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
2254c7297768c72d6aa6e4b3e2b87a39
  $w$c>= ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    [HGit.Core.Types.NamedFileTreeEntity a b]
    -> [HGit.Core.Types.NamedFileTreeEntity a b] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b])
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ (HGit.Core.Types.FileTreeEntity a b)
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           (HGit.Core.Types.$fOrdFileTreeEntity @ a @ b w w1))
                        ww
                        ww1 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
34aca104485ce79d597049c5ea286be1
  $w$cbifold :: m -> (m -> m -> m) -> HGit.Core.Types.Commit m m -> m
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,C(C1(U))><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m
                   (ww :: m)
                   (ww1 :: m -> m -> m)
                   (w :: HGit.Core.Types.Commit m m) ->
                 case w of wild {
                   HGit.Core.Types.NullCommit -> ww
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> ww1
                        _arg2
                        (ww1
                           (case _arg3 of wild1 { GHC.Base.:| a1 as -> a1 })
                           (case _arg3 of wild1 { GHC.Base.:| a1 as ->
                            letrec {
                              go :: [m] -> m {- Arity: 1, Strictness: <S,1*U> -}
                              = \ (ds :: [m]) ->
                                case ds of wild2 { [] -> ww : y ys -> ww1 y (go ys) }
                            } in
                            go as })) }) -}
a8473cc345fe850e2b04ef891d1b63d5
  $w$cbifold1 ::
    GHC.Base.Monoid m => [HGit.Core.Types.NamedFileTreeEntity m m] -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><S,1*U>, Inline: [2],
     Unfolding: (\ @ m
                   (w :: GHC.Base.Monoid m)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity m m]) ->
                 let {
                   z :: m = GHC.Base.mempty @ m w
                 } in
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity m m)]
                         -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity m m)]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            w
                            (case y of wild1 { (,) _tup1 _tup2 ->
                             case _tup2 of wild2 {
                               HGit.Core.Types.FileEntity _arg1 -> _arg1
                               HGit.Core.Types.DirEntity _arg1 -> _arg1 } })
                            (go ys) }
                 } in
                 go ww) -}
34aca104485ce79d597049c5ea286be1
  $w$cbifoldMap ::
    m
    -> (m -> m -> m)
    -> (a -> m)
    -> (b -> m)
    -> HGit.Core.Types.Commit a b
    -> m
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,C(C1(U))><L,1*C1(U)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m
                   @ a
                   @ b
                   (ww :: m)
                   (ww1 :: m -> m -> m)
                   (w :: a -> m)
                   (w1 :: b -> m)
                   (w2 :: HGit.Core.Types.Commit a b) ->
                 case w2 of wild {
                   HGit.Core.Types.NullCommit -> ww
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> ww1
                        (w _arg2)
                        (Data.Foldable.$w$cfoldMap1 @ m @ b ww ww1 w1 _arg3) }) -}
db66aed099bcddf0e9f6d60e7dcbc0c2
  $w$cbifoldMap1 ::
    GHC.Base.Monoid m =>
    (a -> m)
    -> (b -> m) -> [HGit.Core.Types.NamedFileTreeEntity a b] -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ m
                   @ a
                   @ b
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a -> m)
                   (w2 :: b -> m)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 let {
                   z :: m = GHC.Base.mempty @ m w
                 } in
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)]
                         -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            w
                            (case y of wild1 { (,) _tup1 _tup2 ->
                             case _tup2 of wild2 {
                               HGit.Core.Types.FileEntity _arg1 -> w1 _arg1
                               HGit.Core.Types.DirEntity _arg1 -> w2 _arg1 } })
                            (go ys) }
                 } in
                 go ww) -}
2dd81b20f2a9e202bd0a62a9f7670d36
  $w$cbifoldl ::
    (c -> a -> c)
    -> (c -> b -> c)
    -> c
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ c
                   @ a
                   @ b
                   (w :: c -> a -> c)
                   (w1 :: c -> b -> c)
                   (w2 :: c)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)]
                         -> c -> c
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)])
                       (eta :: c) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go
                            ys
                            (case y of wild1 { (,) _tup1 _tup2 ->
                             case _tup2 of wild2 {
                               HGit.Core.Types.FileEntity _arg1 -> w eta _arg1
                               HGit.Core.Types.DirEntity _arg1 -> w1 eta _arg1 } }) }
                 } in
                 go ww w2) -}
5e0ebbc3ac55aad91f8d8a0015770e0d
  $w$cbifoldr ::
    (a -> c -> c)
    -> (b -> c -> c)
    -> c
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ c
                   @ b
                   (w :: a -> c -> c)
                   (w1 :: b -> c -> c)
                   (w2 :: c)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)]
                         -> c
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b)]) ->
                     case ds of wild {
                       [] -> w2
                       : y ys
                       -> case y of wild1 { (,) _tup1 _tup2 ->
                          case _tup2 of wild2 {
                            HGit.Core.Types.FileEntity _arg1 -> w _arg1 (go ys)
                            HGit.Core.Types.DirEntity _arg1 -> w1 _arg1 (go ys) } } }
                 } in
                 go ww) -}
34aca104485ce79d597049c5ea286be1
  $w$cbitraverse ::
    (forall a1. a1 -> f a1)
    -> (forall a1 b1 c1. (a1 -> b1 -> c1) -> f a1 -> f b1 -> f c1)
    -> (a -> f c)
    -> (b -> f d)
    -> HGit.Core.Types.Commit a b
    -> f (HGit.Core.Types.Commit c d)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,1*C1(U)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (ww :: forall a1. a1 -> f a1)
                   (ww1 :: forall a1 b1 c1. (a1 -> b1 -> c1) -> f a1 -> f b1 -> f c1)
                   (w :: a -> f c)
                   (w1 :: b -> f d)
                   (w2 :: HGit.Core.Types.Commit a b) ->
                 case w2 of wild {
                   HGit.Core.Types.NullCommit
                   -> ww
                        @ (HGit.Core.Types.Commit c d)
                        (HGit.Core.Types.NullCommit @ c @ d)
                   HGit.Core.Types.Commit _arg1 _arg2 _arg3
                   -> ww1
                        @ c
                        @ (GHC.Base.NonEmpty d)
                        @ (HGit.Core.Types.Commit c d)
                        (\ (b2 :: c) (b3 :: GHC.Base.NonEmpty d) ->
                         HGit.Core.Types.Commit @ c @ d _arg1 b2 b3)
                        (w _arg2)
                        (Data.Traversable.$w$ctraverse3 @ f @ b @ d ww ww1 w1 _arg3) }) -}
be80b6a731843e8b4df725ad76728847
  $w$cbitraverse1 ::
    (forall a1 b1. (a1 -> b1) -> f a1 -> f b1)
    -> (forall a1. a1 -> f a1)
    -> (forall a1 b1 c1. (a1 -> b1 -> c1) -> f a1 -> f b1 -> f c1)
    -> (a -> f c)
    -> (b -> f d)
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> f (HGit.Core.Types.Dir c d)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><L,1*C1(U)><L,C(C1(C1(U)))><L,C(U)><L,C(U)><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (ww :: forall a1 b1. (a1 -> b1) -> f a1 -> f b1)
                   (ww1 :: forall a1. a1 -> f a1)
                   (ww2 :: forall a1 b1 c1. (a1 -> b1 -> c1) -> f a1 -> f b1 -> f c1)
                   (w :: a -> f c)
                   (w1 :: b -> f d)
                   (ww3 :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 ww
                   @ [HGit.Core.Types.NamedFileTreeEntity c d]
                   @ (HGit.Core.Types.Dir c d)
                   (HGit.Core.Types.Dir @ c @ d)
                   (let {
                      z :: f [(HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity c d)]
                      = ww1
                          @ [(HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity c d)]
                          (GHC.Types.[]
                             @ (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity c d))
                    } in
                    letrec {
                      go :: [(HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity a b)]
                            -> f [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity c d)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a b)]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> ww2
                               @ (HGit.Core.Types.PartialFilePath,
                                  HGit.Core.Types.FileTreeEntity c d)
                               @ [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity c d)]
                               @ [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity c d)]
                               (GHC.Types.:
                                  @ (HGit.Core.Types.PartialFilePath,
                                     HGit.Core.Types.FileTreeEntity c d))
                               (case y of wild1 { (,) _tup1 _tup2 ->
                                ww
                                  @ (HGit.Core.Types.FileTreeEntity c d)
                                  @ (HGit.Core.Types.PartialFilePath,
                                     HGit.Core.Types.FileTreeEntity c d)
                                  (\ (b2 :: HGit.Core.Types.FileTreeEntity c d) -> (_tup1, b2))
                                  (HGit.Core.Types.$w$cbitraverse2
                                     @ f
                                     @ a
                                     @ c
                                     @ b
                                     @ d
                                     ww
                                     w
                                     w1
                                     _tup2) })
                               (go ys) }
                    } in
                    go ww3)) -}
ae33a7ec835849f6fc910a468589c69e
  $w$cbitraverse2 ::
    (forall a1 b1. (a1 -> b1) -> f a1 -> f b1)
    -> (a -> f c)
    -> (b -> f d)
    -> HGit.Core.Types.FileTreeEntity a b
    -> f (HGit.Core.Types.FileTreeEntity c d)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ f :: Type -> Type
                   @ a
                   @ c
                   @ b
                   @ d
                   (ww :: forall a1 b1. (a1 -> b1) -> f a1 -> f b1)
                   (w :: a -> f c)
                   (w1 :: b -> f d)
                   (w2 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w2 of wild {
                   HGit.Core.Types.FileEntity _arg1
                   -> ww
                        @ c
                        @ (HGit.Core.Types.FileTreeEntity c d)
                        (HGit.Core.Types.FileEntity @ c @ d)
                        (w _arg1)
                   HGit.Core.Types.DirEntity _arg1
                   -> ww
                        @ d
                        @ (HGit.Core.Types.FileTreeEntity c d)
                        (HGit.Core.Types.DirEntity @ c @ d)
                        (w1 _arg1) }) -}
34aca104485ce79d597049c5ea286be1
  $w$cfold :: m -> (m -> m -> m) -> HGit.Core.Types.Commit a m -> m
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,C(C1(U))><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ m
                   (ww :: m)
                   (ww1 :: m -> m -> m)
                   (w :: HGit.Core.Types.Commit a m) ->
                 case w of wild {
                   HGit.Core.Types.NullCommit -> ww
                   HGit.Core.Types.Commit a1 a2 a3
                   -> ww1
                        (case a3 of wild1 { GHC.Base.:| a4 as -> a4 })
                        (case a3 of wild1 { GHC.Base.:| a4 as ->
                         letrec {
                           go :: [m] -> m {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [m]) ->
                             case ds of wild2 { [] -> ww : y ys -> ww1 y (go ys) }
                         } in
                         go as }) }) -}
e3665789845b444f58b100f02faa81a8
  $w$cfoldMap ::
    GHC.Base.Monoid m =>
    (a2 -> m) -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ m
                   @ a1
                   (w :: GHC.Base.Monoid m)
                   (w1 :: a1 -> m)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 let {
                   lvl45 :: m = GHC.Base.mempty @ m w
                 } in
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       [] -> lvl45
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            w
                            (case y of wild1 { (,) a2 a3 ->
                             case a3 of wild2 {
                               HGit.Core.Types.FileEntity a4 -> lvl45
                               HGit.Core.Types.DirEntity a4 -> w1 a4 } })
                            (go ys) }
                 } in
                 go ww) -}
d1f9f026f3c8b9c9b8b09f77b8156342
  $w$cfoldl ::
    (b -> a2 -> b)
    -> b -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   @ a1
                   (w :: b -> a1 -> b)
                   (w1 :: b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> b -> b
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)])
                       (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go
                            ys
                            (case y of wild1 { (,) a2 a3 ->
                             case a3 of wild2 {
                               HGit.Core.Types.FileEntity a4 -> eta
                               HGit.Core.Types.DirEntity a4 -> w eta a4 } }) }
                 } in
                 go ww w1) -}
41165b19ac56c07b1c032bf14871a8b9
  $w$cfoldl' ::
    (b -> a2 -> b)
    -> b -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   @ a1
                   (w :: b -> a1 -> b)
                   (w1 :: b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> b -> b
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)])
                       (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case y of wild1 { (,) a2 a3 ->
                          case a3 of wild2 {
                            HGit.Core.Types.FileEntity a4 -> go ys eta
                            HGit.Core.Types.DirEntity a4
                            -> case w eta a4 of vx { DEFAULT -> go ys vx } } } }
                 } in
                 go ww w1) -}
8e34ea9f79a81787038ad358f00d31fb
  $w$cfoldl1 ::
    (a2 -> a2 -> a2)
    -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: a1 -> a1 -> a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> GHC.Maybe.Maybe a1 -> a1
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)])
                       (eta :: GHC.Maybe.Maybe a1) ->
                     case ds of wild {
                       []
                       -> case eta of wild1 {
                            GHC.Maybe.Nothing -> HGit.Core.Types.$fFoldableBlob8 @ a1
                            GHC.Maybe.Just v -> v }
                       : y ys
                       -> go
                            ys
                            (case y of wild1 { (,) a2 a3 ->
                             case a3 of wild2 {
                               HGit.Core.Types.FileEntity a4 -> eta
                               HGit.Core.Types.DirEntity a4
                               -> GHC.Maybe.Just
                                    @ a1
                                    (case eta of wild3 {
                                       GHC.Maybe.Nothing -> a4 GHC.Maybe.Just x -> w x a4 }) } }) }
                 } in
                 go ww (GHC.Maybe.Nothing @ a1)) -}
0cbc54e93711028e470c48e339a4558a
  $w$cfoldr ::
    (a2 -> b -> b)
    -> b -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   @ b
                   (w :: a1 -> b -> b)
                   (w1 :: b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> b
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       [] -> w1
                       : y ys
                       -> case y of wild1 { (,) a2 a3 ->
                          case a3 of wild2 {
                            HGit.Core.Types.FileEntity a4 -> go ys
                            HGit.Core.Types.DirEntity a4 -> w a4 (go ys) } } }
                 } in
                 go ww) -}
3fb44609875a1099df61ee6cda0da4f9
  $w$cfoldr' ::
    (a2 -> b -> b)
    -> b -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   @ b
                   (w :: a1 -> b -> b)
                   (w1 :: b)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> (b -> b) -> b -> b
                     <join 3> {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U)><L,U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)])
                       (eta :: b -> b)
                       (eta1 :: b) ->
                     case ds of wild {
                       [] -> eta eta1
                       : y ys
                       -> case y of wild1 { (,) a2 a3 ->
                          case a3 of wild2 {
                            HGit.Core.Types.FileEntity a4 -> go ys eta eta1
                            HGit.Core.Types.DirEntity a4
                            -> go
                                 ys
                                 (\ (z :: b)[OneShot] -> case w a4 z of vx { DEFAULT -> eta vx })
                                 eta1 } } }
                 } in
                 go ww (GHC.Base.id @ b) w1) -}
0064fa9c0a8542c990974d8be6797a09
  $w$cfoldr1 ::
    (a2 -> a2 -> a2)
    -> [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> a2
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: a1 -> a1 -> a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> GHC.Maybe.Maybe a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       [] -> GHC.Maybe.Nothing @ a1
                       : y ys
                       -> case y of wild1 { (,) a2 a3 ->
                          case a3 of wild2 {
                            HGit.Core.Types.FileEntity a4 -> go ys
                            HGit.Core.Types.DirEntity a4
                            -> GHC.Maybe.Just
                                 @ a1
                                 (case go ys of wild3 {
                                    GHC.Maybe.Nothing -> a4 GHC.Maybe.Just y1 -> w a4 y1 }) } } }
                 } in
                 case go ww of wild {
                   GHC.Maybe.Nothing -> HGit.Core.Types.$fFoldableBlob9 @ a1
                   GHC.Maybe.Just v -> v }) -}
2faaf978e944acc4382e8195965cd0ed
  $w$cliftEq ::
    GHC.Classes.Eq a =>
    (a1 -> b -> GHC.Types.Bool)
    -> [HGit.Core.Types.NamedFileTreeEntity a a1]
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,C(C1(U))><S,1*U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   @ a1
                   @ b
                   (w1 :: a1 -> b -> GHC.Types.Bool)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1])
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b]) ->
                 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity a a1)
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity a b)
                   (\ (eta1 :: ([GHC.Types.Char],
                                HGit.Core.Types.FileTreeEntity a a1))
                      (eta2 :: ([GHC.Types.Char],
                                HGit.Core.Types.FileTreeEntity a b))[OneShot] ->
                    case eta1 of wild { (,) x1 y1 ->
                    case eta2 of wild1 { (,) x2 y2 ->
                    case GHC.Base.eqString x1 x2 of wild2 {
                      GHC.Types.False -> GHC.Types.False
                      GHC.Types.True
                      -> HGit.Core.Types.$fEq1Dir_$cliftEq1
                           @ a
                           w
                           @ a1
                           @ b
                           w1
                           y1
                           y2 } } })
                   ww
                   ww1) -}
057984abb767724dc6cc6ce7d6d716f0
  $w$cliftEq2 ::
    (a -> b -> GHC.Types.Bool)
    -> (c -> d -> GHC.Types.Bool)
    -> [HGit.Core.Types.NamedFileTreeEntity a c]
    -> [HGit.Core.Types.NamedFileTreeEntity b d]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(C1(U))><S,1*U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: a -> b -> GHC.Types.Bool)
                   (w1 :: c -> d -> GHC.Types.Bool)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a c])
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity b d]) ->
                 Data.Functor.Classes.$fEq1NonEmpty_$cliftEq1
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity a c)
                   @ (HGit.Core.Types.PartialFilePath,
                      HGit.Core.Types.FileTreeEntity b d)
                   (\ (ds :: (HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity a c))
                      (ds1 :: (HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity b d))[OneShot] ->
                    case ds of wild { (,) x1 y1 ->
                    case ds1 of wild1 { (,) x2 y2 ->
                    case GHC.Base.eqString x1 x2 of wild2 {
                      GHC.Types.False -> GHC.Types.False
                      GHC.Types.True
                      -> HGit.Core.Types.$fEq2Dir_$cliftEq1
                           @ a
                           @ b
                           @ c
                           @ d
                           w
                           w1
                           y1
                           y2 } } })
                   ww
                   ww1) -}
c40a48aa57407a255fd1448dfa287b71
  $w$cliftShowsPrec ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> GHC.Prim.Int#
    -> [HGit.Core.Types.NamedFileTreeEntity a a1]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,C(C1(C1(U)))><S,U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   @ a1
                   (w1 :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a a1])
                   (w2 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       HGit.Core.Types.$fShow1Dir8
                       (GHC.Types.:
                          @ GHC.Types.Char
                          HGit.Core.Types.$fShow1Dir7
                          (GHC.CString.unpackAppendCString#
                             HGit.Core.Types.$fShow1Dir6
                             (let {
                                s :: GHC.Base.String
                                = GHC.Types.: @ GHC.Types.Char HGit.Core.Types.$fShow1Dir5 x
                              } in
                              case ww1 of wild {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                                : x1 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (case x1 of ww2 { (,) ww3 ww4 ->
                                      let {
                                        $wds :: [GHC.Types.Char]
                                                -> HGit.Core.Types.FileTreeEntity a a1
                                                -> GHC.Base.String
                                                -> GHC.Base.String
                                          {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
                                             Inline: [2] -}
                                        = \ (ww5 :: [GHC.Types.Char])
                                            (ww6 :: HGit.Core.Types.FileTreeEntity a a1)[OneShot]
                                            (w3 :: GHC.Base.String)[OneShot] ->
                                          GHC.Types.:
                                            @ GHC.Types.Char
                                            Data.Functor.Classes.$fShow1(,)3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)3
                                               (GHC.Show.showLitString
                                                  ww5
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)3
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        Data.Functor.Classes.$fShow1(,)2
                                                        (case ww6 of wild1 {
                                                           HGit.Core.Types.FileEntity arg
                                                           -> GHC.Base.++
                                                                @ GHC.Types.Char
                                                                HGit.Core.Types.$fShow1Dir3
                                                                (GHC.Show.showsPrec
                                                                   @ a
                                                                   w
                                                                   HGit.Core.Types.$fShow1Commit2
                                                                   arg
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      Data.Functor.Classes.$fShow1(,)1
                                                                      w3))
                                                           HGit.Core.Types.DirEntity arg
                                                           -> GHC.Base.++
                                                                @ GHC.Types.Char
                                                                HGit.Core.Types.$fShow1Dir1
                                                                (w1
                                                                   HGit.Core.Types.$fShow1Commit2
                                                                   arg
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      Data.Functor.Classes.$fShow1(,)1
                                                                      w3)) })))))
                                      } in
                                      $wds
                                        ww3
                                        ww4
                                        (let {
                                           lvl45 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                         } in
                                         letrec {
                                           showl :: [([GHC.Types.Char],
                                                      HGit.Core.Types.FileTreeEntity a a1)]
                                                    -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [([GHC.Types.Char],
                                                         HGit.Core.Types.FileTreeEntity a a1)]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl45
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (case y of ww5 { (,) ww6 ww7 ->
                                                     $wds ww6 ww7 (showl ys) }) }
                                         } in
                                         showl xs) }) })))
                 } in
                 case GHC.Prim.># ww 10# of lwild {
                   DEFAULT -> p w2
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $w$cliftShowsPrec1 ::
    GHC.Show.Show a =>
    (GHC.Types.Int -> a1 -> GHC.Show.ShowS)
    -> GHC.Prim.Int#
    -> HGit.Core.Types.FileTreeEntity a a1
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*C1(C1(C(U)))><S,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   @ a1
                   (w1 :: GHC.Types.Int -> a1 -> GHC.Show.ShowS)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case w2 of wild {
                   HGit.Core.Types.FileEntity arg
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w HGit.Core.Types.$fShow1Commit2 arg
                      } in
                      case GHC.Prim.># ww 10# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir3 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   HGit.Core.Types.DirEntity arg
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = w1 HGit.Core.Types.$fShow1Commit2 arg
                      } in
                      case GHC.Prim.># ww 10# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir1 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
34aca104485ce79d597049c5ea286be1
  $w$cliftShowsPrec2 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> ([b] -> GHC.Show.ShowS)
    -> GHC.Types.Int
    -> HGit.Core.Types.Commit a b
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C(U)))><L,1*C1(C1(C(U)))><L,1*C1(C(U))><L,1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (w2 :: [b] -> GHC.Show.ShowS)
                   (w3 :: GHC.Types.Int)
                   (w4 :: HGit.Core.Types.Commit a b) ->
                 case w4 of wild {
                   HGit.Core.Types.NullCommit -> HGit.Core.Types.$fShow1Commit3
                   HGit.Core.Types.Commit arg1 arg2 arg3
                   -> case w3 of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = w HGit.Core.Types.$fShow1Commit2 arg2
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case arg3 of ww2 { GHC.Base.:| ww3 ww4 ->
                          Data.Functor.Classes.$w$cliftShowsPrec1 @ b w1 w2 11# ww3 ww4 }
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            HGit.Core.Types.$fShow1Commit1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.$fShow(,)3
                               (GHC.Show.showLitString
                                  arg1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (f (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (g x1)))))))
                      } in
                      case GHC.Prim.># x 10# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } } }) -}
7dc59767b2d780b2fe43a39f1e30beb3
  $w$cliftShowsPrec3 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> GHC.Prim.Int#
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,C(C1(C1(U)))><L,C(C1(C1(U)))><S,U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b])
                   (w2 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       HGit.Core.Types.$fShow1Dir8
                       (GHC.Types.:
                          @ GHC.Types.Char
                          HGit.Core.Types.$fShow1Dir7
                          (GHC.CString.unpackAppendCString#
                             HGit.Core.Types.$fShow1Dir6
                             (let {
                                s :: GHC.Base.String
                                = GHC.Types.: @ GHC.Types.Char HGit.Core.Types.$fShow1Dir5 x
                              } in
                              case ww1 of wild {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                                : x1 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (case x1 of ww2 { (,) ww3 ww4 ->
                                      let {
                                        $wds :: HGit.Core.Types.PartialFilePath
                                                -> HGit.Core.Types.FileTreeEntity a b
                                                -> GHC.Base.String
                                                -> [GHC.Types.Char]
                                          {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
                                             Inline: [2] -}
                                        = \ (ww5 :: HGit.Core.Types.PartialFilePath)
                                            (ww6 :: HGit.Core.Types.FileTreeEntity a b)[OneShot]
                                            (w3 :: GHC.Base.String)[OneShot] ->
                                          GHC.Types.:
                                            @ GHC.Types.Char
                                            Data.Functor.Classes.$fShow1(,)3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)3
                                               (GHC.Show.showLitString
                                                  ww5
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)3
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        Data.Functor.Classes.$fShow1(,)2
                                                        (case ww6 of wild1 {
                                                           HGit.Core.Types.FileEntity arg
                                                           -> GHC.Base.++
                                                                @ GHC.Types.Char
                                                                HGit.Core.Types.$fShow1Dir3
                                                                (w HGit.Core.Types.$fShow1Commit2
                                                                   arg
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      Data.Functor.Classes.$fShow1(,)1
                                                                      w3))
                                                           HGit.Core.Types.DirEntity arg
                                                           -> GHC.Base.++
                                                                @ GHC.Types.Char
                                                                HGit.Core.Types.$fShow1Dir1
                                                                (w1
                                                                   HGit.Core.Types.$fShow1Commit2
                                                                   arg
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      Data.Functor.Classes.$fShow1(,)1
                                                                      w3)) })))))
                                      } in
                                      $wds
                                        ww3
                                        ww4
                                        (let {
                                           lvl45 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                         } in
                                         letrec {
                                           showl :: [(HGit.Core.Types.PartialFilePath,
                                                      HGit.Core.Types.FileTreeEntity a b)]
                                                    -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [(HGit.Core.Types.PartialFilePath,
                                                         HGit.Core.Types.FileTreeEntity a b)]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl45
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (case y of ww5 { (,) ww6 ww7 ->
                                                     $wds ww6 ww7 (showl ys) }) }
                                         } in
                                         showl xs) }) })))
                 } in
                 case GHC.Prim.># ww 10# of lwild {
                   DEFAULT -> p w2
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $w$cliftShowsPrec4 ::
    (GHC.Types.Int -> a -> GHC.Show.ShowS)
    -> (GHC.Types.Int -> b -> GHC.Show.ShowS)
    -> GHC.Prim.Int#
    -> HGit.Core.Types.FileTreeEntity a b
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*C1(C1(C(U)))><L,1*C1(C1(C(U)))><S,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> GHC.Show.ShowS)
                   (w1 :: GHC.Types.Int -> b -> GHC.Show.ShowS)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w2 of wild {
                   HGit.Core.Types.FileEntity arg
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = w HGit.Core.Types.$fShow1Commit2 arg
                      } in
                      case GHC.Prim.># ww 10# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir3 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   HGit.Core.Types.DirEntity arg
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = w1 HGit.Core.Types.$fShow1Commit2 arg
                      } in
                      case GHC.Prim.># ww 10# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir1 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToEncoding ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.Dir
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,C(C(C(C1(U(U,U)))))><L,1*U(1*U)>,
     Inline: [2] -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToEncoding1 ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,1*C1(C(C(C1(U(U,U)))))><S,1*U>,
     Inline: [2] -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToEncodingList ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.Dir
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,C(C(C(C1(U(U,U)))))><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [HGit.Core.Types.Dir
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case w1 of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = (HGit.Core.Types.$w$cliftToEncoding @ a w x)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = letrec {
                             go :: [HGit.Core.Types.Dir
                                      (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
                                   -> Data.Aeson.Encoding.Internal.Encoding'
                                        Data.Aeson.Types.Internal.Value
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds :: [HGit.Core.Types.Dir
                                           (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                               case ds of wild1 {
                                 []
                                 -> HGit.Core.Types.$fToJSON1Blob1
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P))
                                 : y ys
                                 -> (\ @ r1 ->
                                     let {
                                       vs :: Data.Aeson.Encoding.Internal.Encoding'
                                               Data.Aeson.Types.Internal.Value
                                       = go ys
                                     } in
                                     let {
                                       f2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                             -> Data.ByteString.Builder.Internal.BuildStep r1
                                       = (HGit.Core.Types.$w$cliftToEncoding @ a w y)
                                           `cast`
                                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                              <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                           @ r1
                                     } in
                                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r1) ->
                                     let {
                                       w2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                       = f2
                                           (vs
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                              @ r1
                                              x1)
                                     } in
                                     (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                        (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case w3 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                      Data.Aeson.Encoding.Internal.$wcomma @ r1 w2 ww1 ww2 w4 })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)))
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P)) }
                           } in
                           (go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       let {
                         w2 :: Data.ByteString.Builder.Internal.BuildStep r
                         = f (f1
                                (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                       } in
                       (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w3 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w2 ww1 ww2 w4 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToEncodingList1 ::
    (a -> Data.Aeson.Encoding.Internal.Encoding)
    -> [HGit.Core.Types.FileTreeEntity
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,C(C(C(C1(U(U,U)))))><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Encoding.Internal.Encoding)
                   (w1 :: [HGit.Core.Types.FileTreeEntity
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case w1 of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <Type>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = (HGit.Core.Types.$w$cliftToEncoding1 @ a w x)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = letrec {
                             go :: [HGit.Core.Types.FileTreeEntity
                                      (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
                                   -> Data.Aeson.Encoding.Internal.Encoding'
                                        Data.Aeson.Types.Internal.Value
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds :: [HGit.Core.Types.FileTreeEntity
                                           (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                               case ds of wild1 {
                                 []
                                 -> HGit.Core.Types.$fToJSON1Blob1
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P))
                                 : y ys
                                 -> (\ @ r1 ->
                                     let {
                                       vs :: Data.Aeson.Encoding.Internal.Encoding'
                                               Data.Aeson.Types.Internal.Value
                                       = go ys
                                     } in
                                     let {
                                       f2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                             -> Data.ByteString.Builder.Internal.BuildStep r1
                                       = (HGit.Core.Types.$w$cliftToEncoding1 @ a w y)
                                           `cast`
                                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                              <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                           @ r1
                                     } in
                                     \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r1) ->
                                     let {
                                       w2 :: Data.ByteString.Builder.Internal.BuildStep r1
                                       = f2
                                           (vs
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                              @ r1
                                              x1)
                                     } in
                                     (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                        (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case w3 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                      Data.Aeson.Encoding.Internal.$wcomma @ r1 w2 ww1 ww2 w4 })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)))
                                      `cast`
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                    <Data.Aeson.Types.Internal.Value>_P)) }
                           } in
                           (go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       \ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                       let {
                         w2 :: Data.ByteString.Builder.Internal.BuildStep r
                         = f (f1
                                (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                       } in
                       (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w3 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w2 ww1 ww2 w4 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSON ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.Blob a
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.Blob a) ->
                 case w2 of wild {
                   HGit.Core.Types.Chunk g3 g4
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                HGit.Core.Types.$fToJSON1Blob10
                                (case HGit.Core.Types.$w$dTaggedObject'1
                                        @ a
                                        (Data.Aeson.Types.ToJSON.To1Args
                                           @ Data.Aeson.Types.Internal.Value
                                           @ Data.Aeson.Types.Generic.One
                                           @ a
                                           @~ <Data.Aeson.Types.Generic.One>_N
                                           w
                                           w1)
                                        Data.Aeson.Types.Internal.defaultTaggedObject1
                                        (GHC.Generics.:*:
                                           @ Type
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                GHC.Generics.Par1)
                                           @ a
                                           g3
                                             `cast`
                                           (Sym (GHC.Generics.N:K1[0]
                                                     <Type>_N
                                                     <GHC.Generics.R>_P
                                                     <GHC.Base.String>_R
                                                     <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                       <Type>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          GHC.Base.String>_R) <a>_N)
                                           g4
                                             `cast`
                                           (Sym (GHC.Generics.N:Par1[0]
                                                     <a>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                       <Type>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.Par1>_R) <a>_N))
                                        (GHC.Types.[]
                                           @ Data.Aeson.Types.Internal.Pair) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ Data.Aeson.Types.Internal.Pair ww1 ww2 }))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) }
                   HGit.Core.Types.Empty
                   -> case HGit.Core.Types.$fToJSON1Blob3 of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSON1 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.HashableCommit a
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: HGit.Core.Types.HashableCommit a) ->
                 case w2 of wild {
                   HGit.Core.Types.NullCommit
                   -> case HGit.Core.Types.$fToJSON1Commit5 of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) }
                   HGit.Core.Types.Commit g3 g4 g5
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                HGit.Core.Types.$fToJSON1Commit2
                                (case HGit.Core.Types.$w$dTaggedObject'3
                                        @ a
                                        (Data.Aeson.Types.ToJSON.To1Args
                                           @ Data.Aeson.Types.Internal.Value
                                           @ Data.Aeson.Types.Generic.One
                                           @ a
                                           @~ <Data.Aeson.Types.Generic.One>_N
                                           w
                                           w1)
                                        Data.Aeson.Types.Internal.defaultTaggedObject1
                                        (GHC.Generics.:*:
                                           @ Type
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                                           @ (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Functor.Const.Const
                                                      Merkle.Types.IPFS.RawIPFSHash
                                                      HGit.Core.Types.HashableDir))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.Rec1
                                                                    GHC.Base.NonEmpty))
                                           @ a
                                           g3
                                             `cast`
                                           (Sym (GHC.Generics.N:K1[0]
                                                     <Type>_N
                                                     <GHC.Generics.R>_P
                                                     <GHC.Base.String>_R
                                                     <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                       <Type>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          GHC.Base.String>_R) <a>_N)
                                           (GHC.Generics.:*:
                                              @ Type
                                              @ (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Data.Functor.Const.Const
                                                         Merkle.Types.IPFS.RawIPFSHash
                                                         HGit.Core.Types.HashableDir)))
                                              @ (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Maybe.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                                              @ a
                                              g4
                                                `cast`
                                              (Sym (GHC.Generics.N:K1[0]
                                                        <Type>_N
                                                        <GHC.Generics.R>_P
                                                        <Data.Functor.Const.Const
                                                           Merkle.Types.IPFS.RawIPFSHash
                                                           HGit.Core.Types.HashableDir>_R
                                                        <a>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                          <Type>_N
                                                                          <GHC.Generics.S>_P
                                                                          <'GHC.Generics.MetaSel
                                                                             'GHC.Maybe.Nothing
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy>_P
                                                                          <GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             (Data.Functor.Const.Const
                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                HGit.Core.Types.HashableDir)>_R) <a>_N)
                                              g5
                                                `cast`
                                              ((Sym (GHC.Generics.N:Rec1[0]
                                                         <Type>_N
                                                         <GHC.Base.NonEmpty>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                           <Type>_N
                                                                                           <GHC.Generics.S>_P
                                                                                           <'GHC.Generics.MetaSel
                                                                                              'GHC.Maybe.Nothing
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy>_P
                                                                                           <GHC.Generics.Rec1
                                                                                              GHC.Base.NonEmpty>_R)) <a>_N)))
                                        (GHC.Types.[]
                                           @ Data.Aeson.Types.Internal.Pair) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ Data.Aeson.Types.Internal.Pair ww1 ww2 }))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSON2 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.Dir
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,C(U)><L,1*U(1*U)>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: HGit.Core.Types.Dir
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (HGit.Core.Types.$fToJSON1Dir9,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        (Nth:0
                                                             (Nth:2
                                                                  (<GHC.Prim.State#
                                                                      GHC.Prim.RealWorld>_R
                                                                   ->_R ((#,#)
                                                                           <'GHC.Types.TupleRep
                                                                              '[]>_R
                                                                           <'GHC.Types.LiftedRep>_R
                                                                           <GHC.Prim.State#
                                                                              GHC.Prim.RealWorld>_R
                                                                           (Data.Vector.Generic.Base.Mutable
                                                                              <Data.Vector.Vector>_N
                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                   <GHC.Prim.RealWorld>_N)
                                                                              <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                                    case w1 of wild { HGit.Core.Types.Dir g3 ->
                                    HGit.Core.Types.$wfoldlM_loop
                                      GHC.Types.SPEC
                                      0#
                                      0#
                                      ipv1
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Nth:0
                                              (Nth:3
                                                   (Nth:3
                                                        (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                         ->_R ((#,#)
                                                                 <'GHC.Types.TupleRep '[]>_R
                                                                 <'GHC.Types.LiftedRep>_R
                                                                 <GHC.Prim.State#
                                                                    GHC.Prim.RealWorld>_R
                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                  (GHC.ST.ST
                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                    <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                                         (Nth:1
                                              (Nth:3
                                                   (Nth:3
                                                        (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                         ->_R ((#,#)
                                                                 <'GHC.Types.TupleRep '[]>_R
                                                                 <'GHC.Types.LiftedRep>_R
                                                                 <GHC.Prim.State#
                                                                    GHC.Prim.RealWorld>_R
                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                  (GHC.ST.ST
                                                                                                                     GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                    <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                                      0#
                                      (GHC.Base.map
                                         @ (HGit.Core.Types.PartialFilePath,
                                            HGit.Core.Types.FileTreeEntity
                                              (Data.Functor.Const.Const
                                                 Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)
                                              a)
                                         @ Data.Aeson.Types.Internal.Value
                                         (\ (x :: (HGit.Core.Types.PartialFilePath,
                                                   HGit.Core.Types.FileTreeEntity
                                                     (Data.Functor.Const.Const
                                                        Merkle.Types.IPFS.RawIPFSHash
                                                        HGit.Core.Types.Blob)
                                                     a)) ->
                                          case x of wild1 { (,) x1 y ->
                                          case GHC.Magic.runRW#
                                                 @ ('GHC.Types.TupleRep
                                                      '[ 'GHC.Types.TupleRep '[],
                                                         'GHC.Types.LiftedRep])
                                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      Data.Vector.Vector
                                                        Data.Aeson.Types.Internal.Value #)
                                                 (\ (s2 :: GHC.Prim.State#
                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                  case GHC.Prim.newArray#
                                                         @ Data.Aeson.Types.Internal.Value
                                                         @ (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                         2#
                                                         (Data.Vector.Mutable.uninitialised
                                                            @ Data.Aeson.Types.Internal.Value)
                                                         s2
                                                           `cast`
                                                         (GHC.Prim.State#
                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      (Nth:0
                                                                           (Nth:2
                                                                                (<GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld>_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         <GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld>_R
                                                                                         (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <GHC.Prim.RealWorld>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R of ds3 { (#,#) ipv2 ipv3 ->
                                                  case GHC.Prim.writeArray#
                                                         @ (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                         @ Data.Aeson.Types.Internal.Value
                                                         ipv3
                                                         0#
                                                         (case GHC.Magic.runRW#
                                                                 @ ('GHC.Types.TupleRep
                                                                      '[ 'GHC.Types.TupleRep '[],
                                                                         'GHC.Types.LiftedRep])
                                                                 @ (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      Data.Text.Internal.Text #)
                                                                 (\ (s3 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld)[OneShot] ->
                                                                  case GHC.Prim.newByteArray#
                                                                         @ GHC.Prim.RealWorld
                                                                         10#
                                                                         s3 of ds2 { (#,#) ipv4 ipv5 ->
                                                                  HGit.Core.Types.$wouter2
                                                                    ipv5
                                                                    4#
                                                                    x1
                                                                    0#
                                                                    ipv4 }) of ds2 { (#,#) ipv4 ipv5 ->
                                                          case ipv5 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                                          Data.Aeson.Types.Internal.String dt } })
                                                         ipv2 of s'# { DEFAULT ->
                                                  case GHC.Prim.writeArray#
                                                         @ (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                         @ Data.Aeson.Types.Internal.Value
                                                         ipv3
                                                         1#
                                                         (case HGit.Core.Types.$w$cliftToJSON3
                                                                 @ a
                                                                 w
                                                                 y of ww { Unit# ww1 ->
                                                          Data.Aeson.Types.Internal.Object ww1 })
                                                         s'# of s'#1 { DEFAULT ->
                                                  case GHC.Prim.unsafeFreezeArray#
                                                         @ (Control.Monad.Primitive.PrimState
                                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                                         @ Data.Aeson.Types.Internal.Value
                                                         ipv3
                                                         s'#1 of ds2 { (#,#) ipv4 ipv5 ->
                                                  (# ipv4
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                             <GHC.Prim.RealWorld>_N))_R,
                                                     Data.Vector.Vector
                                                       @ Data.Aeson.Types.Internal.Value
                                                       0#
                                                       2#
                                                       ipv5 #) } } } }) of ds2 { (#,#) ipv2 ipv3 ->
                                          case ipv3 of dt { Data.Vector.Vector ipv4 ipv5 ipv6 ->
                                          Data.Aeson.Types.Internal.Array dt } } })
                                         g3)
                                      ipv
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              (Nth:0
                                                   (Nth:2
                                                        (Nth:3
                                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      <GHC.Prim.State#
                                                                         GHC.Prim.RealWorld>_R
                                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                       (GHC.ST.ST
                                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R } }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                 (# ww1 #) }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSON3 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> HGit.Core.Types.FileTreeEntity
         (HGit.Core.Types.Hash HGit.Core.Types.Blob) a
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: HGit.Core.Types.FileTreeEntity
                            (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                 case w1 of wild {
                   HGit.Core.Types.FileEntity g3
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                HGit.Core.Types.$fToJSON1Dir6
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (HGit.Core.Types.$fToJSON1Dir4,
                                    Data.Aeson.Types.Internal.$WString
                                      g3
                                        `cast`
                                      (Sym (GHC.Generics.N:K1[0]
                                                <Type>_N
                                                <GHC.Generics.R>_P
                                                <Data.Functor.Const.Const
                                                   Merkle.Types.IPFS.RawIPFSHash
                                                   HGit.Core.Types.Blob>_R
                                                <a>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                   <Type>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Maybe.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Data.Functor.Const.Const
                                                                         Merkle.Types.IPFS.RawIPFSHash
                                                                         HGit.Core.Types.Blob)>_R) <a>_N ; (Nth:2
                                                                                                                (Nth:3
                                                                                                                     (Nth:3
                                                                                                                          (Nth:3
                                                                                                                               (<Data.Aeson.Types.Internal.Options>_R
                                                                                                                                ->_R <Data.Aeson.Types.ToJSON.ToArgs
                                                                                                                                        Data.Aeson.Types.Internal.Value
                                                                                                                                        Data.Aeson.Types.Generic.One
                                                                                                                                        a>_R
                                                                                                                                ->_R <GHC.Base.String>_R
                                                                                                                                ->_R <GHC.Generics.M1
                                                                                                                                        GHC.Generics.S
                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                           'GHC.Maybe.Nothing
                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                        (GHC.Generics.Rec0
                                                                                                                                           (Data.Functor.Const.Const
                                                                                                                                              Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                              HGit.Core.Types.Blob))
                                                                                                                                        a>_R
                                                                                                                                ->_R Data.Tagged.N:Tagged[0]
                                                                                                                                         <Type>_N
                                                                                                                                         <Data.Aeson.Types.Generic.False>_P
                                                                                                                                         <Data.DList.DList
                                                                                                                                            Data.Aeson.Types.Internal.Pair>_R ; Data.DList.N:DList[0]
                                                                                                                                                                                    <Data.Aeson.Types.Internal.Pair>_R)))) ; (GHC.Generics.N:M1[0]
                                                                                                                                                                                                                                  <Type>_N
                                                                                                                                                                                                                                  <GHC.Generics.S>_P
                                                                                                                                                                                                                                  <'GHC.Generics.MetaSel
                                                                                                                                                                                                                                     'GHC.Maybe.Nothing
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                                                                  <GHC.Generics.K1
                                                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                                                     (Data.Functor.Const.Const
                                                                                                                                                                                                                                        Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                        HGit.Core.Types.Blob)>_R <a>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                                                                              <Type>_N
                                                                                                                                                                                                                                                                              <GHC.Generics.R>_P
                                                                                                                                                                                                                                                                              <Data.Functor.Const.Const
                                                                                                                                                                                                                                                                                 Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                                                                                                                                                 HGit.Core.Types.Blob>_R
                                                                                                                                                                                                                                                                              <a>_P ; (Data.Functor.Const.N:Const[0]
                                                                                                                                                                                                                                                                                           <Type
                                                                                                                                                                                                                                                                                            -> Type>_N
                                                                                                                                                                                                                                                                                           <Merkle.Types.IPFS.RawIPFSHash>_R
                                                                                                                                                                                                                                                                                           <HGit.Core.Types.Blob>_P ; Merkle.Types.IPFS.N:RawIPFSHash[0])))))))
                                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) }
                   HGit.Core.Types.DirEntity g3
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                HGit.Core.Types.$fToJSON1Dir1
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (HGit.Core.Types.$fToJSON1Dir4, w g3)
                                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSONList ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.Blob a]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.Blob a]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         HGit.Core.Types.$wfoldlM_loop
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Nth:0
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                              (Nth:1
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                           0#
                           (GHC.Base.map
                              @ (HGit.Core.Types.Blob a)
                              @ Data.Aeson.Types.Internal.Value
                              (HGit.Core.Types.$fToJSON1Blob_$cliftToJSON @ a w w1)
                              w2)
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                            (GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSONList1 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> ([a] -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.HashableCommit a]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [a] -> Data.Aeson.Types.Internal.Value)
                   (w2 :: [HGit.Core.Types.HashableCommit a]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         HGit.Core.Types.$wfoldlM_loop
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Nth:0
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                              (Nth:1
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                           0#
                           (GHC.Base.map
                              @ (HGit.Core.Types.Commit
                                   (HGit.Core.Types.Hash HGit.Core.Types.HashableDir) a)
                              @ Data.Aeson.Types.Internal.Value
                              (HGit.Core.Types.$fToJSON1Commit_$cliftToJSON @ a w w1)
                              w2)
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                            (GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSONList2 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.Dir
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [HGit.Core.Types.Dir
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         HGit.Core.Types.$wfoldlM_loop
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Nth:0
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                              (Nth:1
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                           0#
                           (GHC.Base.map
                              @ (HGit.Core.Types.Dir
                                   (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
                              @ Data.Aeson.Types.Internal.Value
                              (\ (w2 :: HGit.Core.Types.Dir
                                          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                               case HGit.Core.Types.$w$cliftToJSON2 @ a w w2 of ww { Unit# ww1 ->
                               Data.Aeson.Types.Internal.Object ww1 })
                              w1)
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                            (GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$cliftToJSONList3 ::
    (a -> Data.Aeson.Types.Internal.Value)
    -> [HGit.Core.Types.FileTreeEntity
          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: a -> Data.Aeson.Types.Internal.Value)
                   (w1 :: [HGit.Core.Types.FileTreeEntity
                             (HGit.Core.Types.Hash HGit.Core.Types.Blob) a]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             (Nth:0
                                                  (Nth:2
                                                       (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                        ->_R ((#,#)
                                                                <'GHC.Types.TupleRep '[]>_R
                                                                <'GHC.Types.LiftedRep>_R
                                                                <GHC.Prim.State#
                                                                   GHC.Prim.RealWorld>_R
                                                                (Data.Vector.Generic.Base.Mutable
                                                                   <Data.Vector.Vector>_N
                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                        <GHC.Prim.RealWorld>_N)
                                                                   <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds1 { (#,#) ipv ipv1 ->
                         HGit.Core.Types.$wfoldlM_loop
                           GHC.Types.SPEC
                           0#
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Nth:0
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                              (Nth:1
                                   (Nth:3
                                        (Nth:3
                                             (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                              ->_R ((#,#)
                                                      <'GHC.Types.TupleRep '[]>_R
                                                      <'GHC.Types.LiftedRep>_R
                                                      <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                      (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                         <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                           0#
                           (GHC.Base.map
                              @ (HGit.Core.Types.FileTreeEntity
                                   (HGit.Core.Types.Hash HGit.Core.Types.Blob) a)
                              @ Data.Aeson.Types.Internal.Value
                              (\ (w2 :: HGit.Core.Types.FileTreeEntity
                                          (HGit.Core.Types.Hash HGit.Core.Types.Blob) a) ->
                               case HGit.Core.Types.$w$cliftToJSON3 @ a w w2 of ww { Unit# ww1 ->
                               Data.Aeson.Types.Internal.Object ww1 })
                              w1)
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   (Nth:0
                                        (Nth:2
                                             (Nth:3
                                                  (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                   ->_R ((#,#)
                                                           <'GHC.Types.TupleRep '[]>_R
                                                           <'GHC.Types.LiftedRep>_R
                                                           <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                            (GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
6db1016474f88283029b688dccf7466b
  $w$cmaximum ::
    GHC.Classes.Ord a2 =>
    [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> a2
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: GHC.Classes.Ord a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> Data.Functor.Utils.Max a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Maybe.Nothing @ a1)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                       : y ys
                       -> case (go ys)
                                 `cast`
                               (Data.Functor.Utils.N:Max[0] <a1>_N) of wild1 {
                            GHC.Maybe.Nothing
                            -> case y of wild2 { (,) a2 a3 ->
                               case a3 of wild3 {
                                 HGit.Core.Types.FileEntity a4
                                 -> (GHC.Maybe.Nothing @ a1)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                                 HGit.Core.Types.DirEntity a4
                                 -> (GHC.Maybe.Just @ a1 a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N) } }
                            GHC.Maybe.Just ipv
                            -> case y of wild2 { (,) a2 a3 ->
                               case a3 of wild3 {
                                 HGit.Core.Types.FileEntity a4
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                                 HGit.Core.Types.DirEntity a4
                                 -> case GHC.Classes.>= @ a1 w a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild1 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N)
                                      GHC.Types.True
                                      -> (GHC.Maybe.Just @ a1 a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Max[0]) <a1>_N) } } } } }
                 } in
                 case (go ww) `cast` (Data.Functor.Utils.N:Max[0] <a1>_N) of wild {
                   GHC.Maybe.Nothing -> HGit.Core.Types.$fFoldableBlob6 @ a1
                   GHC.Maybe.Just v -> v }) -}
773a2fa5fdfac83357b6ca0a731b7082
  $w$cminimum ::
    GHC.Classes.Ord a2 =>
    [HGit.Core.Types.NamedFileTreeEntity a1 a2] -> a2
  {- Arity: 2, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: GHC.Classes.Ord a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> Data.Functor.Utils.Min a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Maybe.Nothing @ a1)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                       : y ys
                       -> case (go ys)
                                 `cast`
                               (Data.Functor.Utils.N:Min[0] <a1>_N) of wild1 {
                            GHC.Maybe.Nothing
                            -> case y of wild2 { (,) a2 a3 ->
                               case a3 of wild3 {
                                 HGit.Core.Types.FileEntity a4
                                 -> (GHC.Maybe.Nothing @ a1)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                                 HGit.Core.Types.DirEntity a4
                                 -> (GHC.Maybe.Just @ a1 a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N) } }
                            GHC.Maybe.Just ipv
                            -> case y of wild2 { (,) a2 a3 ->
                               case a3 of wild3 {
                                 HGit.Core.Types.FileEntity a4
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                                 HGit.Core.Types.DirEntity a4
                                 -> case GHC.Classes.<= @ a1 w a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild1 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N)
                                      GHC.Types.True
                                      -> (GHC.Maybe.Just @ a1 a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Min[0]) <a1>_N) } } } } }
                 } in
                 case (go ww) `cast` (Data.Functor.Utils.N:Min[0] <a1>_N) of wild {
                   GHC.Maybe.Nothing -> HGit.Core.Types.$fFoldableBlob4 @ a1
                   GHC.Maybe.Just v -> v }) -}
d7f85258f067f97e08ac188b57fe26d4
  $w$cproduct ::
    GHC.Num.Num a2 =>
    [HGit.Core.Types.NamedFileTreeEntity a1 a2]
    -> Data.Semigroup.Internal.Product a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,1*C1(U))><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: GHC.Num.Num a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 let {
                   z :: a1
                   = GHC.Num.fromInteger
                       @ a1
                       w
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> Data.Semigroup.Internal.Product a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       [] -> z `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a1
                             w
                             (case y of wild1 { (,) a2 a3 ->
                              case a3 of wild2 {
                                HGit.Core.Types.FileEntity a4 -> z
                                HGit.Core.Types.DirEntity a4 -> a4 } })
                             (go ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a1>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a1>_R)) }
                 } in
                 go ww) -}
1ec9f3b8cac26fd3fe11243c565a2f46
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int#
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: [HGit.Core.Types.NamedFileTreeEntity a b])
                   (w2 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       HGit.Core.Types.$fShowDir2
                       (GHC.CString.unpackAppendCString#
                          HGit.Core.Types.$fShow1Dir6
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString# HGit.Core.Types.$fShowDir1 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww2 { (,) ww3 ww4 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)4
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Show.showLitString
                                           ww3
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)3
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$sgo1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)2
                                                       (let {
                                                          lvl45 :: [GHC.Types.Char]
                                                          = GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showList__2
                                                              s
                                                        } in
                                                        letrec {
                                                          showl :: [([GHC.Types.Char],
                                                                     HGit.Core.Types.FileTreeEntity
                                                                       a b)]
                                                                   -> GHC.Base.String
                                                            {- Arity: 1, Strictness: <S,1*U> -}
                                                          = \ (ds2 :: [([GHC.Types.Char],
                                                                        HGit.Core.Types.FileTreeEntity
                                                                          a b)]) ->
                                                            case ds2 of wild1 {
                                                              [] -> lvl45
                                                              : y ys
                                                              -> GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showList__1
                                                                   (case y of ww5 { (,) ww6 ww7 ->
                                                                    GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      GHC.Show.$fShow(,)4
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         GHC.Show.$fShow(,)3
                                                                         (GHC.Show.showLitString
                                                                            ww6
                                                                            (GHC.Types.:
                                                                               @ GHC.Types.Char
                                                                               GHC.Show.$fShow(,)3
                                                                               (GHC.Types.:
                                                                                  @ GHC.Types.Char
                                                                                  GHC.Show.showList__1
                                                                                  (GHC.Show.$fShow(,)_$sgo1
                                                                                     (GHC.Types.:
                                                                                        @ GHC.Types.Char
                                                                                        GHC.Show.$fShow(,)2
                                                                                        (showl ys))
                                                                                     (HGit.Core.Types.$w$cshowsPrec1
                                                                                        @ a
                                                                                        @ b
                                                                                        w
                                                                                        w1
                                                                                        0#
                                                                                        ww7)
                                                                                     (GHC.Types.[]
                                                                                        @ GHC.Show.ShowS)))))) }) }
                                                        } in
                                                        showl xs))
                                                    (HGit.Core.Types.$w$cshowsPrec1
                                                       @ a
                                                       @ b
                                                       w
                                                       w1
                                                       0#
                                                       ww4)
                                                    (GHC.Types.[] @ GHC.Show.ShowS)))))) }) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w2
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2)) }) -}
ae33a7ec835849f6fc910a468589c69e
  $w$cshowsPrec1 ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int#
    -> HGit.Core.Types.FileTreeEntity a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: HGit.Core.Types.FileTreeEntity a b) ->
                 case w2 of wild {
                   HGit.Core.Types.FileEntity b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w HGit.Core.Types.$fShow1Commit2 b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir3 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   HGit.Core.Types.DirEntity b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w1 HGit.Core.Types.$fShow1Commit2 b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char HGit.Core.Types.$fShow1Dir1 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                HGit.Core.Types.$fShow1Dir1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
0855d4c34fa85a76c3a1bc7a8fe963a7
  $w$csum ::
    GHC.Num.Num a2 =>
    [HGit.Core.Types.NamedFileTreeEntity a1 a2]
    -> Data.Semigroup.Internal.Sum a2
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><S,1*U>, Inline: [2],
     Unfolding: (\ @ a
                   @ a1
                   (w :: GHC.Num.Num a1)
                   (ww :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 let {
                   z :: a1
                   = GHC.Num.fromInteger
                       @ a1
                       w
                       Data.Semigroup.Internal.$fSemigroupAll2
                 } in
                 letrec {
                   go :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a a1)]
                         -> Data.Semigroup.Internal.Sum a1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a a1)]) ->
                     case ds of wild {
                       [] -> z `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a1
                             w
                             (case y of wild1 { (,) a2 a3 ->
                              case a3 of wild2 {
                                HGit.Core.Types.FileEntity a4 -> z
                                HGit.Core.Types.DirEntity a4 -> a4 } })
                             (go ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a1>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a1>_R)) }
                 } in
                 go ww) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$ctraverse ::
    GHC.Base.Functor f =>
    (forall a1. a1 -> f a1)
    -> (a -> f b)
    -> HGit.Core.Types.Blob a
    -> f (HGit.Core.Types.Blob b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ f :: Type -> Type
                   @ a
                   @ b
                   (ww :: GHC.Base.Functor f)
                   (ww1 :: forall a1. a1 -> f a1)
                   (w :: a -> f b)
                   (w1 :: HGit.Core.Types.Blob a) ->
                 case w1 of wild {
                   HGit.Core.Types.Chunk a1 a2
                   -> GHC.Base.fmap
                        @ f
                        ww
                        @ b
                        @ (HGit.Core.Types.Blob b)
                        (\ (b2 :: b) -> HGit.Core.Types.Chunk @ b a1 b2)
                        (w a2)
                   HGit.Core.Types.Empty
                   -> ww1 @ (HGit.Core.Types.Blob b) (HGit.Core.Types.Empty @ b) }) -}
34aca104485ce79d597049c5ea286be1
  $w$ctraverse1 ::
    GHC.Base.Functor f =>
    (forall a3. a3 -> f a3)
    -> (forall a3 b1 c. (a3 -> b1 -> c) -> f a3 -> f b1 -> f c)
    -> (a2 -> f b)
    -> HGit.Core.Types.Commit a1 a2
    -> f (HGit.Core.Types.Commit a1 b)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,C(C1(C1(U)))><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (ww :: GHC.Base.Functor f)
                   (ww1 :: forall a2. a2 -> f a2)
                   (ww2 :: forall a2 b1 c. (a2 -> b1 -> c) -> f a2 -> f b1 -> f c)
                   (w :: a1 -> f b)
                   (w1 :: HGit.Core.Types.Commit a a1) ->
                 case w1 of wild {
                   HGit.Core.Types.NullCommit
                   -> ww1
                        @ (HGit.Core.Types.Commit a b)
                        (HGit.Core.Types.NullCommit @ a @ b)
                   HGit.Core.Types.Commit a2 a3 a4
                   -> GHC.Base.fmap
                        @ f
                        ww
                        @ (GHC.Base.NonEmpty b)
                        @ (HGit.Core.Types.Commit a b)
                        (\ (b3 :: GHC.Base.NonEmpty b) ->
                         HGit.Core.Types.Commit @ a @ b a2 a3 b3)
                        (Data.Traversable.$w$ctraverse3 @ f @ a1 @ b ww1 ww2 w a4) }) -}
be80b6a731843e8b4df725ad76728847
  $w$ctraverse2 ::
    (forall a3 b1. (a3 -> b1) -> f a3 -> f b1)
    -> (forall a3. a3 -> f a3)
    -> (forall a3 b1 c. (a3 -> b1 -> c) -> f a3 -> f b1 -> f c)
    -> (a2 -> f b)
    -> [HGit.Core.Types.NamedFileTreeEntity a1 a2]
    -> f (HGit.Core.Types.Dir a1 b)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,C(C1(C1(U)))><L,C(U)><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (ww :: forall a2 b1. (a2 -> b1) -> f a2 -> f b1)
                   (ww1 :: forall a2. a2 -> f a2)
                   (ww2 :: forall a2 b1 c. (a2 -> b1 -> c) -> f a2 -> f b1 -> f c)
                   (w :: a1 -> f b)
                   (ww3 :: [HGit.Core.Types.NamedFileTreeEntity a a1]) ->
                 ww
                   @ [HGit.Core.Types.NamedFileTreeEntity a b]
                   @ (HGit.Core.Types.Dir a b)
                   (HGit.Core.Types.Dir @ a @ b)
                   (let {
                      z :: f [(HGit.Core.Types.PartialFilePath,
                               HGit.Core.Types.FileTreeEntity a b)]
                      = ww1
                          @ [(HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity a b)]
                          (GHC.Types.[]
                             @ (HGit.Core.Types.PartialFilePath,
                                HGit.Core.Types.FileTreeEntity a b))
                    } in
                    letrec {
                      go :: [(HGit.Core.Types.PartialFilePath,
                              HGit.Core.Types.FileTreeEntity a a1)]
                            -> f [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a b)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a a1)]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> ww2
                               @ (HGit.Core.Types.PartialFilePath,
                                  HGit.Core.Types.FileTreeEntity a b)
                               @ [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a b)]
                               @ [(HGit.Core.Types.PartialFilePath,
                                   HGit.Core.Types.FileTreeEntity a b)]
                               (GHC.Types.:
                                  @ (HGit.Core.Types.PartialFilePath,
                                     HGit.Core.Types.FileTreeEntity a b))
                               (case y of wild1 { (,) a2 a3 ->
                                ww
                                  @ (HGit.Core.Types.FileTreeEntity a b)
                                  @ (HGit.Core.Types.PartialFilePath,
                                     HGit.Core.Types.FileTreeEntity a b)
                                  (\ (b2 :: HGit.Core.Types.FileTreeEntity a b) -> (a2, b2))
                                  (case a3 of wild2 {
                                     HGit.Core.Types.FileEntity a4
                                     -> ww1
                                          @ (HGit.Core.Types.FileTreeEntity a b)
                                          (HGit.Core.Types.FileEntity @ a @ b a4)
                                     HGit.Core.Types.DirEntity a4
                                     -> ww
                                          @ b
                                          @ (HGit.Core.Types.FileTreeEntity a b)
                                          (HGit.Core.Types.DirEntity @ a @ b)
                                          (w a4) }) })
                               (go ys) }
                    } in
                    go ww3)) -}
ae33a7ec835849f6fc910a468589c69e
  $w$ctraverse3 ::
    GHC.Base.Functor f =>
    (forall a3. a3 -> f a3)
    -> (a2 -> f b)
    -> HGit.Core.Types.FileTreeEntity a1 a2
    -> f (HGit.Core.Types.FileTreeEntity a1 b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ f :: Type -> Type
                   @ a1
                   @ b
                   (ww :: GHC.Base.Functor f)
                   (ww1 :: forall a2. a2 -> f a2)
                   (w :: a1 -> f b)
                   (w1 :: HGit.Core.Types.FileTreeEntity a a1) ->
                 case w1 of wild {
                   HGit.Core.Types.FileEntity a2
                   -> ww1
                        @ (HGit.Core.Types.FileTreeEntity a b)
                        (HGit.Core.Types.FileEntity @ a @ b a2)
                   HGit.Core.Types.DirEntity a2
                   -> GHC.Base.fmap
                        @ f
                        ww
                        @ b
                        @ (HGit.Core.Types.FileTreeEntity a b)
                        (HGit.Core.Types.DirEntity @ a @ b)
                        (w a2) }) -}
655e300a8e8015bab451171b64573e5c
  $w$dFromProduct ::
    Data.Aeson.Types.FromJSON.FromArgs Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1
            a1)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,A,U)><L,1*U(U)>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.FromJSON.FromArgs
                           Data.Aeson.Types.Generic.One a1)
                   (w1 :: Data.Aeson.Types.Internal.Array)
                   (w2 :: GHC.Types.Int) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser (GHC.Generics.Par1 a1)
                   = case w of wild { Data.Aeson.Types.FromJSON.From1Args co pj ds ->
                     let {
                       m1 :: Data.Aeson.Types.Internal.Parser a1
                       = pj
                           (case w1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                            case w2 of wild2 { GHC.Types.I# y ->
                            case GHC.Prim.indexArray#
                                   @ Data.Aeson.Types.Internal.Value
                                   dt2
                                   (GHC.Prim.+# dt y) of ds2 { Unit# ipv ->
                            ipv } } })
                     } in
                     (\ @ f5 :: Type -> Type
                        @ r
                        (path :: Data.Aeson.Types.Internal.JSONPath)
                        (kf :: Data.Aeson.Types.Internal.Failure f5 r)[OneShot]
                        (ks :: Data.Aeson.Types.Internal.Success
                                 (GHC.Generics.Par1 a1) f5 r)[OneShot] ->
                      m1 `cast` (Data.Aeson.Types.Internal.N:Parser[0] <a1>_R)
                        @ f5
                        @ r
                        path
                        kf
                        (\ (a2 :: a1) ->
                         ks a2 `cast` (Sym (GHC.Generics.N:Par1[0] <a1>_R))))
                       `cast`
                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                               <GHC.Generics.Par1 a1>_R)) }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Generics.Par1 a1>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: GHC.Generics.Par1 a1) ->
                     ks
                       a2
                         `cast`
                       (Sym (GHC.Generics.N:M1[0]
                                 <Type>_N
                                 <GHC.Generics.S>_P
                                 <'GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy>_P
                                 <GHC.Generics.Par1>_R) <a1>_N)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              GHC.Generics.Par1
                              a1>_R))) -}
88c30c152b2afcfbf9e4b0964f909b13
  $w$dFromProduct1 ::
    Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
            a1)
  {- Arity: 2, Strictness: <L,1*U(U,A,U)><L,1*U(U)>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Array)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser [GHC.Types.Char]
                   = case w of wild { Data.Vector.Vector dt dt1 dt2 ->
                     case w1 of wild1 { GHC.Types.I# y ->
                     case GHC.Prim.indexArray#
                            @ Data.Aeson.Types.Internal.Value
                            dt2
                            (GHC.Prim.+# dt y) of ds2 { Unit# ipv ->
                     case ipv of wild2 {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.CString.unpackAppendCString#
                                   HGit.Core.Types.$fFromJSON1Blob6
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild2 of wild3 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       GHC.Base.String f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Base.String>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> case txt of wild3 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                          let {
                            a2 :: GHC.Base.String
                            = let {
                                end :: GHC.Prim.Int# = GHC.Prim.+# dt5 dt6
                              } in
                              letrec {
                                $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                                = \ (ww :: GHC.Prim.Int#) ->
                                  case GHC.Prim.>=# ww end of lwild {
                                    DEFAULT
                                    -> case GHC.Prim.indexWord16Array# dt4 ww of r# { DEFAULT ->
                                       case GHC.Prim.geWord# r# 55296## of lwild1 {
                                         DEFAULT
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         1#
                                         -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                              DEFAULT
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                   ($wunfold (GHC.Prim.+# ww 1#))
                                              1#
                                              -> case GHC.Prim.indexWord16Array#
                                                        dt4
                                                        (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr#
                                                         (GHC.Prim.+#
                                                            9216#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.uncheckedIShiftL#
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#)
                                                                     55296#)
                                                                  10#)
                                                               (GHC.Prim.word2Int# r#1)))))
                                                   ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                    1# -> GHC.Types.[] @ GHC.Types.Char }
                              } in
                              $wunfold dt5
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      GHC.Base.String f4 r)[OneShot] ->
                           ks a2)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <GHC.Base.String>_R)) } } } } }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Char]>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: [GHC.Types.Char]) ->
                     ks
                       a2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <Type>_N
                                 <GHC.Generics.R>_P
                                 <[GHC.Types.Char]>_R
                                 <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                    <Type>_N
                                                    <GHC.Generics.S>_P
                                                    <'GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String>_R) <a1>_N)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                              a1>_R))) -}
a8608b8a9a4d7de8db5f84a1b995cd48
  $w$dFromProduct2 ::
    Data.Aeson.Types.FromJSON.FromArgs Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec1 GHC.Base.NonEmpty)
            a1)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U,A,U)><L,1*U(U)>,
     Inline: [2] -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dFromProduct3 ::
    Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
            a1)
  {- Arity: 2, Strictness: <L,1*U(U,A,U)><L,1*U(U)>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Array)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Merkle.Types.IPFS.RawIPFSHash
                   = case w of wild { Data.Vector.Vector dt dt1 dt2 ->
                     case w1 of wild1 { GHC.Types.I# y ->
                     case GHC.Prim.indexArray#
                            @ Data.Aeson.Types.Internal.Value
                            dt2
                            (GHC.Prim.+# dt y) of ds2 { Unit# ipv ->
                     case ipv of wild2 {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Merkle.Types.IPFS.$fFromJSONRawIPFSHash2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild2 of wild3 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: Type -> Type
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           ks txt `cast` (Sym (Merkle.Types.IPFS.N:RawIPFSHash[0])))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R)) } } } }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <Merkle.Types.IPFS.RawIPFSHash>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: Merkle.Types.IPFS.RawIPFSHash) ->
                     ks
                       a2
                         `cast`
                       (Sym (Data.Functor.Const.N:Const[0]
                                 <Type -> Type>_N
                                 <Merkle.Types.IPFS.RawIPFSHash>_R
                                 <HGit.Core.Types.Dir
                                    (HGit.Core.Types.Hash
                                       HGit.Core.Types.Blob)>_P) ; (Sym (GHC.Generics.N:K1[0]
                                                                             <Type>_N
                                                                             <GHC.Generics.R>_P
                                                                             <Data.Functor.Const.Const
                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                HGit.Core.Types.HashableDir>_R
                                                                             <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                                                <Type>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Maybe.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Data.Functor.Const.Const
                                                                                                      Merkle.Types.IPFS.RawIPFSHash
                                                                                                      HGit.Core.Types.HashableDir)>_R) <a1>_N))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Data.Functor.Const.Const
                                    Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                              a1>_R))) -}
c4aa1b820c4a49f8917fe26eec4ccef3
  $w$dFromProduct4 ::
    Data.Aeson.Types.Internal.Array
    -> GHC.Types.Int
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
            a1)
  {- Arity: 2, Strictness: <L,1*U(U,A,U)><L,1*U(U)>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Array)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser [GHC.Types.Char]
                   = case w of wild { Data.Vector.Vector dt dt1 dt2 ->
                     case w1 of wild1 { GHC.Types.I# y ->
                     case GHC.Prim.indexArray#
                            @ Data.Aeson.Types.Internal.Value
                            dt2
                            (GHC.Prim.+# dt y) of ds2 { Unit# ipv ->
                     case ipv of wild2 {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.CString.unpackAppendCString#
                                   HGit.Core.Types.$fFromJSON1Blob6
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild2 of wild3 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       GHC.Base.String f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Base.String>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> case txt of wild3 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                          let {
                            a2 :: GHC.Base.String
                            = let {
                                end :: GHC.Prim.Int# = GHC.Prim.+# dt5 dt6
                              } in
                              letrec {
                                $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                                = \ (ww :: GHC.Prim.Int#) ->
                                  case GHC.Prim.>=# ww end of lwild {
                                    DEFAULT
                                    -> case GHC.Prim.indexWord16Array# dt4 ww of r# { DEFAULT ->
                                       case GHC.Prim.geWord# r# 55296## of lwild1 {
                                         DEFAULT
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         1#
                                         -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                              DEFAULT
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                   ($wunfold (GHC.Prim.+# ww 1#))
                                              1#
                                              -> case GHC.Prim.indexWord16Array#
                                                        dt4
                                                        (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Types.C#
                                                      (GHC.Prim.chr#
                                                         (GHC.Prim.+#
                                                            9216#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.uncheckedIShiftL#
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#)
                                                                     55296#)
                                                                  10#)
                                                               (GHC.Prim.word2Int# r#1)))))
                                                   ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                    1# -> GHC.Types.[] @ GHC.Types.Char }
                              } in
                              $wunfold dt5
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      GHC.Base.String f4 r)[OneShot] ->
                           ks a2)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <GHC.Base.String>_R)) } } } } }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Char]>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: [GHC.Types.Char]) ->
                     ks
                       a2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <Type>_N
                                 <GHC.Generics.R>_P
                                 <[GHC.Types.Char]>_R
                                 <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                    <Type>_N
                                                    <GHC.Generics.S>_P
                                                    <'GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String>_R) <a1>_N)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                              a1>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dFromUntaggedValue ::
    Data.Aeson.Types.FromJSON.FromArgs Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:+:)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Data.Functor.Const.Const
                        Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  GHC.Generics.Par1))
            a1)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.FromJSON.FromArgs
                           Data.Aeson.Types.Generic.One a1)
                   (w1 :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Merkle.Types.IPFS.RawIPFSHash
                   = case w1 of wild {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Merkle.Types.IPFS.$fFromJSONRawIPFSHash2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: Type -> Type
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           ks txt `cast` (Sym (Merkle.Types.IPFS.N:RawIPFSHash[0])))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R)) }
                 } in
                 let {
                   m1 :: Data.Aeson.Types.Internal.Parser (GHC.Generics.Par1 a1)
                   = case w of wild { Data.Aeson.Types.FromJSON.From1Args co pj ds ->
                     let {
                       m2 :: Data.Aeson.Types.Internal.Parser a1 = pj w1
                     } in
                     (\ @ f5 :: Type -> Type
                        @ r
                        (path :: Data.Aeson.Types.Internal.JSONPath)
                        (kf :: Data.Aeson.Types.Internal.Failure f5 r)[OneShot]
                        (ks :: Data.Aeson.Types.Internal.Success
                                 (GHC.Generics.Par1 a1) f5 r)[OneShot] ->
                      m2 `cast` (Data.Aeson.Types.Internal.N:Parser[0] <a1>_R)
                        @ f5
                        @ r
                        path
                        kf
                        (\ (a2 :: a1) ->
                         ks a2 `cast` (Sym (GHC.Generics.N:Par1[0] <a1>_R))))
                       `cast`
                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                               <GHC.Generics.Par1 a1>_R)) }
                 } in
                 (\ @ f4 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
                                a1)
                             f4
                             r) ->
                  let {
                    lvl207 :: f4 r
                    = m1
                        `cast`
                      (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Generics.Par1 a1>_R)
                        @ f4
                        @ r
                        path
                        kf
                        (\ (a2 :: GHC.Generics.Par1 a1) ->
                         ks
                           (GHC.Generics.R1
                              @ Type
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Data.Functor.Const.Const
                                            Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      GHC.Generics.Par1))
                              @ a1
                              a2
                                `cast`
                              ((Sym (GHC.Generics.N:M1[0]
                                         <Type>_N
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.Par1>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                           <Type>_N
                                                                           <GHC.Generics.C>_P
                                                                           <'GHC.Generics.MetaCons
                                                                              "DirEntity"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False>_P
                                                                           <GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 'GHC.Maybe.Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              GHC.Generics.Par1>_R)) <a1>_N)))
                  } in
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <Merkle.Types.IPFS.RawIPFSHash>_R)
                    @ f4
                    @ r
                    path
                    (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                       (ds1 :: GHC.Base.String) ->
                     lvl207)
                    (\ (a2 :: Merkle.Types.IPFS.RawIPFSHash) ->
                     ks
                       (GHC.Generics.L1
                          @ Type
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.Rec0
                                     (Data.Functor.Const.Const
                                        Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                          @ (GHC.Generics.M1
                               GHC.Generics.C
                               ('GHC.Generics.MetaCons
                                  "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               (GHC.Generics.S1
                                  ('GHC.Generics.MetaSel
                                     'GHC.Maybe.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  GHC.Generics.Par1))
                          @ a1
                          a2
                            `cast`
                          (Sym (Data.Functor.Const.N:Const[0]
                                    <Type -> Type>_N
                                    <Merkle.Types.IPFS.RawIPFSHash>_R
                                    <HGit.Core.Types.Blob>_P) ; (Sym (GHC.Generics.N:K1[0]
                                                                          <Type>_N
                                                                          <GHC.Generics.R>_P
                                                                          <Data.Functor.Const.Const
                                                                             Merkle.Types.IPFS.RawIPFSHash
                                                                             HGit.Core.Types.Blob>_R
                                                                          <a1>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                              <Type>_N
                                                                                              <GHC.Generics.S>_P
                                                                                              <'GHC.Generics.MetaSel
                                                                                                 'GHC.Maybe.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                                              <GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 (Data.Functor.Const.Const
                                                                                                    Merkle.Types.IPFS.RawIPFSHash
                                                                                                    HGit.Core.Types.Blob)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                                         <Type>_N
                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                            "FileEntity"
                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                            'GHC.Types.False>_P
                                                                                                                                         <GHC.Generics.M1
                                                                                                                                            GHC.Generics.S
                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                               'GHC.Maybe.Nothing
                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                            (GHC.Generics.Rec0
                                                                                                                                               (Data.Functor.Const.Const
                                                                                                                                                  Merkle.Types.IPFS.RawIPFSHash
                                                                                                                                                  HGit.Core.Types.Blob))>_R)) <a1>_N)))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <(GHC.Generics.:+:)
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Data.Functor.Const.Const
                                          Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))))
                              (GHC.Generics.M1
                                 GHC.Generics.C
                                 ('GHC.Generics.MetaCons
                                    "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Maybe.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    GHC.Generics.Par1))
                              a1>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dGFromJSON ::
    Data.Aeson.Types.FromJSON.FromArgs Data.Aeson.Types.Generic.One a
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         ((GHC.Generics.:.:)
            []
            ((,) HGit.Core.Types.PartialFilePath
             GHC.Generics.:.: GHC.Generics.Rec1
                                (HGit.Core.Types.FileTreeEntity
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob)))
            a)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2] -}
c3699671e91d6ef052d5ad4fb7de571b
  $w$dGFromJSON1 ::
    Data.Aeson.Types.FromJSON.FromArgs Data.Aeson.Types.Generic.One a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1
            a1)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,U>, Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.FromJSON.FromArgs
                           Data.Aeson.Types.Generic.One a1)
                   (w1 :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser (GHC.Generics.Par1 a1)
                   = case w of wild { Data.Aeson.Types.FromJSON.From1Args co pj ds ->
                     let {
                       m1 :: Data.Aeson.Types.Internal.Parser a1 = pj w1
                     } in
                     (\ @ f5 :: Type -> Type
                        @ r
                        (path :: Data.Aeson.Types.Internal.JSONPath)
                        (kf :: Data.Aeson.Types.Internal.Failure f5 r)[OneShot]
                        (ks :: Data.Aeson.Types.Internal.Success
                                 (GHC.Generics.Par1 a1) f5 r)[OneShot] ->
                      m1 `cast` (Data.Aeson.Types.Internal.N:Parser[0] <a1>_R)
                        @ f5
                        @ r
                        path
                        kf
                        (\ (a2 :: a1) ->
                         ks a2 `cast` (Sym (GHC.Generics.N:Par1[0] <a1>_R))))
                       `cast`
                     (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                               <GHC.Generics.Par1 a1>_R)) }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                GHC.Generics.Par1
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Generics.Par1 a1>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: GHC.Generics.Par1 a1) ->
                     ks
                       a2
                         `cast`
                       (Sym (GHC.Generics.N:M1[0]
                                 <Type>_N
                                 <GHC.Generics.S>_P
                                 <'GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy>_P
                                 <GHC.Generics.Par1>_R) <a1>_N)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              GHC.Generics.Par1
                              a1>_R))) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dGFromJSON2 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
            a1)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ @ a1 (w :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Merkle.Types.IPFS.RawIPFSHash
                   = case w of wild {
                       DEFAULT
                       -> let {
                            msg20 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Merkle.Types.IPFS.$fFromJSONRawIPFSHash2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: Type -> Type
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg20)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: Type -> Type
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Merkle.Types.IPFS.RawIPFSHash f4 r)[OneShot] ->
                           ks txt `cast` (Sym (Merkle.Types.IPFS.N:RawIPFSHash[0])))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Merkle.Types.IPFS.RawIPFSHash>_R)) }
                 } in
                 (\ @ f5 :: Type -> Type
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   (Data.Functor.Const.Const
                                      Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
                                a1)
                             f5
                             r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <Merkle.Types.IPFS.RawIPFSHash>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a2 :: Merkle.Types.IPFS.RawIPFSHash) ->
                     ks
                       a2
                         `cast`
                       (Sym (Data.Functor.Const.N:Const[0]
                                 <Type -> Type>_N
                                 <Merkle.Types.IPFS.RawIPFSHash>_R
                                 <HGit.Core.Types.Blob>_P) ; (Sym (GHC.Generics.N:K1[0]
                                                                       <Type>_N
                                                                       <GHC.Generics.R>_P
                                                                       <Data.Functor.Const.Const
                                                                          Merkle.Types.IPFS.RawIPFSHash
                                                                          HGit.Core.Types.Blob>_R
                                                                       <a1>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                                          <Type>_N
                                                                                          <GHC.Generics.S>_P
                                                                                          <'GHC.Generics.MetaSel
                                                                                             'GHC.Maybe.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy>_P
                                                                                          <GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             (Data.Functor.Const.Const
                                                                                                Merkle.Types.IPFS.RawIPFSHash
                                                                                                HGit.Core.Types.Blob)>_R) <a1>_N))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Data.Functor.Const.Const
                                    Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.Blob))
                              a1>_R))) -}
d545232423a370507aef9b48f048db5a
  $w$dTaggedObject' ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.ToJSON.ToArgs
         (Data.Aeson.Encoding.Internal.Encoding'
            Data.Aeson.Types.Internal.Value)
         Data.Aeson.Types.Generic.One
         a1
    -> GHC.Base.String
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1)
         a1
    -> (# Data.Aeson.Encoding.Internal.Encoding'
            Data.Aeson.Encoding.Internal.Series #)
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,1*U,A,A,A)><L,1*U><L,U><L,1*U(U,U)>,
     Inline: [2] -}
28eb97143174685d2a8c2b155baec8f5
  $w$dTaggedObject'1 ::
    Data.Aeson.Types.ToJSON.ToArgs
      Data.Aeson.Types.Internal.Value Data.Aeson.Types.Generic.One a1
    -> GHC.Base.String
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            GHC.Generics.Par1)
         a1
    -> [Data.Aeson.Types.Internal.Pair]
    -> (# Data.Aeson.Types.Internal.Pair,
          [Data.Aeson.Types.Internal.Pair] #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,1*U(1*U,U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.ToJSON.ToArgs
                           Data.Aeson.Types.Internal.Value Data.Aeson.Types.Generic.One a1)
                   (w1 :: GHC.Base.String)
                   (w2 :: (GHC.Generics.:*:)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 GHC.Base.String))
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               GHC.Generics.Par1)
                            a1)
                   (w3 :: [Data.Aeson.Types.Internal.Pair]) ->
                 (# (case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv1 ipv2 ->
                             Data.Aeson.Types.ToJSON.$wouter1
                               ipv2
                               4#
                               w1
                               0#
                               ipv1 }) of ds1 { (#,#) ipv1 ipv2 ->
                     ipv2 },
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ Data.Aeson.Types.Internal.Value
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    2#
                                    (Data.Vector.Mutable.uninitialised
                                       @ Data.Aeson.Types.Internal.Value)
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 (Nth:0
                                                      (Nth:2
                                                           (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                            ->_R ((#,#)
                                                                    <'GHC.Types.TupleRep '[]>_R
                                                                    <'GHC.Types.LiftedRep>_R
                                                                    <GHC.Prim.State#
                                                                       GHC.Prim.RealWorld>_R
                                                                    (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <GHC.Prim.RealWorld>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R of ds1 { (#,#) ipv1 ipv2 ->
                             case w2 of wild1 { GHC.Generics.:*: a3 b1 ->
                             case GHC.Prim.writeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    0#
                                    (case GHC.Magic.runRW#
                                            @ ('GHC.Types.TupleRep
                                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Text.Internal.Text #)
                                            (\ (s2 :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                             case GHC.Prim.newByteArray#
                                                    @ GHC.Prim.RealWorld
                                                    10#
                                                    s2 of ds2 { (#,#) ipv ipv4 ->
                                             HGit.Core.Types.$wouter
                                               ipv4
                                               4#
                                               a3
                                                 `cast`
                                               (GHC.Generics.N:M1[0]
                                                    <Type>_N
                                                    <GHC.Generics.S>_P
                                                    <'GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R
                                                       GHC.Base.String>_R <a1>_N ; GHC.Generics.N:K1[0]
                                                                                       <Type>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <[GHC.Types.Char]>_R
                                                                                       <a1>_P)
                                               0#
                                               ipv }) of ds2 { (#,#) ipv ipv4 ->
                                     case ipv4 of dt { Data.Text.Internal.Text ipv5 ipv6 ipv7 ->
                                     Data.Aeson.Types.Internal.String dt } })
                                    ipv1 of s'# { DEFAULT ->
                             case GHC.Prim.writeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    1#
                                    (case w of wild { Data.Aeson.Types.ToJSON.To1Args co tj ds2 ->
                                     tj
                                       b1
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <Type>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.Par1>_R <a1>_N ; GHC.Generics.N:Par1[0]
                                                                               <a1>_R) })
                                    s'# of s'#1 { DEFAULT ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    s'#1 of ds2 { (#,#) ipv ipv4 ->
                             (# ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector
                                  @ Data.Aeson.Types.Internal.Value
                                  0#
                                  2#
                                  ipv4 #) } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                     case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                     Data.Aeson.Types.Internal.Array dt } }),
                    w3 #)) -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dTaggedObject'2 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.ToJSON.ToArgs
         (Data.Aeson.Encoding.Internal.Encoding'
            Data.Aeson.Types.Internal.Value)
         Data.Aeson.Types.Generic.One
         a1
    -> GHC.Base.String
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
          GHC.Generics.:*: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec1 GHC.Base.NonEmpty))
         a1
    -> (# Data.Aeson.Encoding.Internal.Encoding'
            Data.Aeson.Encoding.Internal.Series #)
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,1*U,A,A,A)><L,1*U><L,U><L,1*U(U,1*U(1*U(U,U,U),U(1*U,1*U)))>,
     Inline: [2] -}
79b4acfbf4f257d245e53c15fd3ca8fb
  $w$dTaggedObject'3 ::
    Data.Aeson.Types.ToJSON.ToArgs
      Data.Aeson.Types.Internal.Value Data.Aeson.Types.Generic.One a1
    -> GHC.Base.String
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               'GHC.Maybe.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0
               (Data.Functor.Const.Const
                  Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
          GHC.Generics.:*: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                'GHC.Maybe.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec1 GHC.Base.NonEmpty))
         a1
    -> [Data.Aeson.Types.Internal.Pair]
    -> (# Data.Aeson.Types.Internal.Pair,
          [Data.Aeson.Types.Internal.Pair] #)
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U><L,1*U(1*U,1*U(U,U(1*U,1*U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.ToJSON.ToArgs
                           Data.Aeson.Types.Internal.Value Data.Aeson.Types.Generic.One a1)
                   (w1 :: GHC.Base.String)
                   (w2 :: (GHC.Generics.:*:)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 GHC.Base.String))
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0
                                  (Data.Functor.Const.Const
                                     Merkle.Types.IPFS.RawIPFSHash HGit.Core.Types.HashableDir))
                             GHC.Generics.:*: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec1 GHC.Base.NonEmpty))
                            a1)
                   (w3 :: [Data.Aeson.Types.Internal.Pair]) ->
                 (# (case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv1 ipv2 ->
                             Data.Aeson.Types.ToJSON.$wouter1
                               ipv2
                               4#
                               w1
                               0#
                               ipv1 }) of ds1 { (#,#) ipv1 ipv2 ->
                     ipv2 },
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ Data.Aeson.Types.Internal.Value
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    3#
                                    (Data.Vector.Mutable.uninitialised
                                       @ Data.Aeson.Types.Internal.Value)
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 (Nth:0
                                                      (Nth:2
                                                           (<GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                            ->_R ((#,#)
                                                                    <'GHC.Types.TupleRep '[]>_R
                                                                    <'GHC.Types.LiftedRep>_R
                                                                    <GHC.Prim.State#
                                                                       GHC.Prim.RealWorld>_R
                                                                    (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <GHC.Prim.RealWorld>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R of ds1 { (#,#) ipv1 ipv2 ->
                             case w2 of wild1 { GHC.Generics.:*: a3 b1 ->
                             case GHC.Prim.writeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    0#
                                    (case GHC.Magic.runRW#
                                            @ ('GHC.Types.TupleRep
                                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Text.Internal.Text #)
                                            (\ (s2 :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                             case GHC.Prim.newByteArray#
                                                    @ GHC.Prim.RealWorld
                                                    10#
                                                    s2 of ds2 { (#,#) ipv ipv4 ->
                                             HGit.Core.Types.$wouter1
                                               ipv4
                                               4#
                                               a3
                                                 `cast`
                                               (GHC.Generics.N:M1[0]
                                                    <Type>_N
                                                    <GHC.Generics.S>_P
                                                    <'GHC.Generics.MetaSel
                                                       'GHC.Maybe.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy>_P
                                                    <GHC.Generics.K1
                                                       GHC.Generics.R
                                                       GHC.Base.String>_R <a1>_N ; GHC.Generics.N:K1[0]
                                                                                       <Type>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <[GHC.Types.Char]>_R
                                                                                       <a1>_P)
                                               0#
                                               ipv }) of ds2 { (#,#) ipv ipv4 ->
                                     case ipv4 of dt { Data.Text.Internal.Text ipv5 ipv6 ipv7 ->
                                     Data.Aeson.Types.Internal.String dt } })
                                    ipv1 of s'# { DEFAULT ->
                             case b1 of wild { GHC.Generics.:*: a2 b2 ->
                             case GHC.Prim.writeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    1#
                                    (Data.Aeson.Types.Internal.$WString
                                       a2
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <Type>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Maybe.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               (Data.Functor.Const.Const
                                                  Merkle.Types.IPFS.RawIPFSHash
                                                  HGit.Core.Types.HashableDir)>_R <a1>_N ; (GHC.Generics.N:K1[0]
                                                                                                <Type>_N
                                                                                                <GHC.Generics.R>_P
                                                                                                <Data.Functor.Const.Const
                                                                                                   Merkle.Types.IPFS.RawIPFSHash
                                                                                                   HGit.Core.Types.HashableDir>_R
                                                                                                <a1>_P ; (Data.Functor.Const.N:Const[0]
                                                                                                              <Type
                                                                                                               -> Type>_N
                                                                                                              <Merkle.Types.IPFS.RawIPFSHash>_R
                                                                                                              <HGit.Core.Types.Dir
                                                                                                                 (HGit.Core.Types.Hash
                                                                                                                    HGit.Core.Types.Blob)>_P ; Merkle.Types.IPFS.N:RawIPFSHash[0]))))
                                    s'# of s'#1 { DEFAULT ->
                             case GHC.Prim.writeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    2#
                                    (case w of wild2 { Data.Aeson.Types.ToJSON.To1Args co tj tjl ->
                                     case GHC.Magic.runRW#
                                            @ ('GHC.Types.TupleRep
                                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                 Data.Vector.Vector
                                                   Data.Aeson.Types.Internal.Value #)
                                            (\ (s2 :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                             case GHC.Prim.newArray#
                                                    @ Data.Aeson.Types.Internal.Value
                                                    @ (Control.Monad.Primitive.PrimState
                                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                                    0#
                                                    (Data.Vector.Mutable.uninitialised
                                                       @ Data.Aeson.Types.Internal.Value)
                                                    s2
                                                      `cast`
                                                    (GHC.Prim.State#
                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 (Nth:0
                                                                      (Nth:2
                                                                           (<GHC.Prim.State#
                                                                               GHC.Prim.RealWorld>_R
                                                                            ->_R ((#,#)
                                                                                    <'GHC.Types.TupleRep
                                                                                       '[]>_R
                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                    <GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld>_R
                                                                                    (Data.Vector.Generic.Base.Mutable
                                                                                       <Data.Vector.Vector>_N
                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                            <GHC.Prim.RealWorld>_N)
                                                                                       <Data.Aeson.Types.Internal.Value>_N)_R)_R))))))_R of ds2 { (#,#) ipv ipv4 ->
                                             HGit.Core.Types.$wfoldlM_loop
                                               GHC.Types.SPEC
                                               0#
                                               0#
                                               ipv4
                                                 `cast`
                                               (GHC.Prim.MutableArray#
                                                  (Nth:0
                                                       (Nth:3
                                                            (Nth:3
                                                                 (<GHC.Prim.State#
                                                                     GHC.Prim.RealWorld>_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          <GHC.Prim.State#
                                                                             GHC.Prim.RealWorld>_R
                                                                          (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                             <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N))
                                                  (Nth:1
                                                       (Nth:3
                                                            (Nth:3
                                                                 (<GHC.Prim.State#
                                                                     GHC.Prim.RealWorld>_R
                                                                  ->_R ((#,#)
                                                                          <'GHC.Types.TupleRep
                                                                             '[]>_R
                                                                          <'GHC.Types.LiftedRep>_R
                                                                          <GHC.Prim.State#
                                                                             GHC.Prim.RealWorld>_R
                                                                          (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R)) ; Sub (Data.Vector.D:R:MutableVector[0]) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                                             <GHC.Prim.RealWorld>_N) <Data.Aeson.Types.Internal.Value>_N)))_R
                                               0#
                                               (GHC.Base.map
                                                  @ a1
                                                  @ Data.Aeson.Types.Internal.Value
                                                  tj
                                                  (GHC.Types.:
                                                     @ a1
                                                     (case b2
                                                             `cast`
                                                           ((GHC.Generics.N:M1[0]
                                                                 <Type>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.Rec1
                                                                    GHC.Base.NonEmpty>_R ; GHC.Generics.N:Rec1[0]
                                                                                               <Type>_N
                                                                                               <GHC.Base.NonEmpty>_R) <a1>_N) of wild3 { GHC.Base.:| a4 as ->
                                                      a4 })
                                                     (case b2
                                                             `cast`
                                                           ((GHC.Generics.N:M1[0]
                                                                 <Type>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.Rec1
                                                                    GHC.Base.NonEmpty>_R ; GHC.Generics.N:Rec1[0]
                                                                                               <Type>_N
                                                                                               <GHC.Base.NonEmpty>_R) <a1>_N) of wild3 { GHC.Base.:| a4 as ->
                                                      as })))
                                               ipv
                                                 `cast`
                                               (GHC.Prim.State#
                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                       (Nth:0
                                                            (Nth:2
                                                                 (Nth:3
                                                                      (<GHC.Prim.State#
                                                                          GHC.Prim.RealWorld>_R
                                                                       ->_R ((#,#)
                                                                               <'GHC.Types.TupleRep
                                                                                  '[]>_R
                                                                               <'GHC.Types.LiftedRep>_R
                                                                               <GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld>_R
                                                                               (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                (GHC.ST.ST
                                                                                                                                   GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N))_R))))))_R }) of ds2 { (#,#) ipv4 ipv5 ->
                                     case ipv5 of dt { Data.Vector.Vector ipv ipv6 ipv7 ->
                                     Data.Aeson.Types.Internal.Array dt } } })
                                    s'#1 of s'#2 { DEFAULT ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    ipv2
                                    s'#2 of ds2 { (#,#) ipv ipv4 ->
                             (# ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector
                                  @ Data.Aeson.Types.Internal.Value
                                  0#
                                  3#
                                  ipv4 #) } } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                     case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                     Data.Aeson.Types.Internal.Array dt } }),
                    w3 #)) -}
8ff91eab6befc2f106d1a97746b316e3
  $wfoldlM_loop ::
    GHC.Types.SPEC
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 7, Strictness: <S,1*U><L,U><L,U><S,U><L,U><S,1*U><S,U>,
     Inline: [2] -}
ddaaae3a580429ed7dd42a16ff0b0433
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [2] -}
406768ec1aec8ce8f081258565cfe853
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [2] -}
30230d5db3ba27f21ca983dd03b50667
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [2] -}
d04f5b62b7f5cf43b81efb9f00f08cb5
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a
    -> [(HGit.Core.Types.PartialFilePath, a)]
    -> Data.Map.Internal.Map HGit.Core.Types.PartialFilePath a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [2] -}
79b4acfbf4f257d245e53c15fd3ca8fb
  data Blob a = Chunk GHC.Base.String a | Empty
74f315066df23533fba509b10e10aeb5
  type BranchName = GHC.Base.String
34aca104485ce79d597049c5ea286be1
  data Commit a b
    = NullCommit | Commit GHC.Base.String a (GHC.Base.NonEmpty b)
be949d31743b64a1284fae8a90c050de
  type CommitMessage = GHC.Base.String
be80b6a731843e8b4df725ad76728847
  data Dir a b
    = Dir {dirEntries :: [HGit.Core.Types.NamedFileTreeEntity a b]}
ae33a7ec835849f6fc910a468589c69e
  data FileTreeEntity a b = FileEntity a | DirEntity b
167140e84d63fc305515055512e74bd0
  type GetCapability (m :: Type -> Type) (f :: Type -> Type) =
    Merkle.Store.GetCapability m Merkle.Types.IPFS.RawIPFSHash f
7711f6c447322981e9d68a3756235f41
  type Hash =
    Merkle.Types.Hash Merkle.Types.IPFS.RawIPFSHash :: k -> Type
c00231f2970294f71f68518ccb0e249d
  type HashAnnotated (f :: k) =
    Merkle.Functors.HashAnnotated Merkle.Types.IPFS.RawIPFSHash f
    :: Type -> Type
79b4acfbf4f257d245e53c15fd3ca8fb
  type HashableCommit =
    HGit.Core.Types.Commit
      (HGit.Core.Types.Hash HGit.Core.Types.HashableDir)
    :: Type -> Type
79b4acfbf4f257d245e53c15fd3ca8fb
  type HashableDir =
    HGit.Core.Types.Dir (HGit.Core.Types.Hash HGit.Core.Types.Blob)
    :: Type -> Type
2eae4a9c8cff88e7992df1544c72d667
  type LazyMerkle (f :: Type -> k) (m :: k -> Type) =
    Data.Functor.Foldable.Fix
      (Data.Functor.Compose.Compose
         (HGit.Core.Types.HashAnnotated f)
         (Data.Functor.Compose.Compose m f))
4e8974f2593cf87a0bec6bcfaa775b0c
  type LazyMerkleDir (m :: Type -> Type) x =
    Data.Functor.Foldable.Fix
      (Data.Functor.Compose.Compose
         (HGit.Core.Types.HashAnnotated (HGit.Core.Types.Dir x))
         (Data.Functor.Compose.Compose m (HGit.Core.Types.Dir x)))
199ec3c5c47f7e9db69bdcc062537865
  type NamedFileTreeEntity a b =
    (HGit.Core.Types.PartialFilePath,
     HGit.Core.Types.FileTreeEntity a b)
6644ba3cdf878cce4766b194f8a2c20b
  type PartialFilePath = GHC.Base.String
867febbbf3b123141a0ddd340c9dc110
  type PutCapability (m :: Type -> Type) (f :: Type -> Type) =
    Merkle.Store.PutCapability m Merkle.Types.IPFS.RawIPFSHash f
79b4acfbf4f257d245e53c15fd3ca8fb
  axiom HGit.Core.Types.Rep1_Blob::
      GHC.Generics.Rep1 HGit.Core.Types.Blob
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Blob"
               "HGit.Core.Types"
               "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Chunk" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1)
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Empty" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
34aca104485ce79d597049c5ea286be1
  axiom HGit.Core.Types.Rep1_Commit::
      GHC.Generics.Rep1 (HGit.Core.Types.Commit a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Commit"
               "HGit.Core.Types"
               "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "NullCommit" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Commit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Base.String)
                                 GHC.Generics.:*: (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 a)
                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec1
                                                                         GHC.Base.NonEmpty))))
be80b6a731843e8b4df725ad76728847
  axiom HGit.Core.Types.Rep1_Dir::
      GHC.Generics.Rep1 (HGit.Core.Types.Dir a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Dir"
               "HGit.Core.Types"
               "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Dir" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Maybe.Just "dirEntries")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  ([]
                   GHC.Generics.:.: ((,) HGit.Core.Types.PartialFilePath
                                     GHC.Generics.:.: GHC.Generics.Rec1
                                                        (HGit.Core.Types.FileTreeEntity a)))))
ae33a7ec835849f6fc910a468589c69e
  axiom HGit.Core.Types.Rep1_FileTreeEntity::
      GHC.Generics.Rep1 (HGit.Core.Types.FileTreeEntity a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "FileTreeEntity"
               "HGit.Core.Types"
               "hgit-0.1.0.0-Byck4folewAHwC9vUGKEOl"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "FileEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 a))
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "DirEntity" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   GHC.Generics.Par1))
1d74a59221a06b384fc3c6958b41dc89
  type ShallowStore (m :: Type -> Type) (f :: Type -> Type) =
    Merkle.Store.ShallowStore m Merkle.Types.IPFS.RawIPFSHash f
a8c4c1451a8dfd311544f9edf49193ca
  type Store (m :: Type -> Type) (f :: Type -> Type) =
    Merkle.Store.Store m Merkle.Types.IPFS.RawIPFSHash f
0f1f31e7ad765374d0fec3a0c02aacbf
  canonicalOrdering ::
    [HGit.Core.Types.NamedFileTreeEntity a b]
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (x :: [(HGit.Core.Types.PartialFilePath,
                           HGit.Core.Types.FileTreeEntity a b)]) ->
                 Data.Map.Internal.$fDataMap_go
                   @ [GHC.Types.Char]
                   @ (HGit.Core.Types.FileTreeEntity a b)
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], HGit.Core.Types.FileTreeEntity a b))
                   (HGit.Core.Types.$sfromList
                      @ (HGit.Core.Types.FileTreeEntity a b)
                      x)) -}
be80b6a731843e8b4df725ad76728847
  dirEntries ::
    HGit.Core.Types.Dir a b
    -> [HGit.Core.Types.NamedFileTreeEntity a b]
  RecSel Left HGit.Core.Types.Dir
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (ds :: HGit.Core.Types.Dir a b) ->
                 case ds of wild { HGit.Core.Types.Dir ds1 -> ds1 }) -}
8953b3100c8b786cdad7302cf955a230
  unGetCapability ::
    HGit.Core.Types.GetCapability m f
    -> HGit.Core.Types.Hash f
    -> m (GHC.Maybe.Maybe
            (Merkle.Store.DerefRes Merkle.Types.IPFS.RawIPFSHash f))
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: Type -> Type
                   @ f :: Type -> Type
                   (ds :: Merkle.Store.GetCapability
                            m Merkle.Types.IPFS.RawIPFSHash f) ->
                 case ds of wild { Merkle.Store.GetCapability g -> g }) -}
3fff163b4111d41872337144909b418b
  unPutCapability ::
    HGit.Core.Types.PutCapability m f
    -> f (HGit.Core.Types.Hash f) -> m (HGit.Core.Types.Hash f)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: Type -> Type
                   @ f :: Type -> Type
                   (ds :: Merkle.Store.PutCapability
                            m Merkle.Types.IPFS.RawIPFSHash f) ->
                 case ds of wild { Merkle.Store.PutCapability p -> p }) -}
instance Data.Bifoldable.Bifoldable [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fBifoldableCommit
instance Data.Bifoldable.Bifoldable [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fBifoldableDir
instance Data.Bifoldable.Bifoldable [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fBifoldableFileTreeEntity
instance Data.Bifunctor.Bifunctor [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fBifunctorCommit
instance Data.Bifunctor.Bifunctor [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fBifunctorDir
instance Data.Bifunctor.Bifunctor [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fBifunctorFileTreeEntity
instance Data.Bitraversable.Bitraversable [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fBitraversableCommit
instance Data.Bitraversable.Bitraversable [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fBitraversableDir
instance Data.Bitraversable.Bitraversable [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fBitraversableFileTreeEntity
instance Data.Functor.Classes.Eq1 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fEq1Commit
instance Data.Functor.Classes.Eq1 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fEq1Dir
instance Data.Functor.Classes.Eq1 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fEq1FileTreeEntity
instance Data.Functor.Classes.Eq2 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fEq2Commit
instance Data.Functor.Classes.Eq2 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fEq2Dir
instance Data.Functor.Classes.Eq2 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fEq2FileTreeEntity
instance GHC.Classes.Eq [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fEqBlob
instance GHC.Classes.Eq [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fEqCommit
instance GHC.Classes.Eq [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fEqDir
instance GHC.Classes.Eq [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fEqFileTreeEntity
instance Merkle.Types.IPFS.ExtractKeys [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fExtractKeysBlob
instance Merkle.Types.IPFS.ExtractKeys [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fExtractKeysCommit
instance Merkle.Types.IPFS.ExtractKeys [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fExtractKeysDir
instance Data.Foldable.Foldable [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fFoldableBlob
instance Data.Foldable.Foldable [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fFoldableCommit
instance Data.Foldable.Foldable [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fFoldableDir
instance Data.Foldable.Foldable [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fFoldableFileTreeEntity
instance Data.Aeson.Types.FromJSON.FromJSON1 [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fFromJSON1Blob
instance Data.Aeson.Types.FromJSON.FromJSON1 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fFromJSON1Commit
instance Data.Aeson.Types.FromJSON.FromJSON1 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fFromJSON1Dir
instance Data.Aeson.Types.FromJSON.FromJSON1 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fFromJSON1FileTreeEntity
instance GHC.Base.Functor [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fFunctorBlob
instance GHC.Base.Functor [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fFunctorCommit
instance GHC.Base.Functor [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fFunctorDir
instance GHC.Base.Functor [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fFunctorFileTreeEntity
instance GHC.Generics.Generic1 [TYPE, HGit.Core.Types.Blob]
  = HGit.Core.Types.$fGeneric1Blob
instance GHC.Generics.Generic1 [TYPE, HGit.Core.Types.Commit]
  = HGit.Core.Types.$fGeneric1Commit
instance GHC.Generics.Generic1 [TYPE, HGit.Core.Types.Dir]
  = HGit.Core.Types.$fGeneric1Dir
instance GHC.Generics.Generic1 [TYPE,
                                HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fGeneric1FileTreeEntity
instance GHC.Classes.Ord [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fOrdBlob
instance GHC.Classes.Ord [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fOrdCommit
instance GHC.Classes.Ord [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fOrdDir
instance GHC.Classes.Ord [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fOrdFileTreeEntity
instance Data.Functor.Classes.Show1 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fShow1Commit
instance Data.Functor.Classes.Show1 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fShow1Dir
instance Data.Functor.Classes.Show1 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fShow1FileTreeEntity
instance Data.Functor.Classes.Show2 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fShow2Commit
instance Data.Functor.Classes.Show2 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fShow2Dir
instance Data.Functor.Classes.Show2 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fShow2FileTreeEntity
instance GHC.Show.Show [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fShowBlob
instance GHC.Show.Show [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fShowDir
instance GHC.Show.Show [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fShowFileTreeEntity
instance Data.Aeson.Types.ToJSON.ToJSON1 [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fToJSON1Blob
instance Data.Aeson.Types.ToJSON.ToJSON1 [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fToJSON1Commit
instance Data.Aeson.Types.ToJSON.ToJSON1 [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fToJSON1Dir
instance Data.Aeson.Types.ToJSON.ToJSON1 [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fToJSON1FileTreeEntity
instance Data.Traversable.Traversable [HGit.Core.Types.Blob]
  = HGit.Core.Types.$fTraversableBlob
instance Data.Traversable.Traversable [HGit.Core.Types.Commit]
  = HGit.Core.Types.$fTraversableCommit
instance Data.Traversable.Traversable [HGit.Core.Types.Dir]
  = HGit.Core.Types.$fTraversableDir
instance Data.Traversable.Traversable [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.$fTraversableFileTreeEntity
family instance GHC.Generics.Rep1 [TYPE], [HGit.Core.Types.Commit]
  = HGit.Core.Types.Rep1_Commit
family instance GHC.Generics.Rep1 [TYPE], [HGit.Core.Types.Dir]
  = HGit.Core.Types.Rep1_Dir
family instance GHC.Generics.Rep1 [TYPE],
                                  [HGit.Core.Types.FileTreeEntity]
  = HGit.Core.Types.Rep1_FileTreeEntity
family instance GHC.Generics.Rep1 [TYPE], [HGit.Core.Types.Blob]
  = HGit.Core.Types.Rep1_Blob
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "Chunk" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                        'GHC.Types.False)
                                                                                               (v1 :: GHC.Generics.SingI
                                                                                                        'GHC.Generics.PrefixI)
                                                                                               (v :: GHC.TypeLits.KnownSymbol
                                                                                                       "Chunk")
  GHC.Generics.$fConstructorMetaMetaCons @ "Chunk"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons1
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "Commit" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                         'GHC.Types.False)
                                                                                                (v1 :: GHC.Generics.SingI
                                                                                                         'GHC.Generics.PrefixI)
                                                                                                (v :: GHC.TypeLits.KnownSymbol
                                                                                                        "Commit")
  GHC.Generics.$fConstructorMetaMetaCons @ "Commit"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons1
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "DirEntity" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                            'GHC.Types.False)
                                                                                                   (v1 :: GHC.Generics.SingI
                                                                                                            'GHC.Generics.PrefixI)
                                                                                                   (v :: GHC.TypeLits.KnownSymbol
                                                                                                           "DirEntity")
  GHC.Generics.$fConstructorMetaMetaCons @ "DirEntity"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "Empty" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                        'GHC.Types.False)
                                                                                               (v1 :: GHC.Generics.SingI
                                                                                                        'GHC.Generics.PrefixI)
                                                                                               (v :: GHC.TypeLits.KnownSymbol
                                                                                                       "Empty")
  GHC.Generics.$fConstructorMetaMetaCons @ "Empty"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1Blob_$s$fConstructorMetaMetaCons
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "FileEntity" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                             'GHC.Types.False)
                                                                                                    (v1 :: GHC.Generics.SingI
                                                                                                             'GHC.Generics.PrefixI)
                                                                                                    (v :: GHC.TypeLits.KnownSymbol
                                                                                                            "FileEntity")
  GHC.Generics.$fConstructorMetaMetaCons @ "FileEntity"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1FileTreeEntity_$s$fConstructorMetaMetaCons1
"SPEC/HGit.Core.Types $fConstructorMetaMetaCons @ "NullCommit" @ 'PrefixI @ 'False" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                             'GHC.Types.False)
                                                                                                    (v1 :: GHC.Generics.SingI
                                                                                                             'GHC.Generics.PrefixI)
                                                                                                    (v :: GHC.TypeLits.KnownSymbol
                                                                                                            "NullCommit")
  GHC.Generics.$fConstructorMetaMetaCons @ "NullCommit"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.False
                                         v
                                         v1
                                         v2
  = HGit.Core.Types.$fFromJSON1Commit_$s$fConstructorMetaMetaCons
"SPEC/HGit.Core.Types $fSelectorMetaMetaSel @ ('Just
                                                "dirEntries") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                 (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                 (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                 (v :: GHC.Generics.SingI
                                                                                                                                                                                                         ('GHC.Maybe.Just
                                                                                                                                                                                                            "dirEntries"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Maybe.Just "dirEntries")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = HGit.Core.Types.$fFromJSON1Dir_$s$fSelectorMetaMetaSel
"SPEC/HGit.Core.Types fromList @ PartialFilePath _" [orphan] forall @ a
                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                HGit.Core.Types.PartialFilePath)
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = HGit.Core.Types.$sfromList @ a
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

